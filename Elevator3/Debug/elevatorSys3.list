
elevatorSys3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08009748  08009748  0000a748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009998  08009998  0000b154  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009998  08009998  0000a998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099a0  080099a0  0000b154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a0  080099a0  0000a9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099a4  080099a4  0000a9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  080099a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b154  2**0
                  CONTENTS
 10 .bss          00001f1c  20000154  20000154  0000b154  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002070  20002070  0000b154  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a53  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004733  00000000  00000000  0001ebd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00023310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc8  00000000  00000000  00024308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e6f  00000000  00000000  00024ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152dc  00000000  00000000  00049d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c87f0  00000000  00000000  0005f01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012780b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041ac  00000000  00000000  00127850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0012b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000154 	.word	0x20000154
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009730 	.word	0x08009730

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000158 	.word	0x20000158
 80001cc:	08009730 	.word	0x08009730

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <QF_int_disable_>:
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function, which means that
// this interrupt management policy CANNOT nest.
__attribute__ ((naked, weak))
void QF_int_disable_(void) {
__asm volatile (
 80005ac:	f3ef 8011 	mrs	r0, BASEPRI
 80005b0:	213f      	movs	r1, #63	@ 0x3f
 80005b2:	f381 8811 	msr	BASEPRI, r1
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d100      	bne.n	80005bc <QF_int_disable_error>
 80005ba:	4770      	bx	lr

080005bc <QF_int_disable_error>:
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <QF_int_disable_error+0xc>)
 80005be:	2164      	movs	r1, #100	@ 0x64
 80005c0:	4a02      	ldr	r2, [pc, #8]	@ (80005cc <QF_int_disable_error+0x10>)
 80005c2:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#100          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80005c4:	bf00      	nop
 80005c6:	0000      	.short	0x0000
 80005c8:	080098dc 	.word	0x080098dc
 80005cc:	08000b75 	.word	0x08000b75

080005d0 <QF_int_enable_>:
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function, which means that
// this interrupt management policy CANNOT nest.
__attribute__ ((naked, weak))
void QF_int_enable_(void) {
__asm volatile (
 80005d0:	f3ef 8011 	mrs	r0, BASEPRI
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d003      	beq.n	80005e0 <QF_int_enable_error>
 80005d8:	2100      	movs	r1, #0
 80005da:	f381 8811 	msr	BASEPRI, r1
 80005de:	4770      	bx	lr

080005e0 <QF_int_enable_error>:
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <QF_int_enable_error+0xc>)
 80005e2:	2165      	movs	r1, #101	@ 0x65
 80005e4:	4a02      	ldr	r2, [pc, #8]	@ (80005f0 <QF_int_enable_error+0x10>)
 80005e6:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#101          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80005e8:	bf00      	nop
 80005ea:	0000      	.short	0x0000
 80005ec:	080098dc 	.word	0x080098dc
 80005f0:	08000b75 	.word	0x08000b75

080005f4 <QF_crit_entry_>:
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function, which means that
// this critical section CANNOT nest.
__attribute__ ((naked, weak))
void QF_crit_entry_(void) {
__asm volatile (
 80005f4:	f3ef 8011 	mrs	r0, BASEPRI
 80005f8:	213f      	movs	r1, #63	@ 0x3f
 80005fa:	f381 8811 	msr	BASEPRI, r1
 80005fe:	2800      	cmp	r0, #0
 8000600:	d100      	bne.n	8000604 <QF_crit_entry_error>
 8000602:	4770      	bx	lr

08000604 <QF_crit_entry_error>:
 8000604:	4802      	ldr	r0, [pc, #8]	@ (8000610 <QF_crit_entry_error+0xc>)
 8000606:	216e      	movs	r1, #110	@ 0x6e
 8000608:	4a02      	ldr	r2, [pc, #8]	@ (8000614 <QF_crit_entry_error+0x10>)
 800060a:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#110          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 800060c:	bf00      	nop
 800060e:	0000      	.short	0x0000
 8000610:	080098dc 	.word	0x080098dc
 8000614:	08000b75 	.word	0x08000b75

08000618 <QF_crit_exit_>:
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function, which means that
// this critical section CANNOT nest.
__attribute__ ((naked, weak))
void QF_crit_exit_(void) {
__asm volatile (
 8000618:	f3ef 8011 	mrs	r0, BASEPRI
 800061c:	2800      	cmp	r0, #0
 800061e:	d003      	beq.n	8000628 <QF_crit_exit_error>
 8000620:	2100      	movs	r1, #0
 8000622:	f381 8811 	msr	BASEPRI, r1
 8000626:	4770      	bx	lr

08000628 <QF_crit_exit_error>:
 8000628:	4802      	ldr	r0, [pc, #8]	@ (8000634 <QF_crit_exit_error+0xc>)
 800062a:	216f      	movs	r1, #111	@ 0x6f
 800062c:	4a02      	ldr	r2, [pc, #8]	@ (8000638 <QF_crit_exit_error+0x10>)
 800062e:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#111          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8000630:	bf00      	nop
 8000632:	0000      	.short	0x0000
 8000634:	080098dc 	.word	0x080098dc
 8000638:	08000b75 	.word	0x08000b75

0800063c <QV_init>:
// application programmer forgets to explicitly set priorities of all
// "kernel aware" interrupts.
//
// NOTE: The IRQ priorities established in QV_init() can be later changed
// by the application-level code.
void QV_init(void) {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0

#ifdef QF_USE_BASEPRI   //--------- use BASEPRI for critical section?

    // SCB_SYSPRI[2]:  SysTick
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_USE_BASEPRI << 24U));
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <QV_init+0x5c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <QV_init+0x5c>)
 8000648:	f043 537c 	orr.w	r3, r3, #1056964608	@ 0x3f000000
 800064c:	6013      	str	r3, [r2, #0]

    // set all 240 possible IRQ priories to QF_USE_BASEPRI...
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	e00b      	b.n	800066c <QV_init+0x30>
        NVIC_IP[n] = (QF_USE_BASEPRI << 24U) | (QF_USE_BASEPRI << 16U)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800065c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000660:	f04f 323f 	mov.w	r2, #1061109567	@ 0x3f3f3f3f
 8000664:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000670:	d9f0      	bls.n	8000654 <QV_init+0x18>

#endif                  //--------- use BASEPRI for critical section

#ifdef __ARM_FP         //--------- if VFP available...
    // make sure that the FPU is enabled by setting CP10 & CP11 Full Access
    SCB_CPACR = (SCB_CPACR | ((3UL << 20U) | (3UL << 22U)));
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <QV_init+0x60>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a09      	ldr	r2, [pc, #36]	@ (800069c <QV_init+0x60>)
 8000678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800067c:	6013      	str	r3, [r2, #0]

    // FPU automatic state preservation (ASPEN) lazy stacking (LSPEN)
    FPU_FPCCR = (FPU_FPCCR | (1U << 30U) | (1U << 31U));
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <QV_init+0x64>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <QV_init+0x64>)
 8000684:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8000688:	6013      	str	r3, [r2, #0]
#endif                  //--------- VFP available
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed20 	.word	0xe000ed20
 800069c:	e000ed88 	.word	0xe000ed88
 80006a0:	e000ef34 	.word	0xe000ef34

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db0a      	blt.n	8000716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	490c      	ldr	r1, [pc, #48]	@ (8000738 <__NVIC_SetPriority+0x4c>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	0112      	lsls	r2, r2, #4
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	440b      	add	r3, r1
 8000710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000714:	e00a      	b.n	800072c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4908      	ldr	r1, [pc, #32]	@ (800073c <__NVIC_SetPriority+0x50>)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	3b04      	subs	r3, #4
 8000724:	0112      	lsls	r2, r2, #4
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	440b      	add	r3, r1
 800072a:	761a      	strb	r2, [r3, #24]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000e100 	.word	0xe000e100
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	210f      	movs	r1, #15
 8000760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000764:	f7ff ffc2 	bl	80006ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <greenOn>:

//............................................................................
void orangeOn()  { HAL_GPIO_WritePin(LED_GPIO_PORT, ORANGE_PIN, GPIO_PIN_SET); }
void orangeOff() { HAL_GPIO_WritePin(LED_GPIO_PORT, ORANGE_PIN, GPIO_PIN_RESET); }

void greenOn()   { HAL_GPIO_WritePin(LED_GPIO_PORT, GREEN_PIN, GPIO_PIN_SET); }
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800078e:	4802      	ldr	r0, [pc, #8]	@ (8000798 <greenOn+0x14>)
 8000790:	f002 faa2 	bl	8002cd8 <HAL_GPIO_WritePin>
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40020c00 	.word	0x40020c00

0800079c <greenOff>:
void greenOff()  { HAL_GPIO_WritePin(LED_GPIO_PORT, GREEN_PIN, GPIO_PIN_RESET); }
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a6:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <greenOff+0x14>)
 80007a8:	f002 fa96 	bl	8002cd8 <HAL_GPIO_WritePin>
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40020c00 	.word	0x40020c00

080007b4 <redOn>:

void redOn()     { HAL_GPIO_WritePin(LED_GPIO_PORT, RED_PIN, GPIO_PIN_SET); }
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007be:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <redOn+0x14>)
 80007c0:	f002 fa8a 	bl	8002cd8 <HAL_GPIO_WritePin>
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40020c00 	.word	0x40020c00

080007cc <redOff>:
void redOff()    { HAL_GPIO_WritePin(LED_GPIO_PORT, RED_PIN, GPIO_PIN_RESET); }
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007d6:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <redOff+0x14>)
 80007d8:	f002 fa7e 	bl	8002cd8 <HAL_GPIO_WritePin>
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020c00 	.word	0x40020c00

080007e4 <blueOn>:

void blueOn()    { HAL_GPIO_WritePin(LED_GPIO_PORT, BLUE_PIN, GPIO_PIN_SET); }
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ee:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <blueOn+0x14>)
 80007f0:	f002 fa72 	bl	8002cd8 <HAL_GPIO_WritePin>
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40020c00 	.word	0x40020c00

080007fc <blueOff>:
void blueOff()   { HAL_GPIO_WritePin(LED_GPIO_PORT, BLUE_PIN, GPIO_PIN_RESET); }
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000806:	4802      	ldr	r0, [pc, #8]	@ (8000810 <blueOff+0x14>)
 8000808:	f002 fa66 	bl	8002cd8 <HAL_GPIO_WritePin>
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40020c00 	.word	0x40020c00

08000814 <EXTI0_IRQHandler>:
}


//..........................................................................

void EXTI0_IRQHandler(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BTN_B1);
 8000818:	2001      	movs	r0, #1
 800081a:	f002 fa77 	bl	8002d0c <HAL_GPIO_EXTI_IRQHandler>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_EXTI_Callback>:

// 5. Callback for button press
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BTN_B1) {
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d107      	bne.n	8000844 <HAL_GPIO_EXTI_Callback+0x20>
        static QEvt display = QEVT_INITIALIZER(PRINT_SIG);
        QACTIVE_POST(AOElevator,&display, (void)0U);
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <HAL_GPIO_EXTI_Callback+0x28>)
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	2300      	movs	r3, #0
 800083a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083e:	4904      	ldr	r1, [pc, #16]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000840:	f000 ff82 	bl	8001748 <QActive_post_>
    }
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000004 	.word	0x20000004
 8000850:	20000000 	.word	0x20000000

08000854 <SysTick_Handler>:



// ISRs used in the application ==========================================
void SysTick_Handler(void); // prototype
void SysTick_Handler(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800085a:	f001 ff6f 	bl	800273c <HAL_IncTick>

    QTIMEEVT_TICK_X(0U, &l_SysTick_Handler); // time events at rate 0
 800085e:	2100      	movs	r1, #0
 8000860:	2000      	movs	r0, #0
 8000862:	f001 fc3f 	bl	80020e4 <QTimeEvt_tick_>
        uint32_t pre_previous;
    } buttons = { 0U, 0U ,0U};



    uint32_t current = GPIOA->IDR; // active-low logic
 8000866:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <SysTick_Handler+0x80>)
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	607b      	str	r3, [r7, #4]
    uint32_t tmp = buttons.depressed;
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <SysTick_Handler+0x84>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	603b      	str	r3, [r7, #0]

    buttons.depressed |= (buttons.pre_previous & buttons.previous & current);
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <SysTick_Handler+0x84>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <SysTick_Handler+0x84>)
 8000878:	6899      	ldr	r1, [r3, #8]
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <SysTick_Handler+0x84>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	4019      	ands	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
 8000884:	4313      	orrs	r3, r2
 8000886:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <SysTick_Handler+0x84>)
 8000888:	6013      	str	r3, [r2, #0]
    buttons.depressed &= (buttons.pre_previous | buttons.previous | current);
 800088a:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <SysTick_Handler+0x84>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <SysTick_Handler+0x84>)
 8000890:	6899      	ldr	r1, [r3, #8]
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <SysTick_Handler+0x84>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	4319      	orrs	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	430b      	orrs	r3, r1
 800089c:	4013      	ands	r3, r2
 800089e:	4a0e      	ldr	r2, [pc, #56]	@ (80008d8 <SysTick_Handler+0x84>)
 80008a0:	6013      	str	r3, [r2, #0]

    buttons.pre_previous = buttons.previous;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <SysTick_Handler+0x84>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <SysTick_Handler+0x84>)
 80008a8:	6093      	str	r3, [r2, #8]
    buttons.previous = current;
 80008aa:	4a0b      	ldr	r2, [pc, #44]	@ (80008d8 <SysTick_Handler+0x84>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6053      	str	r3, [r2, #4]

    tmp ^= buttons.depressed;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <SysTick_Handler+0x84>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	4053      	eors	r3, r2
 80008b8:	603b      	str	r3, [r7, #0]
    current = buttons.depressed;
 80008ba:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <SysTick_Handler+0x84>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	607b      	str	r3, [r7, #4]

    if ((tmp & (1U << BTN_B1)) != 0U) {
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
        if ((current & (1U << BTN_B1)) != 0U) {
//        	static QEvt display = QEVT_INITIALIZER(PRINT_SIG);
//        	QACTIVE_POST(AOElevator,&display, (void)0U);
}
    }
    QV_ARM_ERRATUM_838869();
 80008c8:	f3bf 8f4f 	dsb	sy
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40020000 	.word	0x40020000
 80008d8:	20000170 	.word	0x20000170

080008dc <BSP_init>:
//============================================================================
// BSP functions...
//............................................................................

//............................................................................
void BSP_init(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0
    Q_ASSERT(MAX_LEVELS <= 16U);
 80008e2:	f7ff fe87 	bl	80005f4 <QF_crit_entry_>
 80008e6:	f7ff fe97 	bl	8000618 <QF_crit_exit_>

    // Configure the MPU to prevent NULL-pointer dereferencing ...
    MPU->RBAR = 0x0U                          // base address (NULL)
 80008ea:	4b31      	ldr	r3, [pc, #196]	@ (80009b0 <BSP_init+0xd4>)
 80008ec:	2217      	movs	r2, #23
 80008ee:	60da      	str	r2, [r3, #12]
                | MPU_RBAR_VALID_Msk          // valid region
                | (MPU_RBAR_REGION_Msk & 7U); // region #7
    MPU->RASR = (7U << MPU_RASR_SIZE_Pos)     // 2^(7+1) region
 80008f0:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BSP_init+0xd4>)
 80008f2:	220f      	movs	r2, #15
 80008f4:	611a      	str	r2, [r3, #16]
                | (0x0U << MPU_RASR_AP_Pos)   // no-access region
                | MPU_RASR_ENABLE_Msk;        // region enable
    MPU->CTRL = MPU_CTRL_PRIVDEFENA_Msk       // enable background region
 80008f6:	4b2e      	ldr	r3, [pc, #184]	@ (80009b0 <BSP_init+0xd4>)
 80008f8:	2205      	movs	r2, #5
 80008fa:	605a      	str	r2, [r3, #4]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80008fc:	f3bf 8f6f 	isb	sy
}
 8000900:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000902:	f3bf 8f4f 	dsb	sy
}
 8000906:	bf00      	nop
    __ISB();
    __DSB();

    // NOTE: SystemInit() has been already called from the startup code
    // but SystemCoreClock needs to be updated
    HAL_Init();
 8000908:	f001 fec6 	bl	8002698 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config(); 
 800090c:	f000 f858 	bl	80009c0 <SystemClock_Config>
    //configure the system clock update
    // SystemCoreClockUpdate();

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000910:	f000 f8c0 	bl	8000a94 <MX_GPIO_Init>
    MX_USB_DEVICE_Init();
 8000914:	f007 fbee 	bl	80080f4 <MX_USB_DEVICE_Init>

    // Initialize thr port for the LEDs
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	4b25      	ldr	r3, [pc, #148]	@ (80009b4 <BSP_init+0xd8>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000920:	4a24      	ldr	r2, [pc, #144]	@ (80009b4 <BSP_init+0xd8>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6313      	str	r3, [r2, #48]	@ 0x30
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <BSP_init+0xd8>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = ORANGE_PIN | GREEN_PIN | RED_PIN | BLUE_PIN;
 8000944:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094e:	2301      	movs	r3, #1
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4816      	ldr	r0, [pc, #88]	@ (80009b8 <BSP_init+0xdc>)
 800095e:	f002 f81f 	bl	80029a0 <HAL_GPIO_Init>

    //...................................................................
    //Initiallize user button for current state and welcom message sending

    //Enable clock for GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <BSP_init+0xd8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <BSP_init+0xd8>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <BSP_init+0xd8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct = (GPIO_InitTypeDef){0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
    	// Configure PA0 as input with interrupt on rising edge
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800098e:	2301      	movs	r3, #1
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;  // or IT_RISING if using EXTI
 8000992:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;      // Button is active-low on STM32F4-Disc1
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	@ (80009bc <BSP_init+0xe0>)
 80009a4:	f001 fffc 	bl	80029a0 <HAL_GPIO_Init>
    QS_ONLY(produce_sig_dict());

    // setup the QS filters...
    QS_GLB_FILTER(QS_ALL_RECORDS);   // all records
    QS_GLB_FILTER(-QS_QF_TICK);      // exclude the clock tick
}
 80009a8:	bf00      	nop
 80009aa:	3730      	adds	r7, #48	@ 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	e000ed90 	.word	0xe000ed90
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	40020000 	.word	0x40020000

080009c0 <SystemClock_Config>:
    /**
     * @brief System Clock Configuration
     * @retval None
     */
    void SystemClock_Config(void)
    {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	@ 0x50
 80009c4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	@ 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f008 fa1e 	bl	8008e10 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
    
    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <SystemClock_Config+0xcc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	4a27      	ldr	r2, [pc, #156]	@ (8000a8c <SystemClock_Config+0xcc>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f4:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <SystemClock_Config+0xcc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <SystemClock_Config+0xd0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a21      	ldr	r2, [pc, #132]	@ (8000a90 <SystemClock_Config+0xd0>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <SystemClock_Config+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
    
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000a30:	2308      	movs	r3, #8
 8000a32:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000a34:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a38:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fbca 	bl	80041e0 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x96>
    {
        Error_Handler();
 8000a52:	f000 f897 	bl	8000b84 <Error_Handler>
    }
    
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a66:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6c:	61fb      	str	r3, [r7, #28]
    
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	2105      	movs	r1, #5
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 fe2b 	bl	80046d0 <HAL_RCC_ClockConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0xc4>
    {
        Error_Handler();
 8000a80:	f000 f880 	bl	8000b84 <Error_Handler>
    }
    }
 8000a84:	bf00      	nop
 8000a86:	3750      	adds	r7, #80	@ 0x50
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <MX_GPIO_Init>:
     * @brief GPIO Initialization Function
     * @param None
     * @retval None
     */
    void MX_GPIO_Init(void)
    {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    
    /* USER CODE END MX_GPIO_Init_1 */
    
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <MX_GPIO_Init+0x98>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b2c <MX_GPIO_Init+0x98>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <MX_GPIO_Init+0x98>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_GPIO_Init+0x98>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a17      	ldr	r2, [pc, #92]	@ (8000b2c <MX_GPIO_Init+0x98>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_GPIO_Init+0x98>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_GPIO_Init+0x98>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a10      	ldr	r2, [pc, #64]	@ (8000b2c <MX_GPIO_Init+0x98>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_GPIO_Init+0x98>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
    
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2101      	movs	r1, #1
 8000b02:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <MX_GPIO_Init+0x9c>)
 8000b04:	f002 f8e8 	bl	8002cd8 <HAL_GPIO_WritePin>
    
    /*Configure GPIO pin : PC0 */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <MX_GPIO_Init+0x9c>)
 8000b20:	f001 ff3e 	bl	80029a0 <HAL_GPIO_Init>
    
    /* USER CODE BEGIN MX_GPIO_Init_2 */
    
    /* USER CODE END MX_GPIO_Init_2 */
    }
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020800 	.word	0x40020800

08000b34 <BSP_start>:
  

//............................................................................
void BSP_start(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af04      	add	r7, sp, #16
    // initialize event pools
    // HAL_ResumeTick(); // resume the SysTick interrupt
    static QF_MPOOL_EL(requestEvt) smlPoolSto[MAX_LEVELS];
    QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	216c      	movs	r1, #108	@ 0x6c
 8000b3e:	480a      	ldr	r0, [pc, #40]	@ (8000b68 <BSP_start+0x34>)
 8000b40:	f000 ff02 	bl	8001948 <QF_poolInit>

    // static QF_MPOOL_EL(printDataEvt) mediumlPoolSto[MAX_LEVELS];
    // QF_poolInit(mediumlPoolSto, sizeof(mediumlPoolSto), sizeof(mediumlPoolSto[0]));
        static QEvtPtr elevatorQueueSto[MAX_LEVELS];
    Elevator_Ctor();
 8000b44:	f000 fa78 	bl	8001038 <Elevator_Ctor>
    QActive_start(AOElevator,
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <BSP_start+0x38>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9302      	str	r3, [sp, #8]
 8000b50:	2300      	movs	r3, #0
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	2300      	movs	r3, #0
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2309      	movs	r3, #9
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <BSP_start+0x3c>)
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	f001 fc15 	bl	800238c <QActive_start>
        4U,                // QP prio. of the Elevator I dont know why we skip the first 2
        elevatorQueueSto,               // event queue storage
        Q_DIM(elevatorQueueSto),        // queue length [events]
        (void *)0, 0U,               // no stack storage
        (void *)0);                  // no initialization param
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000017c 	.word	0x2000017c
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	200001e8 	.word	0x200001e8

08000b74 <Q_onError>:

// Error handler and ISRs...

Q_NORETURN Q_onError(char const * const module, int_t const id) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(id);
    QS_ASSERTION(module, id, 10000U);

#ifndef NDEBUG
    // for debugging, hang on in an endless loop...
    for (;;) {
 8000b7e:	bf00      	nop
 8000b80:	e7fd      	b.n	8000b7e <Q_onError+0xa>
	...

08000b84 <Error_Handler>:
void assert_failed(char const * const module, int_t const id) {
    Q_onError(module, id);
}

//.............................................................................
void Error_Handler(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    // NOTE: this implementation of the error handler is intended only
    // for debugging and MUST be changed for deployment of the application
    // (assuming that you ship your production code with assertions enabled).
    Q_onError("Error_Handler", 10000);
 8000b88:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000b8c:	4801      	ldr	r0, [pc, #4]	@ (8000b94 <Error_Handler+0x10>)
 8000b8e:	f7ff fff1 	bl	8000b74 <Q_onError>
 8000b92:	bf00      	nop
 8000b94:	08009748 	.word	0x08009748

08000b98 <QF_onStartup>:
}
//.............................................................................
// QF callbacks...
void QF_onStartup(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b9c:	b662      	cpsie	i
}
 8000b9e:	bf00      	nop
    // set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate
    __enable_irq(); 
    SystemCoreClockUpdate();
 8000ba0:	f001 fcd0 	bl	8002544 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <QF_onStartup+0x5c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a13      	ldr	r2, [pc, #76]	@ (8000bf8 <QF_onStartup+0x60>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fdc5 	bl	8000740 <SysTick_Config>

    // assign all priority bits for preemption-prio. and none to sub-prio.
    NVIC_SetPriorityGrouping(0U);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f7ff fd74 	bl	80006a4 <__NVIC_SetPriorityGrouping>

    // set priorities of ALL ISRs used in the system, see NOTE1
    // HAL_NVIC_SetPriority(USART2_IRQn, QF_AWARE_ISR_CMSIS_PRI+1U , 0); 

    HAL_NVIC_SetPriority(OTG_FS_IRQn, QF_AWARE_ISR_CMSIS_PRI + 1U, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	2043      	movs	r0, #67	@ 0x43
 8000bc2:	f001 feb6 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000bc6:	2043      	movs	r0, #67	@ 0x43
 8000bc8:	f001 fecf 	bl	800296a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(SysTick_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 2U, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2105      	movs	r1, #5
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd4:	f001 fead 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SysTick_IRQn);
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bdc:	f001 fec5 	bl	800296a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI0_IRQn, QF_AWARE_ISR_CMSIS_PRI+ 3U, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2106      	movs	r1, #6
 8000be4:	2006      	movs	r0, #6
 8000be6:	f001 fea4 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bea:	2006      	movs	r0, #6
 8000bec:	f001 febd 	bl	800296a <HAL_NVIC_EnableIRQ>

    // enable IRQs...
#ifdef Q_SPY
    NVIC_EnableIRQ(USART2_IRQn); // USART2 interrupt used for QS-RX
#endif
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	51eb851f 	.word	0x51eb851f

08000bfc <QV_onIdle>:
//............................................................................
void QF_onCleanup(void) {
}
//............................................................................
void QV_onIdle(void) { // CATION: called with interrupts DISABLED, see NOTE0
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
    // instead of your broken code. When done disconnect BOOT0, and start over.
    //
    QV_CPU_SLEEP(); // atomically go to sleep and enable interrupts
    QF_INT_ENABLE(); // for now, just enable interrupts
#else
    QF_INT_ENABLE(); // just enable interrupts
 8000c00:	f7ff fce6 	bl	80005d0 <QF_int_enable_>
#endif
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <Elevator_initial>:
//$define${AOs::Elevator} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Elevator} ...........................................................

//${AOs::Elevator::SM} .......................................................
QState Elevator_initial(Elevator * const me, void const * const par) {
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
    (void) par;


    //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    strcpy(me->doorState, "Closed");
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3340      	adds	r3, #64	@ 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <Elevator_initial+0x30>)
 8000c18:	6810      	ldr	r0, [r2, #0]
 8000c1a:	6018      	str	r0, [r3, #0]
 8000c1c:	8891      	ldrh	r1, [r2, #4]
 8000c1e:	7992      	ldrb	r2, [r2, #6]
 8000c20:	8099      	strh	r1, [r3, #4]
 8000c22:	719a      	strb	r2, [r3, #6]

    //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    return Q_TRAN(&Elevator_operational);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <Elevator_initial+0x34>)
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	2307      	movs	r3, #7
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	08009758 	.word	0x08009758
 8000c3c:	08000c41 	.word	0x08000c41

08000c40 <Elevator_operational>:

//${AOs::Elevator::SM::operational} ..........................................
QState Elevator_operational(Elevator * const me, QEvt const * const e) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b090      	sub	sp, #64	@ 0x40
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d002      	beq.n	8000c58 <Elevator_operational+0x18>
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	d006      	beq.n	8000c64 <Elevator_operational+0x24>
 8000c56:	e039      	b.n	8000ccc <Elevator_operational+0x8c>
        //${AOs::Elevator::SM::operational::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Elevator_Stationary);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a22      	ldr	r2, [pc, #136]	@ (8000ce4 <Elevator_operational+0xa4>)
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	2307      	movs	r3, #7
 8000c60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8000c62:	e039      	b.n	8000cd8 <Elevator_operational+0x98>
        }
        //${AOs::Elevator::SM::operational::PRINT}
        case PRINT_SIG: {
                const char* msg =
 8000c64:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <Elevator_operational+0xa8>)
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
                    "\n\rA-E: Select destination inside (A1, B2, C3, D4, E5)\n"
                    "\n\rrO: Open door "
                    "\n\rN: Close door"
                    "\n\rM: Show menu";

                 while (CDC_Transmit_FS((uint8_t*)msg, strlen(msg)) != USBD_OK) {
 8000c68:	e002      	b.n	8000c70 <Elevator_operational+0x30>
                     HAL_Delay(4);
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f000 fa57 	bl	800111e <HAL_Delay>
                 while (CDC_Transmit_FS((uint8_t*)msg, strlen(msg)) != USBD_OK) {
 8000c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000c72:	f7ff faad 	bl	80001d0 <strlen>
 8000c76:	4603      	mov	r3, r0
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000c7e:	f007 fc35 	bl	80084ec <CDC_Transmit_FS>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f0      	bne.n	8000c6a <Elevator_operational+0x2a>
                 }


                 char buffer[40];
                 snprintf(buffer, sizeof(buffer), "\r\n\n\t%-15s %-15s",
 8000c88:	f107 0008 	add.w	r0, r7, #8
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <Elevator_operational+0xac>)
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <Elevator_operational+0xb0>)
 8000c92:	4a18      	ldr	r2, [pc, #96]	@ (8000cf4 <Elevator_operational+0xb4>)
 8000c94:	2128      	movs	r1, #40	@ 0x28
 8000c96:	f008 f885 	bl	8008da4 <sniprintf>
                          "Current-Level","Door State\n" );


                 while (CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer)) != USBD_OK) {
 8000c9a:	e002      	b.n	8000ca2 <Elevator_operational+0x62>
                     HAL_Delay(4);
 8000c9c:	2004      	movs	r0, #4
 8000c9e:	f000 fa3e 	bl	800111e <HAL_Delay>
                 while (CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer)) != USBD_OK) {
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fa92 	bl	80001d0 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f007 fc18 	bl	80084ec <CDC_Transmit_FS>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1ec      	bne.n	8000c9c <Elevator_operational+0x5c>
                 }

                 refreshFeed();
 8000cc2:	f000 f9d7 	bl	8001074 <refreshFeed>
            status_ = Q_HANDLED();
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8000cca:	e005      	b.n	8000cd8 <Elevator_operational+0x98>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <Elevator_operational+0xb8>)
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8000cd6:	bf00      	nop
        }
    }
    return status_;
 8000cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3738      	adds	r7, #56	@ 0x38
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08000cfd 	.word	0x08000cfd
 8000ce8:	08009760 	.word	0x08009760
 8000cec:	0800982c 	.word	0x0800982c
 8000cf0:	0800980c 	.word	0x0800980c
 8000cf4:	0800981c 	.word	0x0800981c
 8000cf8:	080013bd 	.word	0x080013bd

08000cfc <Elevator_Stationary>:

//${AOs::Elevator::SM::operational::Stationary} ..............................
QState Elevator_Stationary(Elevator * const me, QEvt const * const e) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d010      	beq.n	8000d30 <Elevator_Stationary+0x34>
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	dc14      	bgt.n	8000d3c <Elevator_Stationary+0x40>
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d002      	beq.n	8000d1c <Elevator_Stationary+0x20>
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d005      	beq.n	8000d26 <Elevator_Stationary+0x2a>
 8000d1a:	e00f      	b.n	8000d3c <Elevator_Stationary+0x40>
        //${AOs::Elevator::SM::operational::Stationary}
        case Q_ENTRY_SIG: {
            redOn();
 8000d1c:	f7ff fd4a 	bl	80007b4 <redOn>
            status_ = Q_HANDLED();
 8000d20:	2302      	movs	r3, #2
 8000d22:	60fb      	str	r3, [r7, #12]
            break;
 8000d24:	e010      	b.n	8000d48 <Elevator_Stationary+0x4c>
        }
        //${AOs::Elevator::SM::operational::Stationary}
        case Q_EXIT_SIG: {
            redOff();
 8000d26:	f7ff fd51 	bl	80007cc <redOff>

            status_ = Q_HANDLED();
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	60fb      	str	r3, [r7, #12]
            break;
 8000d2e:	e00b      	b.n	8000d48 <Elevator_Stationary+0x4c>
        }
        //${AOs::Elevator::SM::operational::Stationary::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Elevator_closed);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <Elevator_Stationary+0x58>)
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	2307      	movs	r3, #7
 8000d38:	60fb      	str	r3, [r7, #12]
            break;
 8000d3a:	e005      	b.n	8000d48 <Elevator_Stationary+0x4c>
        }
        default: {
            status_ = Q_SUPER(&Elevator_operational);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <Elevator_Stationary+0x5c>)
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
            break;
 8000d46:	bf00      	nop
        }
    }
    return status_;
 8000d48:	68fb      	ldr	r3, [r7, #12]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08000ee5 	.word	0x08000ee5
 8000d58:	08000c41 	.word	0x08000c41

08000d5c <Elevator_Closing>:

//${AOs::Elevator::SM::operational::Stationary::Closing} .....................
QState Elevator_Closing(Elevator * const me, QEvt const * const e) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d017      	beq.n	8000d9e <Elevator_Closing+0x42>
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	dc26      	bgt.n	8000dc0 <Elevator_Closing+0x64>
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d002      	beq.n	8000d7c <Elevator_Closing+0x20>
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d00c      	beq.n	8000d94 <Elevator_Closing+0x38>
 8000d7a:	e021      	b.n	8000dc0 <Elevator_Closing+0x64>
        //${AOs::Elevator::SM::operational::Stationary::Closing}
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->Timer_Evt, CLOSING_TIME, 0U); /*<== one shot */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3328      	adds	r3, #40	@ 0x28
 8000d80:	2200      	movs	r2, #0
 8000d82:	21c8      	movs	r1, #200	@ 0xc8
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 f911 	bl	8001fac <QTimeEvt_armX>
            blueOn();
 8000d8a:	f7ff fd2b 	bl	80007e4 <blueOn>
            status_ = Q_HANDLED();
 8000d8e:	2302      	movs	r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
            break;
 8000d92:	e01b      	b.n	8000dcc <Elevator_Closing+0x70>
        }
        //${AOs::Elevator::SM::operational::Stationary::Closing}
        case Q_EXIT_SIG: {
            blueOff();
 8000d94:	f7ff fd32 	bl	80007fc <blueOff>
            status_ = Q_HANDLED();
 8000d98:	2302      	movs	r3, #2
 8000d9a:	60fb      	str	r3, [r7, #12]
            break;
 8000d9c:	e016      	b.n	8000dcc <Elevator_Closing+0x70>
        }
        //${AOs::Elevator::SM::operational::Stationary::Closing::TIMEOUT}
        case TIMEOUT_SIG: {
            strcpy(me->doorState, "Closed");
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3340      	adds	r3, #64	@ 0x40
 8000da2:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <Elevator_Closing+0x7c>)
 8000da4:	6810      	ldr	r0, [r2, #0]
 8000da6:	6018      	str	r0, [r3, #0]
 8000da8:	8891      	ldrh	r1, [r2, #4]
 8000daa:	7992      	ldrb	r2, [r2, #6]
 8000dac:	8099      	strh	r1, [r3, #4]
 8000dae:	719a      	strb	r2, [r3, #6]
            refreshFeed();
 8000db0:	f000 f960 	bl	8001074 <refreshFeed>
            status_ = Q_TRAN(&Elevator_closed);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <Elevator_Closing+0x80>)
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	2307      	movs	r3, #7
 8000dbc:	60fb      	str	r3, [r7, #12]
            break;
 8000dbe:	e005      	b.n	8000dcc <Elevator_Closing+0x70>
        }
        default: {
            status_ = Q_SUPER(&Elevator_Stationary);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <Elevator_Closing+0x84>)
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
            break;
 8000dca:	bf00      	nop
        }
    }
    return status_;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	08009758 	.word	0x08009758
 8000ddc:	08000ee5 	.word	0x08000ee5
 8000de0:	08000cfd 	.word	0x08000cfd

08000de4 <Elevator_Openning>:

//${AOs::Elevator::SM::operational::Stationary::Openning} ....................
QState Elevator_Openning(Elevator * const me, QEvt const * const e) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d017      	beq.n	8000e26 <Elevator_Openning+0x42>
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	dc26      	bgt.n	8000e48 <Elevator_Openning+0x64>
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d002      	beq.n	8000e04 <Elevator_Openning+0x20>
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d00c      	beq.n	8000e1c <Elevator_Openning+0x38>
 8000e02:	e021      	b.n	8000e48 <Elevator_Openning+0x64>
        //${AOs::Elevator::SM::operational::Stationary::Openning}
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->Timer_Evt, OPENNING_TIME, 0U); /*<== one shot */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3328      	adds	r3, #40	@ 0x28
 8000e08:	2200      	movs	r2, #0
 8000e0a:	21c8      	movs	r1, #200	@ 0xc8
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f8cd 	bl	8001fac <QTimeEvt_armX>
            blueOn();
 8000e12:	f7ff fce7 	bl	80007e4 <blueOn>

            status_ = Q_HANDLED();
 8000e16:	2302      	movs	r3, #2
 8000e18:	60fb      	str	r3, [r7, #12]
            break;
 8000e1a:	e01b      	b.n	8000e54 <Elevator_Openning+0x70>
        }
        //${AOs::Elevator::SM::operational::Stationary::Openning}
        case Q_EXIT_SIG: {
            blueOff();
 8000e1c:	f7ff fcee 	bl	80007fc <blueOff>
            status_ = Q_HANDLED();
 8000e20:	2302      	movs	r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
            break;
 8000e24:	e016      	b.n	8000e54 <Elevator_Openning+0x70>
        }
        //${AOs::Elevator::SM::operational::Stationary::Openning::TIMEOUT}
        case TIMEOUT_SIG: {
            strcpy(me->doorState, "Opened");
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3340      	adds	r3, #64	@ 0x40
 8000e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <Elevator_Openning+0x7c>)
 8000e2c:	6810      	ldr	r0, [r2, #0]
 8000e2e:	6018      	str	r0, [r3, #0]
 8000e30:	8891      	ldrh	r1, [r2, #4]
 8000e32:	7992      	ldrb	r2, [r2, #6]
 8000e34:	8099      	strh	r1, [r3, #4]
 8000e36:	719a      	strb	r2, [r3, #6]
            refreshFeed();
 8000e38:	f000 f91c 	bl	8001074 <refreshFeed>
            status_ = Q_TRAN(&Elevator_Opened);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a09      	ldr	r2, [pc, #36]	@ (8000e64 <Elevator_Openning+0x80>)
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	2307      	movs	r3, #7
 8000e44:	60fb      	str	r3, [r7, #12]
            break;
 8000e46:	e005      	b.n	8000e54 <Elevator_Openning+0x70>
        }
        default: {
            status_ = Q_SUPER(&Elevator_Stationary);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <Elevator_Openning+0x84>)
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
            break;
 8000e52:	bf00      	nop
        }
    }
    return status_;
 8000e54:	68fb      	ldr	r3, [r7, #12]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	08009838 	.word	0x08009838
 8000e64:	08000e6d 	.word	0x08000e6d
 8000e68:	08000cfd 	.word	0x08000cfd

08000e6c <Elevator_Opened>:

//${AOs::Elevator::SM::operational::Stationary::Opened} ......................
QState Elevator_Opened(Elevator * const me, QEvt const * const e) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d010      	beq.n	8000ea0 <Elevator_Opened+0x34>
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	dc1e      	bgt.n	8000ec0 <Elevator_Opened+0x54>
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d002      	beq.n	8000e8c <Elevator_Opened+0x20>
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d005      	beq.n	8000e96 <Elevator_Opened+0x2a>
 8000e8a:	e019      	b.n	8000ec0 <Elevator_Opened+0x54>
        //${AOs::Elevator::SM::operational::Stationary::Opened}
        case Q_ENTRY_SIG: {
            redOn();
 8000e8c:	f7ff fc92 	bl	80007b4 <redOn>

            //QTimeEvt_armX(&me->stationaryTEvt, OPENED_WAIT_TIME, 0U); /*<== one shot */
            status_ = Q_HANDLED();
 8000e90:	2302      	movs	r3, #2
 8000e92:	60fb      	str	r3, [r7, #12]
            break;
 8000e94:	e01a      	b.n	8000ecc <Elevator_Opened+0x60>
        }
        //${AOs::Elevator::SM::operational::Stationary::Opened}
        case Q_EXIT_SIG: {
            redOff();
 8000e96:	f7ff fc99 	bl	80007cc <redOff>
            status_ = Q_HANDLED();
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	60fb      	str	r3, [r7, #12]
            break;
 8000e9e:	e015      	b.n	8000ecc <Elevator_Opened+0x60>
        }
        //${AOs::Elevator::SM::operational::Stationary::Opened::CLOSE}
        case CLOSE_SIG: {
            //unregister_request(me->current);
            strcpy(me->doorState, "Closing");
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3340      	adds	r3, #64	@ 0x40
 8000ea4:	490c      	ldr	r1, [pc, #48]	@ (8000ed8 <Elevator_Opened+0x6c>)
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	cb03      	ldmia	r3!, {r0, r1}
 8000eac:	6010      	str	r0, [r2, #0]
 8000eae:	6051      	str	r1, [r2, #4]
            refreshFeed();
 8000eb0:	f000 f8e0 	bl	8001074 <refreshFeed>
            status_ = Q_TRAN(&Elevator_Closing);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a09      	ldr	r2, [pc, #36]	@ (8000edc <Elevator_Opened+0x70>)
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	2307      	movs	r3, #7
 8000ebc:	60fb      	str	r3, [r7, #12]
            break;
 8000ebe:	e005      	b.n	8000ecc <Elevator_Opened+0x60>
        }
        default: {
            status_ = Q_SUPER(&Elevator_Stationary);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <Elevator_Opened+0x74>)
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
            break;
 8000eca:	bf00      	nop
        }
    }
    return status_;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	08009840 	.word	0x08009840
 8000edc:	08000d5d 	.word	0x08000d5d
 8000ee0:	08000cfd 	.word	0x08000cfd

08000ee4 <Elevator_closed>:

//${AOs::Elevator::SM::operational::Stationary::closed} ......................
QState Elevator_closed(Elevator * const me, QEvt const * const e) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d002      	beq.n	8000efc <Elevator_closed+0x18>
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	d015      	beq.n	8000f26 <Elevator_closed+0x42>
 8000efa:	e026      	b.n	8000f4a <Elevator_closed+0x66>
        //${AOs::Elevator::SM::operational::Stationary::closed::REQUEST}
        case REQUEST_SIG: {
            //${AOs::Elevator::SM::operational::Stationary::closed::REQUEST::[me->current==Q_EVT_CAST(request~}
            if (me->current ==  Q_EVT_CAST(requestEvt)->level) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d102      	bne.n	8000f10 <Elevator_closed+0x2c>
                status_ = Q_HANDLED();
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	60fb      	str	r3, [r7, #12]
            else {
                me->next = Q_EVT_CAST(requestEvt)->level;

                status_ = Q_TRAN(&Elevator_motion);
            }
            break;
 8000f0e:	e022      	b.n	8000f56 <Elevator_closed+0x72>
                me->next = Q_EVT_CAST(requestEvt)->level;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	791a      	ldrb	r2, [r3, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                status_ = Q_TRAN(&Elevator_motion);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <Elevator_closed+0x7c>)
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	2307      	movs	r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]
            break;
 8000f24:	e017      	b.n	8000f56 <Elevator_closed+0x72>
        }
        //${AOs::Elevator::SM::operational::Stationary::closed::OPEN}
        case OPEN_SIG: {
            strcpy(me->doorState, "Openning");
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3340      	adds	r3, #64	@ 0x40
 8000f2a:	490e      	ldr	r1, [pc, #56]	@ (8000f64 <Elevator_closed+0x80>)
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	460b      	mov	r3, r1
 8000f30:	cb03      	ldmia	r3!, {r0, r1}
 8000f32:	6010      	str	r0, [r2, #0]
 8000f34:	6051      	str	r1, [r2, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	7213      	strb	r3, [r2, #8]
            refreshFeed();
 8000f3a:	f000 f89b 	bl	8001074 <refreshFeed>
            status_ = Q_TRAN(&Elevator_Openning);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <Elevator_closed+0x84>)
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	2307      	movs	r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]
            break;
 8000f48:	e005      	b.n	8000f56 <Elevator_closed+0x72>
        }
        default: {
            status_ = Q_SUPER(&Elevator_Stationary);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <Elevator_closed+0x88>)
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
            break;
 8000f54:	bf00      	nop
        }
    }
    return status_;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08009848 	.word	0x08009848
 8000f68:	08000de5 	.word	0x08000de5
 8000f6c:	08000cfd 	.word	0x08000cfd

08000f70 <Elevator_motion>:

//${AOs::Elevator::SM::operational::motion} ..................................
QState Elevator_motion(Elevator * const me, QEvt const * const e) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d01e      	beq.n	8000fc0 <Elevator_motion+0x50>
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	dc48      	bgt.n	8001018 <Elevator_motion+0xa8>
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d002      	beq.n	8000f90 <Elevator_motion+0x20>
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d00e      	beq.n	8000fac <Elevator_motion+0x3c>
 8000f8e:	e043      	b.n	8001018 <Elevator_motion+0xa8>
        //${AOs::Elevator::SM::operational::motion}
        case Q_ENTRY_SIG: {
            greenOn();
 8000f90:	f7ff fbf8 	bl	8000784 <greenOn>
            QTimeEvt_armX(&me->Timer_Evt, TRANSITION_INTERVAL, TRANSITION_INTERVAL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3328      	adds	r3, #40	@ 0x28
 8000f98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f9c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 f803 	bl	8001fac <QTimeEvt_armX>

            status_ = Q_HANDLED();
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	60fb      	str	r3, [r7, #12]
            break;
 8000faa:	e03b      	b.n	8001024 <Elevator_motion+0xb4>
        }
        //${AOs::Elevator::SM::operational::motion}
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->Timer_Evt);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3328      	adds	r3, #40	@ 0x28
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 f84d 	bl	8002050 <QTimeEvt_disarm>
            greenOff();
 8000fb6:	f7ff fbf1 	bl	800079c <greenOff>
            status_ = Q_HANDLED();
 8000fba:	2302      	movs	r3, #2
 8000fbc:	60fb      	str	r3, [r7, #12]
            break;
 8000fbe:	e031      	b.n	8001024 <Elevator_motion+0xb4>
        }
        //${AOs::Elevator::SM::operational::motion::TIMEOUT}
        case TIMEOUT_SIG: {
            (me->current < me->next) ? me->current++ : me->current--;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d208      	bcs.n	8000fe2 <Elevator_motion+0x72>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8000fe0:	e007      	b.n	8000ff2 <Elevator_motion+0x82>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            refreshFeed();
 8000ff2:	f000 f83f 	bl	8001074 <refreshFeed>
            //${AOs::Elevator::SM::operational::motion::TIMEOUT::[me->current==me->next]}
            if (me->current == me->next) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001002:	429a      	cmp	r2, r3
 8001004:	d105      	bne.n	8001012 <Elevator_motion+0xa2>
                //strcpy(me->dir, "STATIC");
                //strcpy(me->doorState, "Openning");
                //refreshFeed();

                status_ = Q_TRAN(&Elevator_closed);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <Elevator_motion+0xc0>)
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	2307      	movs	r3, #7
 800100e:	60fb      	str	r3, [r7, #12]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8001010:	e008      	b.n	8001024 <Elevator_motion+0xb4>
                status_ = Q_UNHANDLED();
 8001012:	2301      	movs	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
            break;
 8001016:	e005      	b.n	8001024 <Elevator_motion+0xb4>
        }
        default: {
            status_ = Q_SUPER(&Elevator_operational);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a06      	ldr	r2, [pc, #24]	@ (8001034 <Elevator_motion+0xc4>)
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
            break;
 8001022:	bf00      	nop
        }
    }
    return status_;
 8001024:	68fb      	ldr	r3, [r7, #12]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08000ee5 	.word	0x08000ee5
 8001034:	08000c41 	.word	0x08000c41

08001038 <Elevator_Ctor>:
//$enddef${AOs::Elevator_inst} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${AOs::Elevator_Ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Elevator_Ctor} ......................................................
void Elevator_Ctor(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
    Elevator * me = &Elevator_inst;
 800103e:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <Elevator_Ctor+0x34>)
 8001040:	607b      	str	r3, [r7, #4]
    QActive_ctor(&me->super, Q_STATE_CAST(&Elevator_initial));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	490a      	ldr	r1, [pc, #40]	@ (8001070 <Elevator_Ctor+0x38>)
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fe98 	bl	8001d7c <QActive_ctor>
    QTimeEvt_ctorX(&me->Timer_Evt, &me->super, TIMEOUT_SIG, 0U);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	2300      	movs	r3, #0
 8001056:	2204      	movs	r2, #4
 8001058:	f000 ff70 	bl	8001f3c <QTimeEvt_ctorX>
    me->current = 1U;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000020c 	.word	0x2000020c
 8001070:	08000c09 	.word	0x08000c09

08001074 <refreshFeed>:

//$define${AOs::Requestor_Ctor}

//$define${AOs::AORequestor}

void refreshFeed(void){
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af02      	add	r7, sp, #8

    char buffer[40];
    snprintf(buffer, sizeof(buffer),
             "\t\r%s %-14d %-15s\n",
             "L",
             Elevator_inst.current,
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <refreshFeed+0x50>)
 800107c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    snprintf(buffer, sizeof(buffer),
 8001080:	461a      	mov	r2, r3
 8001082:	4638      	mov	r0, r7
 8001084:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <refreshFeed+0x54>)
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	9200      	str	r2, [sp, #0]
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <refreshFeed+0x58>)
 800108c:	4a10      	ldr	r2, [pc, #64]	@ (80010d0 <refreshFeed+0x5c>)
 800108e:	2128      	movs	r1, #40	@ 0x28
 8001090:	f007 fe88 	bl	8008da4 <sniprintf>
             Elevator_inst.doorState);


    while (CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer)) != USBD_OK) {
 8001094:	e002      	b.n	800109c <refreshFeed+0x28>
        HAL_Delay(4); // or use busy wait
 8001096:	2004      	movs	r0, #4
 8001098:	f000 f841 	bl	800111e <HAL_Delay>
    while (CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer)) != USBD_OK) {
 800109c:	463b      	mov	r3, r7
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f896 	bl	80001d0 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	463b      	mov	r3, r7
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f007 fa1d 	bl	80084ec <CDC_Transmit_FS>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1ee      	bne.n	8001096 <refreshFeed+0x22>
    }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	@ 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000020c 	.word	0x2000020c
 80010c8:	2000024c 	.word	0x2000024c
 80010cc:	08009854 	.word	0x08009854
 80010d0:	08009858 	.word	0x08009858

080010d4 <main>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_cdc_if.h"
#include "string.h"
//............................................................................
int main() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
     QF_init();       // initialize the framework and the underlying RT kernel
 80010d8:	f001 f8f8 	bl	80022cc <QF_init>
     BSP_init();      // initialize the BSP
 80010dc:	f7ff fbfe 	bl	80008dc <BSP_init>
     BSP_start();     // start the AOs/Threads
 80010e0:	f7ff fd28 	bl	8000b34 <BSP_start>
//         HAL_Delay(4);
//     }
//
//     refreshFeed();

     return QF_run(); // run the QF application
 80010e4:	f001 f90c 	bl	8002300 <QF_run>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}

080010ee <busy_wait_us>:

// int __io_putchar(int ch) {
//     HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
//     return ch;
// }
void busy_wait_us(uint32_t us) {
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
    volatile uint32_t count = (168 * us) / 4;  // adjust per instruction cost
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	22a8      	movs	r2, #168	@ 0xa8
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001102:	e000      	b.n	8001106 <busy_wait_us+0x18>
        __NOP();
 8001104:	bf00      	nop
    while (count--) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	60fa      	str	r2, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f9      	bne.n	8001104 <busy_wait_us+0x16>
    }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <HAL_Delay>:

void busy_wait_ms(uint32_t ms) {
    while (ms--) busy_wait_us(1000);
}

void HAL_Delay(uint32_t Delay){
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
    busy_wait_us(Delay);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffe1 	bl	80010ee <busy_wait_us>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <QHsm_ctor>:

//............................................................................
//! @protected @memberof QHsm
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    // do not call the QAsm_ctor() here
    me->super.vptr      = &vtable;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a06      	ldr	r2, [pc, #24]	@ (800115c <QHsm_ctor+0x28>)
 8001142:	601a      	str	r2, [r3, #0]
    me->super.state.fun = Q_STATE_CAST(&QHsm_top);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <QHsm_ctor+0x2c>)
 8001148:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	609a      	str	r2, [r3, #8]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	080098fc 	.word	0x080098fc
 8001160:	080013bd 	.word	0x080013bd

08001164 <QHsm_init_>:
//! @private @memberof QHsm
void QHsm_init_(
    QAsm * const me,
    void const * const e,
    uint_fast8_t const qsId)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	@ 0x38
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
    }
#else
    Q_UNUSED_PAR(qsId);
#endif // def Q_SPY

    QStateHandler t = me->state.fun;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	633b      	str	r3, [r7, #48]	@ 0x30

    QF_CRIT_ENTRY();
 8001176:	f7ff fa3d 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(200, (me->vptr != (struct QAsmVtable *)0)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <QHsm_init_+0x2e>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <QHsm_init_+0x2e>
 800118a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800118c:	4a2d      	ldr	r2, [pc, #180]	@ (8001244 <QHsm_init_+0xe0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d003      	beq.n	800119a <QHsm_init_+0x36>
 8001192:	21c8      	movs	r1, #200	@ 0xc8
 8001194:	482c      	ldr	r0, [pc, #176]	@ (8001248 <QHsm_init_+0xe4>)
 8001196:	f7ff fced 	bl	8000b74 <Q_onError>
        && (me->temp.fun != Q_STATE_CAST(0))
        && (t == Q_STATE_CAST(&QHsm_top)));
    QF_CRIT_EXIT();
 800119a:	f7ff fa3d 	bl	8000618 <QF_crit_exit_>

    // execute the top-most initial tran.
    QState const r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	4798      	blx	r3
 80011a8:	62f8      	str	r0, [r7, #44]	@ 0x2c

    QF_CRIT_ENTRY();
 80011aa:	f7ff fa23 	bl	80005f4 <QF_crit_entry_>
    // the top-most initial tran. must be taken
    Q_ASSERT_INCRIT(210, r == Q_RET_TRAN);
 80011ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b0:	2b07      	cmp	r3, #7
 80011b2:	d003      	beq.n	80011bc <QHsm_init_+0x58>
 80011b4:	21d2      	movs	r1, #210	@ 0xd2
 80011b6:	4824      	ldr	r0, [pc, #144]	@ (8001248 <QHsm_init_+0xe4>)
 80011b8:	f7ff fcdc 	bl	8000b74 <Q_onError>
    QF_CRIT_EXIT();
 80011bc:	f7ff fa2c 	bl	8000618 <QF_crit_exit_>

    QS_TRAN_SEG_(QS_QEP_STATE_INIT, t, me->temp.fun);

    // drill down into the state hierarchy with initial transitions...
    QStateHandler path[QHSM_MAX_NEST_DEPTH_]; // tran. entry path array
    path[0] = me->temp.fun;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	617b      	str	r3, [r7, #20]
    (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4920      	ldr	r1, [pc, #128]	@ (800124c <QHsm_init_+0xe8>)
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	4798      	blx	r3

    int_fast8_t ip = 1; // tran. entry path index (also the loop bound)
 80011d0:	2301      	movs	r3, #1
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; (me->temp.fun != t) && (ip < QHSM_MAX_NEST_DEPTH_); ++ip) {
 80011d4:	e00f      	b.n	80011f6 <QHsm_init_+0x92>
        path[ip] = me->temp.fun;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	3338      	adds	r3, #56	@ 0x38
 80011e0:	443b      	add	r3, r7
 80011e2:	f843 2c24 	str.w	r2, [r3, #-36]
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	4918      	ldr	r1, [pc, #96]	@ (800124c <QHsm_init_+0xe8>)
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	4798      	blx	r3
    for (; (me->temp.fun != t) && (ip < QHSM_MAX_NEST_DEPTH_); ++ip) {
 80011f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011f2:	3301      	adds	r3, #1
 80011f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d002      	beq.n	8001206 <QHsm_init_+0xa2>
 8001200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001202:	2b05      	cmp	r3, #5
 8001204:	dde7      	ble.n	80011d6 <QHsm_init_+0x72>
    }
    QF_CRIT_ENTRY();
 8001206:	f7ff f9f5 	bl	80005f4 <QF_crit_entry_>
    // must NOT be too many state nesting levels or "malformed" HSM
    Q_ASSERT_INCRIT(220, ip <= QHSM_MAX_NEST_DEPTH_);
 800120a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800120c:	2b06      	cmp	r3, #6
 800120e:	dd03      	ble.n	8001218 <QHsm_init_+0xb4>
 8001210:	21dc      	movs	r1, #220	@ 0xdc
 8001212:	480d      	ldr	r0, [pc, #52]	@ (8001248 <QHsm_init_+0xe4>)
 8001214:	f7ff fcae 	bl	8000b74 <Q_onError>
    QF_CRIT_EXIT();
 8001218:	f7ff f9fe 	bl	8000618 <QF_crit_exit_>

    me->temp.fun = path[0];
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	609a      	str	r2, [r3, #8]
    QHsm_enter_target_(me, &path[0], ip - 1, qsId);
 8001222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	f107 0114 	add.w	r1, r7, #20
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f000 f9c3 	bl	80015b8 <QHsm_enter_target_>
    t = path[0];
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30

    QS_TOP_INIT_(QS_QEP_INIT_TRAN, t);

    me->state.fun = t; // change the current active state
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800123a:	605a      	str	r2, [r3, #4]
#ifdef Q_UNSAFE
    Q_UNUSED_PAR(r);
#endif
}
 800123c:	bf00      	nop
 800123e:	3738      	adds	r7, #56	@ 0x38
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	080013bd 	.word	0x080013bd
 8001248:	080098e4 	.word	0x080098e4
 800124c:	080098ec 	.word	0x080098ec

08001250 <QHsm_dispatch_>:
//! @private @memberof QHsm
void QHsm_dispatch_(
    QAsm * const me,
    QEvt const * const e,
    uint_fast8_t const qsId)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	@ 0x38
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    QStateHandler s = me->state.fun;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	637b      	str	r3, [r7, #52]	@ 0x34
    QStateHandler t = s;
 8001262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001264:	633b      	str	r3, [r7, #48]	@ 0x30
    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 8001266:	f7ff f9c5 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300,
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <QHsm_dispatch_+0x26>
 8001270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001272:	2b00      	cmp	r3, #0
 8001274:	d104      	bne.n	8001280 <QHsm_dispatch_+0x30>
 8001276:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800127a:	483a      	ldr	r0, [pc, #232]	@ (8001364 <QHsm_dispatch_+0x114>)
 800127c:	f7ff fc7a 	bl	8000b74 <Q_onError>
        (e != (QEvt *)0)
        && (s != Q_STATE_CAST(0)));
    QF_CRIT_EXIT();
 8001280:	f7ff f9ca 	bl	8000618 <QF_crit_exit_>

    QS_TRAN0_(QS_QEP_DISPATCH, s);

    QState r = Q_RET_SUPER;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // process the event hierarchically...
    me->temp.fun = s;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800128c:	609a      	str	r2, [r3, #8]
    int_fast8_t ip = QHSM_MAX_NEST_DEPTH_;
 800128e:	2306      	movs	r3, #6
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
    // NOTE: ip is the fixed loop upper bound
    for (; ip > 0; --ip) {
 8001292:	e015      	b.n	80012c0 <QHsm_dispatch_+0x70>
        s = me->temp.fun;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	637b      	str	r3, [r7, #52]	@ 0x34
        r = (*s)(me, e); // invoke state handler s
 800129a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	4798      	blx	r3
 80012a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if (r == Q_RET_UNHANDLED) { // unhandled due to a guard?
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d104      	bne.n	80012b4 <QHsm_dispatch_+0x64>
            QS_TRAN_ACT_(QS_QEP_UNHANDLED, s);
            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG); // superstate of s
 80012aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ac:	492e      	ldr	r1, [pc, #184]	@ (8001368 <QHsm_dispatch_+0x118>)
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	4798      	blx	r3
 80012b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        }
        if (r != Q_RET_SUPER) { // event NOT "bubbled up"
 80012b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <QHsm_dispatch_+0x78>
    for (; ip > 0; --ip) {
 80012ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012bc:	3b01      	subs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	dce6      	bgt.n	8001294 <QHsm_dispatch_+0x44>
 80012c6:	e000      	b.n	80012ca <QHsm_dispatch_+0x7a>
            break;
 80012c8:	bf00      	nop
        }
    }
    QF_CRIT_ENTRY();
 80012ca:	f7ff f993 	bl	80005f4 <QF_crit_entry_>
    Q_ASSERT_INCRIT(310, ip > 0);
 80012ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dc04      	bgt.n	80012de <QHsm_dispatch_+0x8e>
 80012d4:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80012d8:	4822      	ldr	r0, [pc, #136]	@ (8001364 <QHsm_dispatch_+0x114>)
 80012da:	f7ff fc4b 	bl	8000b74 <Q_onError>
    QF_CRIT_EXIT();
 80012de:	f7ff f99b 	bl	8000618 <QF_crit_exit_>

    if (r >= Q_RET_TRAN) { // tran. (regular or history) taken?
 80012e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e4:	2b06      	cmp	r3, #6
 80012e6:	d936      	bls.n	8001356 <QHsm_dispatch_+0x106>
            QS_TRAN_SEG_(QS_QEP_TRAN_HIST, s, me->temp.fun);
        }
#endif // Q_SPY

        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        path[0] = me->temp.fun; // tran. target
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	613b      	str	r3, [r7, #16]
        path[1] = t; // current state
 80012ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012f0:	617b      	str	r3, [r7, #20]
        path[2] = s; // tran. source
 80012f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f4:	61bb      	str	r3, [r7, #24]

        // exit current state to tran. source s...
        while (t != s) {
 80012f6:	e00d      	b.n	8001314 <QHsm_dispatch_+0xc4>
            // exit from t
            if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 80012f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012fa:	491c      	ldr	r1, [pc, #112]	@ (800136c <QHsm_dispatch_+0x11c>)
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	4798      	blx	r3
 8001300:	4603      	mov	r3, r0
 8001302:	2b02      	cmp	r3, #2
 8001304:	d103      	bne.n	800130e <QHsm_dispatch_+0xbe>
                QS_STATE_ACT_(QS_QEP_STATE_EXIT, t);
                // find superstate of t
                (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8001306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001308:	4917      	ldr	r1, [pc, #92]	@ (8001368 <QHsm_dispatch_+0x118>)
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	4798      	blx	r3
            }
            t = me->temp.fun;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	633b      	str	r3, [r7, #48]	@ 0x30
        while (t != s) {
 8001314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001318:	429a      	cmp	r2, r3
 800131a:	d1ed      	bne.n	80012f8 <QHsm_dispatch_+0xa8>
        }

        // take the tran...
        ip = QHsm_tran_simple_(me, &path[0], qsId);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4619      	mov	r1, r3
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 f855 	bl	80013d4 <QHsm_tran_simple_>
 800132a:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (ip < -1) { // not a simple tran.?
 800132c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001332:	da07      	bge.n	8001344 <QHsm_dispatch_+0xf4>
            ip = QHsm_tran_complex_(me, &path[0], qsId);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4619      	mov	r1, r3
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f000 f89f 	bl	8001480 <QHsm_tran_complex_>
 8001342:	62b8      	str	r0, [r7, #40]	@ 0x28
        }

        QHsm_enter_target_(me, &path[0], ip, qsId);
 8001344:	f107 0110 	add.w	r1, r7, #16
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f933 	bl	80015b8 <QHsm_enter_target_>
        t = path[0];
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	633b      	str	r3, [r7, #48]	@ 0x30
    else {
        QS_TRAN0_(QS_QEP_IGNORED, me->state.fun);
    }
#endif // Q_SPY

    me->state.fun = t; // change the current active state
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800135a:	605a      	str	r2, [r3, #4]
}
 800135c:	bf00      	nop
 800135e:	3738      	adds	r7, #56	@ 0x38
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	080098e4 	.word	0x080098e4
 8001368:	080098ec 	.word	0x080098ec
 800136c:	080098f4 	.word	0x080098f4

08001370 <QHsm_isIn_>:
//............................................................................
//! @private @memberof QHsm
bool QHsm_isIn_(
    QAsm * const me,
    QStateHandler const state)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
    bool inState = false; // assume that this HSM is not in 'state'
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]

    // scan the state hierarchy bottom-up
    QStateHandler s = me->state.fun;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	613b      	str	r3, [r7, #16]
    QState r = Q_RET_SUPER;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
    while (r != Q_RET_IGNORED) {
 8001388:	e00e      	b.n	80013a8 <QHsm_isIn_+0x38>
        if (s == state) { // do the states match?
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d102      	bne.n	8001398 <QHsm_isIn_+0x28>
            inState = true;  // 'true' means that match found
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
            break; // break out of the for-loop
 8001396:	e00a      	b.n	80013ae <QHsm_isIn_+0x3e>
        }
        r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4907      	ldr	r1, [pc, #28]	@ (80013b8 <QHsm_isIn_+0x48>)
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	4798      	blx	r3
 80013a0:	60f8      	str	r0, [r7, #12]
        s = me->temp.fun;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	613b      	str	r3, [r7, #16]
    while (r != Q_RET_IGNORED) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d1ed      	bne.n	800138a <QHsm_isIn_+0x1a>
    }
    return inState; // return the status
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	080098ec 	.word	0x080098ec

080013bc <QHsm_top>:

//............................................................................
//! @protected @memberof QHsm
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; // the top state ignores all events
 80013c6:	2303      	movs	r3, #3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <QHsm_tran_simple_>:
//! @private @memberof QHsm
static int_fast8_t QHsm_tran_simple_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    QStateHandler t = path[0];
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61bb      	str	r3, [r7, #24]
    QStateHandler const s = path[2];
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	617b      	str	r3, [r7, #20]
    int_fast8_t ip = 0; // tran. entry path index
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    QS_CRIT_STAT

    // (a) check source==target (tran. to self)...
    if (s == t) {
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d106      	bne.n	8001406 <QHsm_tran_simple_+0x32>
        // exit source s
        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	491f      	ldr	r1, [pc, #124]	@ (8001478 <QHsm_tran_simple_+0xa4>)
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	4798      	blx	r3
            QS_STATE_ACT_(QS_QEP_STATE_EXIT, s);
        }
        ip = 0; // enter the target
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	e032      	b.n	800146c <QHsm_tran_simple_+0x98>
    }
    else {
        // find superstate of target
        (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	491c      	ldr	r1, [pc, #112]	@ (800147c <QHsm_tran_simple_+0xa8>)
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	4798      	blx	r3

        t = me->temp.fun;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]

        // (b) check source==target->super...
        if (s == t) {
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	429a      	cmp	r2, r3
 800141a:	d102      	bne.n	8001422 <QHsm_tran_simple_+0x4e>
            ip = 0; // enter the target
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	e024      	b.n	800146c <QHsm_tran_simple_+0x98>
        }
        else {
            // find superstate of src
            (void)QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4915      	ldr	r1, [pc, #84]	@ (800147c <QHsm_tran_simple_+0xa8>)
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	4798      	blx	r3

            // (c) check source->super==target->super...
            if (me->temp.fun == t) {
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	429a      	cmp	r2, r3
 8001432:	d106      	bne.n	8001442 <QHsm_tran_simple_+0x6e>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	4910      	ldr	r1, [pc, #64]	@ (8001478 <QHsm_tran_simple_+0xa4>)
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	4798      	blx	r3
                    QS_STATE_ACT_(QS_QEP_STATE_EXIT, s);
                }
                ip = 0; // enter the target
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	e014      	b.n	800146c <QHsm_tran_simple_+0x98>
            }
            // (d) check source->super==target...
            else if (me->temp.fun == path[0]) {
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d107      	bne.n	800145e <QHsm_tran_simple_+0x8a>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	4909      	ldr	r1, [pc, #36]	@ (8001478 <QHsm_tran_simple_+0xa4>)
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	4798      	blx	r3
                    QS_STATE_ACT_(QS_QEP_STATE_EXIT, s);
                }
                ip = -1; // do not enter the target
 8001456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	e006      	b.n	800146c <QHsm_tran_simple_+0x98>
            }
            else {
                path[1] = t; // save the superstate of target
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3304      	adds	r3, #4
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	601a      	str	r2, [r3, #0]
                ip = -2; // cause execution of complex tran.
 8001466:	f06f 0301 	mvn.w	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
            }
        }
    }
    return ip;
 800146c:	69fb      	ldr	r3, [r7, #28]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	080098f4 	.word	0x080098f4
 800147c:	080098ec 	.word	0x080098ec

08001480 <QHsm_tran_complex_>:
//! @private @memberof QHsm
static int_fast8_t QHsm_tran_complex_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qsId);
#endif

    // (e) check rest of source==target->super->super..
    // and store the entry path along the way
    int_fast8_t iq = 0; // indicate that LCA was found
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
    int_fast8_t ip = 1; // enter target and its superstate
 8001490:	2301      	movs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2]; // source state
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	617b      	str	r3, [r7, #20]
    QStateHandler t = me->temp.fun;  // source->super
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61fb      	str	r3, [r7, #28]
    QF_CRIT_STAT

    // find target->super->super...
    // note: ip is the fixed upper loop bound
    QState r = QHSM_RESERVED_EVT_(path[1], Q_EMPTY_SIG);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3304      	adds	r3, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4941      	ldr	r1, [pc, #260]	@ (80015ac <QHsm_tran_complex_+0x12c>)
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	4798      	blx	r3
 80014ac:	61b8      	str	r0, [r7, #24]
    while ((r == Q_RET_SUPER) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 80014ae:	e01a      	b.n	80014e6 <QHsm_tran_complex_+0x66>
        ++ip;
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	3301      	adds	r3, #1
 80014b4:	623b      	str	r3, [r7, #32]
        path[ip] = me->temp.fun; // store the entry path
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	4413      	add	r3, r2
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	6892      	ldr	r2, [r2, #8]
 80014c2:	601a      	str	r2, [r3, #0]
        if (me->temp.fun == s) { // is it the source?
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d105      	bne.n	80014da <QHsm_tran_complex_+0x5a>
            iq = 1; // indicate that the LCA found
 80014ce:	2301      	movs	r3, #1
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
            --ip;   // do not enter the source
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	623b      	str	r3, [r7, #32]
            break;  // terminate the loop
 80014d8:	e00b      	b.n	80014f2 <QHsm_tran_complex_+0x72>
        }
        r = QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4933      	ldr	r1, [pc, #204]	@ (80015ac <QHsm_tran_complex_+0x12c>)
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	4798      	blx	r3
 80014e4:	61b8      	str	r0, [r7, #24]
    while ((r == Q_RET_SUPER) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <QHsm_tran_complex_+0x72>
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	ddde      	ble.n	80014b0 <QHsm_tran_complex_+0x30>
    }
    QF_CRIT_ENTRY();
 80014f2:	f7ff f87f 	bl	80005f4 <QF_crit_entry_>
    Q_INVARIANT_INCRIT(711, ip < (QHSM_MAX_NEST_DEPTH_ - 1));
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	dd04      	ble.n	8001506 <QHsm_tran_complex_+0x86>
 80014fc:	f240 21c7 	movw	r1, #711	@ 0x2c7
 8001500:	482b      	ldr	r0, [pc, #172]	@ (80015b0 <QHsm_tran_complex_+0x130>)
 8001502:	f7ff fb37 	bl	8000b74 <Q_onError>
    QF_CRIT_EXIT();
 8001506:	f7ff f887 	bl	8000618 <QF_crit_exit_>

    // the LCA not found yet?
    if (iq == 0) {
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	2b00      	cmp	r3, #0
 800150e:	d148      	bne.n	80015a2 <QHsm_tran_complex_+0x122>

        // exit source s
#ifndef Q_SPY
        (void)QHSM_RESERVED_EVT_(s, Q_EXIT_SIG);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	4928      	ldr	r1, [pc, #160]	@ (80015b4 <QHsm_tran_complex_+0x134>)
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	4798      	blx	r3
        }
#endif // def Q_SPY

        // (f) check the rest of
        // source->super == target->super->super...
        iq = ip;
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
        r = Q_RET_IGNORED; // indicate that the LCA NOT found
 800151c:	2303      	movs	r3, #3
 800151e:	61bb      	str	r3, [r7, #24]
        // note: iq is the fixed upper loop bound
        do {
            if (t == path[iq]) { // is this the LCA?
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	4413      	add	r3, r2
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	429a      	cmp	r2, r3
 800152e:	d105      	bne.n	800153c <QHsm_tran_complex_+0xbc>
                r = Q_RET_HANDLED; // indicate the LCA found
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
                ip = iq - 1; // do not enter the LCA
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	3b01      	subs	r3, #1
 8001538:	623b      	str	r3, [r7, #32]
                break; // terminate the loop
 800153a:	e005      	b.n	8001548 <QHsm_tran_complex_+0xc8>
            }
            --iq; // try lower superstate of target
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	3b01      	subs	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
        } while (iq >= 0);
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	2b00      	cmp	r3, #0
 8001546:	daeb      	bge.n	8001520 <QHsm_tran_complex_+0xa0>

        if (r != Q_RET_HANDLED) { // the LCA still not found?
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d029      	beq.n	80015a2 <QHsm_tran_complex_+0x122>
            // (g) check each source->super->...
            // for each target->super...
            r = Q_RET_SUPER; // keep looping
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
            while (r != Q_RET_HANDLED) {
 8001552:	e023      	b.n	800159c <QHsm_tran_complex_+0x11c>
                // exit from t
                if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4917      	ldr	r1, [pc, #92]	@ (80015b4 <QHsm_tran_complex_+0x134>)
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	4798      	blx	r3
 800155c:	4603      	mov	r3, r0
 800155e:	2b02      	cmp	r3, #2
 8001560:	d103      	bne.n	800156a <QHsm_tran_complex_+0xea>
                    QS_STATE_ACT_(QS_QEP_STATE_EXIT, t);
                    // find superstate of t
                    (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	4911      	ldr	r1, [pc, #68]	@ (80015ac <QHsm_tran_complex_+0x12c>)
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	4798      	blx	r3
                }
                t = me->temp.fun; // set to super of t
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61fb      	str	r3, [r7, #28]
                iq = ip;
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
                do {
                    if (t == path[iq]) { // is this the LCA?
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	4413      	add	r3, r2
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	429a      	cmp	r2, r3
 8001582:	d105      	bne.n	8001590 <QHsm_tran_complex_+0x110>
                        ip = iq - 1; // do not enter the LCA
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	3b01      	subs	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
                        r = Q_RET_HANDLED; // break outer loop
 800158a:	2302      	movs	r3, #2
 800158c:	61bb      	str	r3, [r7, #24]
                        break;  // terminate the inner loop
 800158e:	e005      	b.n	800159c <QHsm_tran_complex_+0x11c>
                    }
                    --iq; // try lower superstate of target
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	3b01      	subs	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
                } while (iq >= 0);
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	2b00      	cmp	r3, #0
 800159a:	daeb      	bge.n	8001574 <QHsm_tran_complex_+0xf4>
            while (r != Q_RET_HANDLED) {
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d1d8      	bne.n	8001554 <QHsm_tran_complex_+0xd4>
            }
        }
    }
    return ip;
 80015a2:	6a3b      	ldr	r3, [r7, #32]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3728      	adds	r7, #40	@ 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	080098ec 	.word	0x080098ec
 80015b0:	080098e4 	.word	0x080098e4
 80015b4:	080098f4 	.word	0x080098f4

080015b8 <QHsm_enter_target_>:
static void QHsm_enter_target_(
    QAsm * const me,
    QStateHandler * const path,
    int_fast8_t const depth,
    uint_fast8_t const qsId)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
    Q_UNUSED_PAR(qsId);
#endif

    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 80015c6:	f7ff f815 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(800, depth < QHSM_MAX_NEST_DEPTH_);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	dd04      	ble.n	80015da <QHsm_enter_target_+0x22>
 80015d0:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80015d4:	4836      	ldr	r0, [pc, #216]	@ (80016b0 <QHsm_enter_target_+0xf8>)
 80015d6:	f7ff facd 	bl	8000b74 <Q_onError>
    QF_CRIT_EXIT();
 80015da:	f7ff f81d 	bl	8000618 <QF_crit_exit_>

    int_fast8_t ip = depth;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	617b      	str	r3, [r7, #20]
    // execute state entry actions in the desired order...
    // NOTE: ip is the fixed upper loop bound
    for (; ip >= 0; --ip) {
 80015e2:	e00a      	b.n	80015fa <QHsm_enter_target_+0x42>
        // enter path[ip]
        if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	4413      	add	r3, r2
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4931      	ldr	r1, [pc, #196]	@ (80016b4 <QHsm_enter_target_+0xfc>)
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	4798      	blx	r3
    for (; ip >= 0; --ip) {
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	daf1      	bge.n	80015e4 <QHsm_enter_target_+0x2c>
            == Q_RET_HANDLED)
        {
            QS_STATE_ACT_(QS_QEP_STATE_ENTRY, path[ip]);
        }
    }
    QStateHandler t = path[0];
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	613b      	str	r3, [r7, #16]
    me->temp.fun = t; // update the next state
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]

    // drill into the target hierarchy...
    while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 800160c:	e043      	b.n	8001696 <QHsm_enter_target_+0xde>

        QS_TRAN_SEG_(QS_QEP_STATE_INIT, t, me->temp.fun);

        ip = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
        path[0] = me->temp.fun;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	601a      	str	r2, [r3, #0]

        // find superstate
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	4926      	ldr	r1, [pc, #152]	@ (80016b8 <QHsm_enter_target_+0x100>)
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	4798      	blx	r3

        // note: ip is the fixed upper loop bound
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8001624:	e00e      	b.n	8001644 <QHsm_enter_target_+0x8c>
            ++ip;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
            path[ip] = me->temp.fun;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	4413      	add	r3, r2
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	6892      	ldr	r2, [r2, #8]
 8001638:	601a      	str	r2, [r3, #0]
            // find superstate
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	491e      	ldr	r1, [pc, #120]	@ (80016b8 <QHsm_enter_target_+0x100>)
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	429a      	cmp	r2, r3
 800164c:	d002      	beq.n	8001654 <QHsm_enter_target_+0x9c>
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b04      	cmp	r3, #4
 8001652:	dde8      	ble.n	8001626 <QHsm_enter_target_+0x6e>
        }
        QF_CRIT_ENTRY();
 8001654:	f7fe ffce 	bl	80005f4 <QF_crit_entry_>
        // too many state nesting levels or "malformed" HSM
        Q_INVARIANT_INCRIT(891, ip < QHSM_MAX_NEST_DEPTH_);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b05      	cmp	r3, #5
 800165c:	dd04      	ble.n	8001668 <QHsm_enter_target_+0xb0>
 800165e:	f240 317b 	movw	r1, #891	@ 0x37b
 8001662:	4813      	ldr	r0, [pc, #76]	@ (80016b0 <QHsm_enter_target_+0xf8>)
 8001664:	f7ff fa86 	bl	8000b74 <Q_onError>
        QF_CRIT_EXIT();
 8001668:	f7fe ffd6 	bl	8000618 <QF_crit_exit_>

        me->temp.fun = path[0];
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	609a      	str	r2, [r3, #8]

        // retrace the entry path in reverse (correct) order...
        // note: ip is the fixed upper loop bound
        do {
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG) == Q_RET_HANDLED) {
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	4413      	add	r3, r2
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	490d      	ldr	r1, [pc, #52]	@ (80016b4 <QHsm_enter_target_+0xfc>)
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	4798      	blx	r3
                QS_STATE_ACT_(QS_QEP_STATE_ENTRY, path[ip]);
            }
            --ip;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3b01      	subs	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
        } while (ip >= 0);
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b00      	cmp	r3, #0
 800168e:	daf1      	bge.n	8001674 <QHsm_enter_target_+0xbc>

        t = path[0]; // current state becomes the new source
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	613b      	str	r3, [r7, #16]
    while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4908      	ldr	r1, [pc, #32]	@ (80016bc <QHsm_enter_target_+0x104>)
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	4798      	blx	r3
 800169e:	4603      	mov	r3, r0
 80016a0:	2b07      	cmp	r3, #7
 80016a2:	d0b4      	beq.n	800160e <QHsm_enter_target_+0x56>
    }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	080098e4 	.word	0x080098e4
 80016b4:	080098f0 	.word	0x080098f0
 80016b8:	080098ec 	.word	0x080098ec
 80016bc:	080098f8 	.word	0x080098f8

080016c0 <QF_bzero_>:
//............................................................................
//! @static @private @memberof QF
void QF_bzero_(
    void * const start,
    uint_fast16_t const len)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	e008      	b.n	80016e6 <QF_bzero_+0x26>
        *ptr = 0U;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
        ++ptr;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3301      	adds	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f3      	bne.n	80016d4 <QF_bzero_+0x14>
    }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <QPSet_insert>:
}

//! @public @memberof QPSet
static inline void QPSet_insert(QPSet * const me,
    uint_fast8_t const n)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
#if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	3b01      	subs	r3, #1
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	601a      	str	r2, [r3, #0]
    }
    else {
        me->bits[1] = (me->bits[1] | ((QPSetBits)1U << (n - 33U)));
    }
#endif
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <QEvt_refCtr_inc_>:
#define QTE_FLAG_IS_LINKED      (1U << 7U)
#define QTE_FLAG_WAS_DISARMED   (1U << 6U)

//============================================================================
//! @private @memberof QEvt
static inline void QEvt_refCtr_inc_(QEvt const * const me) {
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    // NOTE: this function must be called inside a critical section
    uint8_t const rc = me->refCtr_ + 1U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	78db      	ldrb	r3, [r3, #3]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3301      	adds	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	70da      	strb	r2, [r3, #3]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <QActive_post_>:
//! @private @memberof QActive
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
    }
#endif // (Q_UTEST != 0)
#endif // def Q_UTEST

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001756:	f7fe ff4d 	bl	80005f4 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(200, e != (QEvt *)0);
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d103      	bne.n	8001768 <QActive_post_+0x20>
 8001760:	21c8      	movs	r1, #200	@ 0xc8
 8001762:	4821      	ldr	r0, [pc, #132]	@ (80017e8 <QActive_post_+0xa0>)
 8001764:	f7ff fa06 	bl	8000b74 <Q_onError>

    QEQueueCtr const nFree = me->eQueue.nFree; // get volatile into temporary
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	7fdb      	ldrb	r3, [r3, #31]
 800176c:	75bb      	strb	r3, [r7, #22]

    // required margin available?
    bool status = false; // assume that event cannot be posted
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
    if (margin == QF_NO_MARGIN) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001778:	4293      	cmp	r3, r2
 800177a:	d109      	bne.n	8001790 <QActive_post_+0x48>
        if (nFree > 0U) { // free entries available in the queue?
 800177c:	7dbb      	ldrb	r3, [r7, #22]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <QActive_post_+0x40>
            status = true; // can post
 8001782:	2301      	movs	r3, #1
 8001784:	75fb      	strb	r3, [r7, #23]
 8001786:	e00a      	b.n	800179e <QActive_post_+0x56>
        }
        else { // no free entries available
            // The queue overflows, but QF_NO_MARGIN indicates that
            // the "event delivery guarantee" is required.
            Q_ERROR_INCRIT(210); // must be able to post the event
 8001788:	21d2      	movs	r1, #210	@ 0xd2
 800178a:	4817      	ldr	r0, [pc, #92]	@ (80017e8 <QActive_post_+0xa0>)
 800178c:	f7ff f9f2 	bl	8000b74 <Q_onError>
        }
    }
    else if (nFree > (QEQueueCtr)margin) { // enough free entries?
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	7dba      	ldrb	r2, [r7, #22]
 8001796:	429a      	cmp	r2, r3
 8001798:	d901      	bls.n	800179e <QActive_post_+0x56>
        status = true; // can post
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
    else {
        // empty
    }

#if (QF_MAX_EPOOL > 0U)
    if (e->poolNum_ != 0U) { // is it a mutable event?
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	789b      	ldrb	r3, [r3, #2]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <QActive_post_+0x76>
        Q_ASSERT_INCRIT(205, e->refCtr_ < (2U * QF_MAX_ACTIVE));
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	78db      	ldrb	r3, [r3, #3]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80017ae:	d903      	bls.n	80017b8 <QActive_post_+0x70>
 80017b0:	21cd      	movs	r1, #205	@ 0xcd
 80017b2:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <QActive_post_+0xa0>)
 80017b4:	f7ff f9de 	bl	8000b74 <Q_onError>
        QEvt_refCtr_inc_(e); // increment the reference counter
 80017b8:	68b8      	ldr	r0, [r7, #8]
 80017ba:	f7ff ffb3 	bl	8001724 <QEvt_refCtr_inc_>
    }
#endif // (QF_MAX_EPOOL > 0U)

    if (status) { // can post the event?
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <QActive_post_+0x8c>
        QActive_postFIFO_(me, e, sender);
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f867 	bl	800189c <QActive_postFIFO_>
        QF_CRIT_EXIT();
 80017ce:	f7fe ff23 	bl	8000618 <QF_crit_exit_>
 80017d2:	e004      	b.n	80017de <QActive_post_+0x96>
            QS_onTestPost(sender, me, e, status); // QUTEst callback
            QF_CRIT_ENTRY();
        }
#endif // def Q_USTEST

        QF_CRIT_EXIT();
 80017d4:	f7fe ff20 	bl	8000618 <QF_crit_exit_>

#if (QF_MAX_EPOOL > 0U)
        QF_gc(e); // recycle the event to avoid a leak
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f000 f963 	bl	8001aa4 <QF_gc>
#endif // (QF_MAX_EPOOL > 0U)
    }

    return status;
 80017de:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	08009908 	.word	0x08009908

080017ec <QActive_get_>:
    QF_CRIT_EXIT();
}

//............................................................................
//! @private @memberof QActive
QEvt const * QActive_get_(QActive * const me) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80017f4:	f7fe fefe 	bl	80005f4 <QF_crit_entry_>
    // wait for event to arrive directly (depends on QP port)
    // NOTE: might use assertion-IDs 400-409
    QACTIVE_EQUEUE_WAIT_(me);

    // always remove event from the front
    QEvt const * const e = me->eQueue.frontEvt;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	613b      	str	r3, [r7, #16]
    QEQueueCtr tmp = me->eQueue.nFree; // get volatile into temporary
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7fdb      	ldrb	r3, [r3, #31]
 8001802:	75fb      	strb	r3, [r7, #23]

    Q_REQUIRE_INCRIT(410, e != (QEvt *)0); // queue must NOT be empty
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d104      	bne.n	8001814 <QActive_get_+0x28>
 800180a:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800180e:	4822      	ldr	r0, [pc, #136]	@ (8001898 <QActive_get_+0xac>)
 8001810:	f7ff f9b0 	bl	8000b74 <Q_onError>

    ++tmp; // one more free event in the queue
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	3301      	adds	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]

    me->eQueue.nFree = tmp; // update the # free
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7dfa      	ldrb	r2, [r7, #23]
 800181e:	77da      	strb	r2, [r3, #31]

    if (tmp <= me->eQueue.end) { // any events in the ring buffer?
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7f1b      	ldrb	r3, [r3, #28]
 8001824:	7dfa      	ldrb	r2, [r7, #23]
 8001826:	429a      	cmp	r2, r3
 8001828:	d821      	bhi.n	800186e <QActive_get_+0x82>
            QS_2U8_PRE(e->poolNum_, e->refCtr_);
            QS_EQC_PRE(tmp);     // # free entries
        QS_END_PRE()

        // remove event from the tail
        tmp = me->eQueue.tail; // get volatile into temporary
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7f9b      	ldrb	r3, [r3, #30]
 800182e:	75fb      	strb	r3, [r7, #23]
        QEvt const * const frontEvt = me->eQueue.ring[tmp];
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699a      	ldr	r2, [r3, #24]
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]

        Q_ASSERT_INCRIT(430, frontEvt != (QEvt *)0);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d104      	bne.n	800184e <QActive_get_+0x62>
 8001844:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8001848:	4813      	ldr	r0, [pc, #76]	@ (8001898 <QActive_get_+0xac>)
 800184a:	f7ff f993 	bl	8000b74 <Q_onError>
        me->eQueue.frontEvt = frontEvt; // update the original
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	615a      	str	r2, [r3, #20]

        if (tmp == 0U) { // need to wrap the tail?
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <QActive_get_+0x74>
            tmp = me->eQueue.end;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7f1b      	ldrb	r3, [r3, #28]
 800185e:	75fb      	strb	r3, [r7, #23]
        }
        --tmp; // advance the tail (counter-clockwise)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	3b01      	subs	r3, #1
 8001864:	75fb      	strb	r3, [r7, #23]

        me->eQueue.tail = tmp; // update the original
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7dfa      	ldrb	r2, [r7, #23]
 800186a:	779a      	strb	r2, [r3, #30]
 800186c:	e00d      	b.n	800188a <QActive_get_+0x9e>
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; // queue becomes empty
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]

        // all entries in the queue must be free (+1 for fronEvt)
        Q_ASSERT_INCRIT(440, tmp == (me->eQueue.end + 1U));
 8001874:	7dfa      	ldrb	r2, [r7, #23]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7f1b      	ldrb	r3, [r3, #28]
 800187a:	3301      	adds	r3, #1
 800187c:	429a      	cmp	r2, r3
 800187e:	d004      	beq.n	800188a <QActive_get_+0x9e>
 8001880:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <QActive_get_+0xac>)
 8001886:	f7ff f975 	bl	8000b74 <Q_onError>
            QS_OBJ_PRE(me);      // this active object
            QS_2U8_PRE(e->poolNum_, e->refCtr_);
        QS_END_PRE()
    }

    QF_CRIT_EXIT();
 800188a:	f7fe fec5 	bl	8000618 <QF_crit_exit_>

    return e;
 800188e:	693b      	ldr	r3, [r7, #16]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	08009908 	.word	0x08009908

0800189c <QActive_postFIFO_>:
//............................................................................
//! @private @memberof QActive
static void QActive_postFIFO_(QActive * const me,
    QEvt const * const e,
    void const * const sender)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
    // NOTE: this helper function is called *inside* critical section
#ifndef Q_SPY
    Q_UNUSED_PAR(sender);
#endif

    QEQueueCtr tmp = me->eQueue.nFree; // get volatile into temporary
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	7fdb      	ldrb	r3, [r3, #31]
 80018ac:	75fb      	strb	r3, [r7, #23]
    --tmp; // one free entry just used up
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	75fb      	strb	r3, [r7, #23]

    me->eQueue.nFree = tmp; // update the original
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	7dfa      	ldrb	r2, [r7, #23]
 80018b8:	77da      	strb	r2, [r3, #31]
    if (me->eQueue.nMin > tmp) {
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c0:	7dfa      	ldrb	r2, [r7, #23]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d203      	bcs.n	80018ce <QActive_postFIFO_+0x32>
        me->eQueue.nMin = tmp; // update minimum so far
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	7dfa      	ldrb	r2, [r7, #23]
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]
        QS_onTestPost(sender, me, e, true); // QUTEst callback
        QF_CRIT_ENTRY();
    }
#endif // def Q_UTEST

    if (me->eQueue.frontEvt == (QEvt *)0) { // is the queue empty?
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <QActive_postFIFO_+0x4e>
        me->eQueue.frontEvt = e; // deliver event directly
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	615a      	str	r2, [r3, #20]
        }
        else {
            QACTIVE_EQUEUE_SIGNAL_(me); // signal the Active Object
        }
#else
        QACTIVE_EQUEUE_SIGNAL_(me); // signal the Active Object
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	7b1b      	ldrb	r3, [r3, #12]
 80018e0:	4619      	mov	r1, r3
 80018e2:	480f      	ldr	r0, [pc, #60]	@ (8001920 <QActive_postFIFO_+0x84>)
 80018e4:	f7ff ff09 	bl	80016fa <QPSet_insert>
        }
        --tmp; // advance the head (counter-clockwise)

        me->eQueue.head = tmp; // update the original
    }
}
 80018e8:	e015      	b.n	8001916 <QActive_postFIFO_+0x7a>
        tmp = me->eQueue.head; // get volatile into temporary
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	7f5b      	ldrb	r3, [r3, #29]
 80018ee:	75fb      	strb	r3, [r7, #23]
        me->eQueue.ring[tmp] = e; // insert e into buffer
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	601a      	str	r2, [r3, #0]
        if (tmp == 0U) { // need to wrap the head?
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d102      	bne.n	800190a <QActive_postFIFO_+0x6e>
            tmp = me->eQueue.end;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	7f1b      	ldrb	r3, [r3, #28]
 8001908:	75fb      	strb	r3, [r7, #23]
        --tmp; // advance the head (counter-clockwise)
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	3b01      	subs	r3, #1
 800190e:	75fb      	strb	r3, [r7, #23]
        me->eQueue.head = tmp; // update the original
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	7dfa      	ldrb	r2, [r7, #23]
 8001914:	775a      	strb	r2, [r3, #29]
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000334 	.word	0x20000334

08001924 <QEvt_refCtr_dec_>:

//! @private @memberof QEvt
static inline void QEvt_refCtr_dec_(QEvt const * const me) {
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    // NOTE: this function must be called inside a critical section
    uint8_t const rc = me->refCtr_ - 1U;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	78db      	ldrb	r3, [r3, #3]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3b01      	subs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	70da      	strb	r2, [r3, #3]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <QF_poolInit>:
//! @static @public @memberof QF
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
    uint_fast8_t const poolNum = QF_priv_.maxPool_;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <QF_poolInit+0x7c>)
 8001956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001958:	617b      	str	r3, [r7, #20]

    // see precondition{qf_dyn,200} and precondition{qf_dyn,201}
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800195a:	f7fe fe4b 	bl	80005f4 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(100, poolNum < QF_MAX_EPOOL);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d903      	bls.n	800196c <QF_poolInit+0x24>
 8001964:	2164      	movs	r1, #100	@ 0x64
 8001966:	4818      	ldr	r0, [pc, #96]	@ (80019c8 <QF_poolInit+0x80>)
 8001968:	f7ff f904 	bl	8000b74 <Q_onError>
    if (poolNum > 0U) {
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d011      	beq.n	8001996 <QF_poolInit+0x4e>
        Q_REQUIRE_INCRIT(110,
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	4913      	ldr	r1, [pc, #76]	@ (80019c4 <QF_poolInit+0x7c>)
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	330c      	adds	r3, #12
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4293      	cmp	r3, r2
 800198c:	d803      	bhi.n	8001996 <QF_poolInit+0x4e>
 800198e:	216e      	movs	r1, #110	@ 0x6e
 8001990:	480d      	ldr	r0, [pc, #52]	@ (80019c8 <QF_poolInit+0x80>)
 8001992:	f7ff f8ef 	bl	8000b74 <Q_onError>
            QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum - 1U]) < evtSize);
    }
    QF_priv_.maxPool_ = poolNum + 1U; // one more pool
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <QF_poolInit+0x7c>)
 800199c:	63d3      	str	r3, [r2, #60]	@ 0x3c

    QF_CRIT_EXIT();
 800199e:	f7fe fe3b 	bl	8000618 <QF_crit_exit_>

    // perform the port-dependent initialization of the event-pool
    QF_EPOOL_INIT_(QF_priv_.ePool_[poolNum], poolSto, poolSize, evtSize);
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <QF_poolInit+0x7c>)
 80019ae:	1898      	adds	r0, r3, r2
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	f000 f8c5 	bl	8001b44 <QMPool_init>
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)((uint8_t)'0' + poolNum + 1U);
        QS_obj_dict_pre_(&QF_priv_.ePool_[poolNum], (char const *)obj_name);
    }
#endif // Q_SPY
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000258 	.word	0x20000258
 80019c8:	08009910 	.word	0x08009910

080019cc <QF_newX_>:
//! @static @private @memberof QF
QEvt * QF_newX_(
    uint_fast16_t const evtSize,
    uint_fast16_t const margin,
    enum_t const sig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
    // find the pool id that fits the requested event size...
    uint8_t poolNum = 0U; // zero-based poolNum initially
 80019d8:	2300      	movs	r3, #0
 80019da:	75fb      	strb	r3, [r7, #23]
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 80019dc:	e00f      	b.n	80019fe <QF_newX_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum])) {
 80019de:	7dfa      	ldrb	r2, [r7, #23]
 80019e0:	492e      	ldr	r1, [pc, #184]	@ (8001a9c <QF_newX_+0xd0>)
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	330c      	adds	r3, #12
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d908      	bls.n	8001a0a <QF_newX_+0x3e>
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	3301      	adds	r3, #1
 80019fc:	75fb      	strb	r3, [r7, #23]
 80019fe:	7dfa      	ldrb	r2, [r7, #23]
 8001a00:	4b26      	ldr	r3, [pc, #152]	@ (8001a9c <QF_newX_+0xd0>)
 8001a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d3ea      	bcc.n	80019de <QF_newX_+0x12>
 8001a08:	e000      	b.n	8001a0c <QF_newX_+0x40>
            break;
 8001a0a:	bf00      	nop
        }
    }

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001a0c:	f7fe fdf2 	bl	80005f4 <QF_crit_entry_>

    // precondition:
    // - cannot run out of registered pools
    Q_REQUIRE_INCRIT(400, poolNum < QF_priv_.maxPool_);
 8001a10:	7dfa      	ldrb	r2, [r7, #23]
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <QF_newX_+0xd0>)
 8001a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d304      	bcc.n	8001a24 <QF_newX_+0x58>
 8001a1a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001a1e:	4820      	ldr	r0, [pc, #128]	@ (8001aa0 <QF_newX_+0xd4>)
 8001a20:	f7ff f8a8 	bl	8000b74 <Q_onError>

    ++poolNum; // convert to 1-based poolNum
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	3301      	adds	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]

    QF_CRIT_EXIT();
 8001a2a:	f7fe fdf5 	bl	8000618 <QF_crit_exit_>
#ifdef Q_SPY
    QF_EPOOL_GET_(QF_priv_.ePool_[poolNum - 1U], e,
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + poolNum);
#else
    QF_EPOOL_GET_(QF_priv_.ePool_[poolNum - 1U], e,
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4a18      	ldr	r2, [pc, #96]	@ (8001a9c <QF_newX_+0xd0>)
 8001a3c:	1898      	adds	r0, r3, r2
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d001      	beq.n	8001a4c <QF_newX_+0x80>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	e000      	b.n	8001a4e <QF_newX_+0x82>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4619      	mov	r1, r3
 8001a52:	f000 f8f3 	bl	8001c3c <QMPool_get>
 8001a56:	6138      	str	r0, [r7, #16]
                  ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
#endif

    if (e != (QEvt *)0) { // was e allocated correctly?
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <QF_newX_+0xa8>
        e->sig      = (QSignal)sig; // set the signal
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	801a      	strh	r2, [r3, #0]
        e->poolNum_ = poolNum;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	7dfa      	ldrb	r2, [r7, #23]
 8001a6a:	709a      	strb	r2, [r3, #2]
        e->refCtr_  = 0U;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	70da      	strb	r2, [r3, #3]
 8001a72:	e00d      	b.n	8001a90 <QF_newX_+0xc4>
        QS_END_PRE()
        QS_CRIT_EXIT();
    }
    else { // event was not allocated

        QF_CRIT_ENTRY();
 8001a74:	f7fe fdbe 	bl	80005f4 <QF_crit_entry_>
        // This assertion means that the event allocation failed,
        // and this failure cannot be tolerated. The most frequent
        // reason is an event leak in the application.
        Q_ASSERT_INCRIT(420, margin != QF_NO_MARGIN);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d104      	bne.n	8001a8c <QF_newX_+0xc0>
 8001a82:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001a86:	4806      	ldr	r0, [pc, #24]	@ (8001aa0 <QF_newX_+0xd4>)
 8001a88:	f7ff f874 	bl	8000b74 <Q_onError>
            QS_TIME_PRE();        // timestamp
            QS_EVS_PRE(evtSize);  // the size of the event
            QS_SIG_PRE(sig);      // the signal of the event
        QS_END_PRE()

        QF_CRIT_EXIT();
 8001a8c:	f7fe fdc4 	bl	8000618 <QF_crit_exit_>
    }

    // the returned event e is guaranteed to be valid (not NULL)
    // if we can't tolerate failed allocation
    return e;
 8001a90:	693b      	ldr	r3, [r7, #16]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000258 	.word	0x20000258
 8001aa0:	08009910 	.word	0x08009910

08001aa4 <QF_gc>:

//............................................................................
//! @static @public @memberof QF
void QF_gc(QEvt const * const e) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001aac:	f7fe fda2 	bl	80005f4 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(500, e != (QEvt *)0);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d104      	bne.n	8001ac0 <QF_gc+0x1c>
 8001ab6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001aba:	4820      	ldr	r0, [pc, #128]	@ (8001b3c <QF_gc+0x98>)
 8001abc:	f7ff f85a 	bl	8000b74 <Q_onError>

    uint8_t const poolNum = e->poolNum_;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	789b      	ldrb	r3, [r3, #2]
 8001ac4:	73fb      	strb	r3, [r7, #15]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d031      	beq.n	8001b30 <QF_gc+0x8c>

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	78db      	ldrb	r3, [r3, #3]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d90f      	bls.n	8001af6 <QF_gc+0x52>
                QS_TIME_PRE();       // timestamp
                QS_SIG_PRE(e->sig);  // the signal of the event
                QS_2U8_PRE(poolNum, e->refCtr_);
            QS_END_PRE()

            Q_ASSERT_INCRIT(505, e->refCtr_ > 0U);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	78db      	ldrb	r3, [r3, #3]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d104      	bne.n	8001aea <QF_gc+0x46>
 8001ae0:	f240 11f9 	movw	r1, #505	@ 0x1f9
 8001ae4:	4815      	ldr	r0, [pc, #84]	@ (8001b3c <QF_gc+0x98>)
 8001ae6:	f7ff f845 	bl	8000b74 <Q_onError>
            QEvt_refCtr_dec_(e); // decrement the ref counter
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff1a 	bl	8001924 <QEvt_refCtr_dec_>

            QF_CRIT_EXIT();
 8001af0:	f7fe fd92 	bl	8000618 <QF_crit_exit_>
        }
    }
    else {
        QF_CRIT_EXIT();
    }
}
 8001af4:	e01e      	b.n	8001b34 <QF_gc+0x90>
            Q_ASSERT_INCRIT(510, (poolNum <= QF_priv_.maxPool_)
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <QF_gc+0x9c>)
 8001afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d802      	bhi.n	8001b06 <QF_gc+0x62>
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d904      	bls.n	8001b10 <QF_gc+0x6c>
 8001b06:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001b0a:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <QF_gc+0x98>)
 8001b0c:	f7ff f832 	bl	8000b74 <Q_onError>
            QF_CRIT_EXIT();
 8001b10:	f7fe fd82 	bl	8000618 <QF_crit_exit_>
            QF_EPOOL_PUT_(QF_priv_.ePool_[poolNum - 1U], (QEvt *)e,
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	1e5a      	subs	r2, r3, #1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <QF_gc+0x9c>)
 8001b22:	4413      	add	r3, r2
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 f8e9 	bl	8001d00 <QMPool_put>
}
 8001b2e:	e001      	b.n	8001b34 <QF_gc+0x90>
        QF_CRIT_EXIT();
 8001b30:	f7fe fd72 	bl	8000618 <QF_crit_exit_>
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	08009910 	.word	0x08009910
 8001b40:	20000258 	.word	0x20000258

08001b44 <QMPool_init>:
//! @public @memberof QMPool
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const blockSize)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001b52:	f7fe fd4f 	bl	80005f4 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(100, poolSto != (void *)0);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d103      	bne.n	8001b64 <QMPool_init+0x20>
 8001b5c:	2164      	movs	r1, #100	@ 0x64
 8001b5e:	4836      	ldr	r0, [pc, #216]	@ (8001c38 <QMPool_init+0xf4>)
 8001b60:	f7ff f808 	bl	8000b74 <Q_onError>

    me->freeHead = (void * *)poolSto;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	609a      	str	r2, [r3, #8]

    // find # free links in a memory block, see NOTE1
    me->blockSize = (QMPoolSize)(2U * sizeof(void *));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	819a      	strh	r2, [r3, #12]
    uint_fast16_t inext = 2U; // # index of the next block
 8001b70:	2302      	movs	r3, #2
 8001b72:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8001b74:	e008      	b.n	8001b88 <QMPool_init+0x44>
        me->blockSize += (QMPoolSize)sizeof(void *);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	899b      	ldrh	r3, [r3, #12]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	819a      	strh	r2, [r3, #12]
        ++inext;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	899a      	ldrh	r2, [r3, #12]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3f0      	bcc.n	8001b76 <QMPool_init+0x32>
    }

    // the pool buffer must fit at least one rounded-up block
    Q_ASSERT_INCRIT(110, poolSize >= me->blockSize);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	899b      	ldrh	r3, [r3, #12]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d203      	bcs.n	8001ba8 <QMPool_init+0x64>
 8001ba0:	216e      	movs	r1, #110	@ 0x6e
 8001ba2:	4825      	ldr	r0, [pc, #148]	@ (8001c38 <QMPool_init+0xf4>)
 8001ba4:	f7fe ffe6 	bl	8000b74 <Q_onError>

    // start at the head of the free list
    void * *pfb = me->freeHead; // pointer to free block
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	61bb      	str	r3, [r7, #24]
    uint32_t nTot = 1U; // the last block already in the list
 8001bae:	2301      	movs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]

    // chain all blocks together in a free-list...
    for (uint_fast32_t size = poolSize - me->blockSize;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	899b      	ldrh	r3, [r3, #12]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e011      	b.n	8001be4 <QMPool_init+0xa0>
         size >= (uint_fast32_t)me->blockSize;
         size -= (uint_fast32_t)me->blockSize)
    {
        pfb[0] = &pfb[inext]; // set the next link to next free block
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	441a      	add	r2, r3
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	601a      	str	r2, [r3, #0]
        pfb = pfb[0]; // advance to the next block
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
        ++nTot;       // one more free block in the pool
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
         size -= (uint_fast32_t)me->blockSize)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	899b      	ldrh	r3, [r3, #12]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
         size >= (uint_fast32_t)me->blockSize;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	899b      	ldrh	r3, [r3, #12]
 8001be8:	461a      	mov	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d2e7      	bcs.n	8001bc0 <QMPool_init+0x7c>
    }
    pfb[0] = (void * *)0; // the last link points to NULL
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]

    // dynamic range check
#if (QF_MPOOL_CTR_SIZE == 1U)
    Q_ASSERT_INCRIT(190, nTot < 0xFFU);
#elif (QF_MPOOL_CTR_SIZE == 2U)
    Q_ASSERT_INCRIT(190, nTot < 0xFFFFU);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d903      	bls.n	8001c08 <QMPool_init+0xc4>
 8001c00:	21be      	movs	r1, #190	@ 0xbe
 8001c02:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <QMPool_init+0xf4>)
 8001c04:	f7fe ffb6 	bl	8000b74 <Q_onError>
#endif

    me->nTot  = (QMPoolCtr)nTot;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	81da      	strh	r2, [r3, #14]
    me->nFree = me->nTot; // all blocks are free
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	89da      	ldrh	r2, [r3, #14]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	821a      	strh	r2, [r3, #16]
    me->start = (void * *)poolSto; // the original start this pool buffer
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	601a      	str	r2, [r3, #0]
    me->end   = pfb;      // the last block in this pool
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	605a      	str	r2, [r3, #4]
    me->nMin  = me->nTot; // the minimum # free blocks
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	89da      	ldrh	r2, [r3, #14]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	825a      	strh	r2, [r3, #18]

    QF_CRIT_EXIT();
 8001c2c:	f7fe fcf4 	bl	8000618 <QF_crit_exit_>
}
 8001c30:	bf00      	nop
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	08009918 	.word	0x08009918

08001c3c <QMPool_get>:
//............................................................................
//! @public @memberof QMPool
void * QMPool_get(QMPool * const me,
    uint_fast16_t const margin,
    uint_fast8_t const qsId)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001c48:	f7fe fcd4 	bl	80005f4 <QF_crit_entry_>

    // get volatile into temporaries
    void * *pfb = me->freeHead; // pointer to free block
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	61fb      	str	r3, [r7, #28]
    QMPoolCtr nFree = me->nFree;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8a1b      	ldrh	r3, [r3, #16]
 8001c56:	837b      	strh	r3, [r7, #26]

    // have more free blocks than the requested margin?
    if (nFree > (QMPoolCtr)margin) {
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	8b7a      	ldrh	r2, [r7, #26]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d942      	bls.n	8001ce8 <QMPool_get+0xac>
        Q_ASSERT_INCRIT(310, pfb != (void * *)0);
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d104      	bne.n	8001c72 <QMPool_get+0x36>
 8001c68:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001c6c:	4823      	ldr	r0, [pc, #140]	@ (8001cfc <QMPool_get+0xc0>)
 8001c6e:	f7fe ff81 	bl	8000b74 <Q_onError>

        void * * const pfb_next = pfb[0]; // fast temporary
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	617b      	str	r3, [r7, #20]

        --nFree; // one less free block
 8001c78:	8b7b      	ldrh	r3, [r7, #26]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	837b      	strh	r3, [r7, #26]
        if (nFree == 0U) { // is the pool becoming empty?
 8001c7e:	8b7b      	ldrh	r3, [r7, #26]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10e      	bne.n	8001ca2 <QMPool_get+0x66>
            // pool is becoming empty, so the next free block must be NULL
            Q_ASSERT_INCRIT(320, pfb_next == (void * *)0);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d004      	beq.n	8001c94 <QMPool_get+0x58>
 8001c8a:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001c8e:	481b      	ldr	r0, [pc, #108]	@ (8001cfc <QMPool_get+0xc0>)
 8001c90:	f7fe ff70 	bl	8000b74 <Q_onError>

            me->nFree = 0U; // no more free blocks
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	821a      	strh	r2, [r3, #16]
            me->nMin = 0U;  // remember that the pool got empty
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	825a      	strh	r2, [r3, #18]
 8001ca0:	e019      	b.n	8001cd6 <QMPool_get+0x9a>
        }
        else { // the pool is NOT empty

            // the next free-block pointer must be in range
            Q_ASSERT_INCRIT(330,
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d304      	bcc.n	8001cb6 <QMPool_get+0x7a>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d904      	bls.n	8001cc0 <QMPool_get+0x84>
 8001cb6:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001cba:	4810      	ldr	r0, [pc, #64]	@ (8001cfc <QMPool_get+0xc0>)
 8001cbc:	f7fe ff5a 	bl	8000b74 <Q_onError>
                (me->start <= pfb_next) && (pfb_next <= me->end));

            me->nFree = nFree; // update the original
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8b7a      	ldrh	r2, [r7, #26]
 8001cc4:	821a      	strh	r2, [r3, #16]
            if (me->nMin > nFree) { // is this the new minimum?
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8a5b      	ldrh	r3, [r3, #18]
 8001cca:	8b7a      	ldrh	r2, [r7, #26]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d202      	bcs.n	8001cd6 <QMPool_get+0x9a>
                me->nMin = nFree; // remember the minimum so far
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8b7a      	ldrh	r2, [r7, #26]
 8001cd4:	825a      	strh	r2, [r3, #18]
            }
        }

        me->freeHead = pfb_next; // set the head to the next free block
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	609a      	str	r2, [r3, #8]

        // change the allocated block contents so that it is different
        // than a free block inside the pool.
        pfb[0] = &me->end[1]; // invalid location beyond the end
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	1d1a      	adds	r2, r3, #4
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e001      	b.n	8001cec <QMPool_get+0xb0>
            QS_MPC_PRE(nFree);     // # free blocks in the pool
            QS_MPC_PRE(me->nMin);  // min # free blocks ever in the pool
        QS_END_PRE()
    }
    else { // don't have enough free blocks at this point
        pfb = (void * *)0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
            QS_MPC_PRE(nFree);     // # free blocks in the pool
            QS_MPC_PRE(margin);    // the requested margin
        QS_END_PRE()
    }

    QF_CRIT_EXIT();
 8001cec:	f7fe fc94 	bl	8000618 <QF_crit_exit_>

    return (void *)pfb; // return the block or NULL pointer to the caller
 8001cf0:	69fb      	ldr	r3, [r7, #28]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	08009918 	.word	0x08009918

08001d00 <QMPool_put>:
//............................................................................
//! @public @memberof QMPool
void QMPool_put(QMPool * const me,
    void * const block,
    uint_fast8_t const qsId)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    void * * const pfb = (void * *)block; // pointer to free block
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	61fb      	str	r3, [r7, #28]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001d10:	f7fe fc70 	bl	80005f4 <QF_crit_entry_>

    // get volatile into temporaries
    void * * const freeHead = me->freeHead;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	61bb      	str	r3, [r7, #24]
    QMPoolCtr nFree = me->nFree;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8a1b      	ldrh	r3, [r3, #16]
 8001d1e:	82fb      	strh	r3, [r7, #22]

    Q_REQUIRE_INCRIT(400, nFree < me->nTot);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	89db      	ldrh	r3, [r3, #14]
 8001d24:	8afa      	ldrh	r2, [r7, #22]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d304      	bcc.n	8001d34 <QMPool_put+0x34>
 8001d2a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001d2e:	4812      	ldr	r0, [pc, #72]	@ (8001d78 <QMPool_put+0x78>)
 8001d30:	f7fe ff20 	bl	8000b74 <Q_onError>
    Q_REQUIRE_INCRIT(410, (me->start <= pfb) && (pfb <= me->end));
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d304      	bcc.n	8001d48 <QMPool_put+0x48>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d904      	bls.n	8001d52 <QMPool_put+0x52>
 8001d48:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8001d4c:	480a      	ldr	r0, [pc, #40]	@ (8001d78 <QMPool_put+0x78>)
 8001d4e:	f7fe ff11 	bl	8000b74 <Q_onError>

    ++nFree; // one more free block in this pool
 8001d52:	8afb      	ldrh	r3, [r7, #22]
 8001d54:	3301      	adds	r3, #1
 8001d56:	82fb      	strh	r3, [r7, #22]

    me->freeHead = pfb; // set as new head of the free list
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	609a      	str	r2, [r3, #8]
    me->nFree     = nFree;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8afa      	ldrh	r2, [r7, #22]
 8001d62:	821a      	strh	r2, [r3, #16]
    pfb[0]        = freeHead; // link into the list
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	601a      	str	r2, [r3, #0]
        QS_TIME_PRE();         // timestamp
        QS_OBJ_PRE(me);        // this memory pool
        QS_MPC_PRE(nFree);     // the # free blocks in the pool
    QS_END_PRE()

    QF_CRIT_EXIT();
 8001d6a:	f7fe fc55 	bl	8000618 <QF_crit_exit_>
}
 8001d6e:	bf00      	nop
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	08009918 	.word	0x08009918

08001d7c <QActive_ctor>:

//............................................................................
//! @protected @memberof QActive
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    // clear the whole QActive object, so that the framework can start
    // correctly even if the startup code fails to clear the uninitialized
    // data (as is required by the C Standard).
    QF_bzero_(me, sizeof(*me));
 8001d86:	2124      	movs	r1, #36	@ 0x24
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff fc99 	bl	80016c0 <QF_bzero_>

    // NOTE: QActive inherits the abstract QAsm class, but it calls the
    // constructor of the QHsm subclass. This is because QActive inherits
    // the behavior from the QHsm subclass.
    QHsm_ctor((QHsm *)(me), initial);
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff f9cf 	bl	8001134 <QHsm_ctor>
        &QHsm_isIn_
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    me->super.vptr = &vtable; // hook vptr to QActive vtable
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a02      	ldr	r2, [pc, #8]	@ (8001da4 <QActive_ctor+0x28>)
 8001d9a:	601a      	str	r2, [r3, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	08009928 	.word	0x08009928

08001da8 <QActive_register_>:

//............................................................................
//! @private @memberof QActive
void QActive_register_(QActive * const me) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001db0:	f7fe fc20 	bl	80005f4 <QF_crit_entry_>

    if (me->pthre == 0U) { // preemption-threshold not defined?
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7b5b      	ldrb	r3, [r3, #13]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d103      	bne.n	8001dc4 <QActive_register_+0x1c>
        me->pthre = me->prio; // apply the default
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7b1a      	ldrb	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	735a      	strb	r2, [r3, #13]
    }

#ifndef Q_UNSAFE
    Q_REQUIRE_INCRIT(100,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7b1b      	ldrb	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d011      	beq.n	8001df0 <QActive_register_+0x48>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7b1b      	ldrb	r3, [r3, #12]
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d80d      	bhi.n	8001df0 <QActive_register_+0x48>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7b1b      	ldrb	r3, [r3, #12]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b30      	ldr	r3, [pc, #192]	@ (8001e9c <QActive_register_+0xf4>)
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <QActive_register_+0x48>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7b1a      	ldrb	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7b5b      	ldrb	r3, [r3, #13]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d903      	bls.n	8001df8 <QActive_register_+0x50>
 8001df0:	2164      	movs	r1, #100	@ 0x64
 8001df2:	482b      	ldr	r0, [pc, #172]	@ (8001ea0 <QActive_register_+0xf8>)
 8001df4:	f7fe febe 	bl	8000b74 <Q_onError>
        (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
        && (QActive_registry_[me->prio] == (QActive *)0)
        && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7b5b      	ldrb	r3, [r3, #13]
 8001dfc:	75fb      	strb	r3, [r7, #23]
    uint8_t next_thre = me->pthre;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7b5b      	ldrb	r3, [r3, #13]
 8001e02:	75bb      	strb	r3, [r7, #22]

    for (uint_fast8_t p = (uint_fast8_t)me->prio - 1U;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7b1b      	ldrb	r3, [r3, #12]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	e00f      	b.n	8001e2e <QActive_register_+0x86>
         p > 0U;
         --p)
    {
        if (QActive_registry_[p] != (QActive *)0) {
 8001e0e:	4a23      	ldr	r2, [pc, #140]	@ (8001e9c <QActive_register_+0xf4>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <QActive_register_+0x80>
            prev_thre = QActive_registry_[p]->pthre;
 8001e1a:	4a20      	ldr	r2, [pc, #128]	@ (8001e9c <QActive_register_+0xf4>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	7b5b      	ldrb	r3, [r3, #13]
 8001e24:	75fb      	strb	r3, [r7, #23]
            break;
 8001e26:	e005      	b.n	8001e34 <QActive_register_+0x8c>
         --p)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
         p > 0U;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ec      	bne.n	8001e0e <QActive_register_+0x66>
        }
    }
    for (uint_fast8_t p = (uint_fast8_t)me->prio + 1U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7b1b      	ldrb	r3, [r3, #12]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e00f      	b.n	8001e5e <QActive_register_+0xb6>
         p <= QF_MAX_ACTIVE;
         ++p)
    {
        if (QActive_registry_[p] != (QActive *)0) {
 8001e3e:	4a17      	ldr	r2, [pc, #92]	@ (8001e9c <QActive_register_+0xf4>)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <QActive_register_+0xb0>
            next_thre = QActive_registry_[p]->pthre;
 8001e4a:	4a14      	ldr	r2, [pc, #80]	@ (8001e9c <QActive_register_+0xf4>)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	7b5b      	ldrb	r3, [r3, #13]
 8001e54:	75bb      	strb	r3, [r7, #22]
            break;
 8001e56:	e005      	b.n	8001e64 <QActive_register_+0xbc>
         ++p)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
         p <= QF_MAX_ACTIVE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d9ec      	bls.n	8001e3e <QActive_register_+0x96>
        }
    }

    Q_ASSERT_INCRIT(190,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7b5b      	ldrb	r3, [r3, #13]
 8001e68:	7dfa      	ldrb	r2, [r7, #23]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d804      	bhi.n	8001e78 <QActive_register_+0xd0>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7b5b      	ldrb	r3, [r3, #13]
 8001e72:	7dba      	ldrb	r2, [r7, #22]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d203      	bcs.n	8001e80 <QActive_register_+0xd8>
 8001e78:	21be      	movs	r1, #190	@ 0xbe
 8001e7a:	4809      	ldr	r0, [pc, #36]	@ (8001ea0 <QActive_register_+0xf8>)
 8001e7c:	f7fe fe7a 	bl	8000b74 <Q_onError>
        (prev_thre <= me->pthre)
        && (me->pthre <= next_thre));
#endif // Q_UNSAFE

    // register the AO at the QF-prio.
    QActive_registry_[me->prio] = me;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7b1b      	ldrb	r3, [r3, #12]
 8001e84:	4619      	mov	r1, r3
 8001e86:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <QActive_register_+0xf4>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    QF_CRIT_EXIT();
 8001e8e:	f7fe fbc3 	bl	8000618 <QF_crit_exit_>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000298 	.word	0x20000298
 8001ea0:	08009920 	.word	0x08009920

08001ea4 <QEQueue_init>:
//............................................................................
//! @public @memberof QEQueue
void QEQueue_init(QEQueue * const me,
    struct QEvt const  * * const qSto,
    uint_fast16_t const qLen)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001eb0:	f7fe fba0 	bl	80005f4 <QF_crit_entry_>

#if (QF_EQUEUE_CTR_SIZE == 1U)
    Q_REQUIRE_INCRIT(100, qLen < 0xFFU);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2bfe      	cmp	r3, #254	@ 0xfe
 8001eb8:	d903      	bls.n	8001ec2 <QEQueue_init+0x1e>
 8001eba:	2164      	movs	r1, #100	@ 0x64
 8001ebc:	4813      	ldr	r0, [pc, #76]	@ (8001f0c <QEQueue_init+0x68>)
 8001ebe:	f7fe fe59 	bl	8000b74 <Q_onError>
#endif

    me->frontEvt = (QEvt *)0; // no events in the queue
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      // the beginning of the ring buffer
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	721a      	strb	r2, [r3, #8]
    if (qLen > 0U) {
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <QEQueue_init+0x44>
        me->head = 0U;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); // +1 for frontEvt
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	7adb      	ldrb	r3, [r3, #11]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	731a      	strb	r2, [r3, #12]

    QF_CRIT_EXIT();
 8001efe:	f7fe fb8b 	bl	8000618 <QF_crit_exit_>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	08009934 	.word	0x08009934

08001f10 <QEvt_ctor>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
    me->sig      = (QSignal)sig;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	801a      	strh	r2, [r3, #0]
    me->poolNum_ = 0x00U;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	709a      	strb	r2, [r3, #2]
    me->refCtr_  = 0xE0U;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	22e0      	movs	r2, #224	@ 0xe0
 8001f2c:	70da      	strb	r2, [r3, #3]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <QTimeEvt_ctorX>:
//! @public @memberof QTimeEvt
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001f4a:	f7fe fb53 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (sig != 0)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <QTimeEvt_ctorX+0x1e>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <QTimeEvt_ctorX+0x28>
 8001f5a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f5e:	4812      	ldr	r0, [pc, #72]	@ (8001fa8 <QTimeEvt_ctorX+0x6c>)
 8001f60:	f7fe fe08 	bl	8000b74 <Q_onError>
        && (tickRate < QF_MAX_TICK_RATE));
    QF_CRIT_EXIT();
 8001f64:	f7fe fb58 	bl	8000618 <QF_crit_exit_>

    QEvt_ctor(&me->super, sig);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ffcf 	bl	8001f10 <QEvt_ctor>

    me->next     = (QTimeEvt *)0;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	605a      	str	r2, [r3, #4]
    me->act      = act;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	609a      	str	r2, [r3, #8]
    me->ctr      = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
    me->interval = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
    me->tickRate = (uint8_t)tickRate;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	751a      	strb	r2, [r3, #20]
    me->flags    = 0U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	755a      	strb	r2, [r3, #21]

    me->super.refCtr_ = 0U; // adjust from the QEvt_ctor((sig) ctor
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	70da      	strb	r2, [r3, #3]
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	0800993c 	.word	0x0800993c

08001fac <QTimeEvt_armX>:
//............................................................................
//! @public @memberof QTimeEvt
void QTimeEvt_armX(QTimeEvt * const me,
    uint32_t const nTicks,
    uint32_t const interval)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001fb8:	f7fe fb1c 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(400, (nTicks < 0xFFU) && (interval < 0xFFU));
#elif (QF_TIMEEVT_CTR_SIZE == 2U)
    Q_REQUIRE_INCRIT(400, (nTicks < 0xFFFFU) && (interval < 0xFFFFU));
#endif

    QTimeEvtCtr const ctr = me->ctr;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	617b      	str	r3, [r7, #20]
    uint8_t const tickRate = me->tickRate;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	7d1b      	ldrb	r3, [r3, #20]
 8001fc6:	74fb      	strb	r3, [r7, #19]
#ifdef Q_SPY
    uint_fast8_t const qsId = ((QActive *)(me->act))->prio;
#endif // def Q_SPY

    Q_REQUIRE_INCRIT(410,
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <QTimeEvt_armX+0x36>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d106      	bne.n	8001fe2 <QTimeEvt_armX+0x36>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <QTimeEvt_armX+0x36>
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <QTimeEvt_armX+0x40>
 8001fe2:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8001fe6:	4818      	ldr	r0, [pc, #96]	@ (8002048 <QTimeEvt_armX+0x9c>)
 8001fe8:	f7fe fdc4 	bl	8000b74 <Q_onError>

#ifdef Q_UNSAFE
    Q_UNUSED_PAR(ctr);
#endif // ndef Q_UNSAFE

    me->ctr = (QTimeEvtCtr)nTicks;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
    me->interval = (QTimeEvtCtr)interval;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	611a      	str	r2, [r3, #16]

    // is the time event unlinked?
    // NOTE: For the duration of a single clock tick of the specified tick
    // rate a time event can be disarmed and yet still linked into the list
    // because un-linking is performed exclusively in QTimeEvt_tick_().
    if ((me->flags & QTE_FLAG_IS_LINKED) == 0U) {
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	7d5b      	ldrb	r3, [r3, #21]
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db1b      	blt.n	800203a <QTimeEvt_armX+0x8e>
        me->flags |= QTE_FLAG_IS_LINKED; // mark as linked
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	7d5b      	ldrb	r3, [r3, #21]
 8002006:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	755a      	strb	r2, [r3, #21]
        // "freshly armed" list based on timeEvtHead_[tickRate].act.
        // Only later, inside QTimeEvt_tick_(), the "freshly armed"
        // list is appended to the main list of armed time events based on
        // timeEvtHead_[tickRate].next. Again, this is to keep any
        // changes to the main list exclusively inside QTimeEvt_tick_().
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8002010:	7cfa      	ldrb	r2, [r7, #19]
 8002012:	490e      	ldr	r1, [pc, #56]	@ (800204c <QTimeEvt_armX+0xa0>)
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	3308      	adds	r3, #8
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 8002026:	7cfa      	ldrb	r2, [r7, #19]
 8002028:	4908      	ldr	r1, [pc, #32]	@ (800204c <QTimeEvt_armX+0xa0>)
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	3308      	adds	r3, #8
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE(nTicks);   // the # ticks
        QS_TEC_PRE(interval); // the interval
        QS_U8_PRE(tickRate);  // tick rate
    QS_END_PRE()

    QF_CRIT_EXIT();
 800203a:	f7fe faed 	bl	8000618 <QF_crit_exit_>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	0800993c 	.word	0x0800993c
 800204c:	2000031c 	.word	0x2000031c

08002050 <QTimeEvt_disarm>:

//............................................................................
//! @public @memberof QTimeEvt
bool QTimeEvt_disarm(QTimeEvt * const me) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002058:	f7fe facc 	bl	80005f4 <QF_crit_entry_>

    QTimeEvtCtr const ctr = me->ctr;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
#ifdef Q_SPY
    uint_fast8_t const qsId = QACTIVE_CAST_(me->act)->prio;
#endif

    // was the time event actually armed?
    bool wasArmed = false;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
    if (ctr != 0U) {
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00c      	beq.n	8002086 <QTimeEvt_disarm+0x36>
        wasArmed = true;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
        me->flags |= QTE_FLAG_WAS_DISARMED;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7d5b      	ldrb	r3, [r3, #21]
 8002074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002078:	b2da      	uxtb	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	755a      	strb	r2, [r3, #21]
        me->ctr = 0U; // schedule removal from the list
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	e006      	b.n	8002094 <QTimeEvt_disarm+0x44>
            QS_TEC_PRE(me->interval); // the interval
            QS_U8_PRE(me->tickRate);  // tick rate
        QS_END_PRE()
    }
    else { // the time event was already disarmed automatically
        me->flags &= (uint8_t)(~QTE_FLAG_WAS_DISARMED & 0xFFU);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7d5b      	ldrb	r3, [r3, #21]
 800208a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800208e:	b2da      	uxtb	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	755a      	strb	r2, [r3, #21]
            QS_OBJ_PRE(me->act);      // the target AO
            QS_U8_PRE(me->tickRate);  // tick rate
        QS_END_PRE()
    }

    QF_CRIT_EXIT();
 8002094:	f7fe fac0 	bl	8000618 <QF_crit_exit_>

    return wasArmed;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <QTimeEvt_init>:
    return ctr;
}

//............................................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_init(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
    for (uint_fast8_t tickRate = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	e00e      	b.n	80020ce <QTimeEvt_init+0x2a>
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
         ++tickRate)
    {
        QTimeEvt_ctorX(&QTimeEvt_timeEvtHead_[tickRate],
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4a09      	ldr	r2, [pc, #36]	@ (80020e0 <QTimeEvt_init+0x3c>)
 80020bc:	1898      	adds	r0, r3, r2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2204      	movs	r2, #4
 80020c2:	2100      	movs	r1, #0
 80020c4:	f7ff ff3a 	bl	8001f3c <QTimeEvt_ctorX>
         ++tickRate)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3301      	adds	r3, #1
 80020cc:	607b      	str	r3, [r7, #4]
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ed      	beq.n	80020b0 <QTimeEvt_init+0xc>
                       (QActive *)0, Q_USER_SIG, tickRate);
    }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000031c 	.word	0x2000031c

080020e4 <QTimeEvt_tick_>:
//............................................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
#ifndef Q_SPY
    Q_UNUSED_PAR(sender);
#endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80020ee:	f7fe fa81 	bl	80005f4 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(800, tickRate < Q_DIM(QTimeEvt_timeEvtHead_));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <QTimeEvt_tick_+0x1e>
 80020f8:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80020fc:	4841      	ldr	r0, [pc, #260]	@ (8002204 <QTimeEvt_tick_+0x120>)
 80020fe:	f7fe fd39 	bl	8000b74 <Q_onError>

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4a3e      	ldr	r2, [pc, #248]	@ (8002208 <QTimeEvt_tick_+0x124>)
 800210e:	4413      	add	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
    QS_END_PRE()
#endif // def Q_SPY

    // scan the linked-list of time events at this rate...
    while (true) {
        Q_ASSERT_INCRIT(810, prev != (QTimeEvt *)0); // sanity check
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d104      	bne.n	8002122 <QTimeEvt_tick_+0x3e>
 8002118:	f240 312a 	movw	r1, #810	@ 0x32a
 800211c:	4839      	ldr	r0, [pc, #228]	@ (8002204 <QTimeEvt_tick_+0x120>)
 800211e:	f7fe fd29 	bl	8000b74 <Q_onError>

        QTimeEvt *te = prev->next; // advance down the time evt. list
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	613b      	str	r3, [r7, #16]

        if (te == (QTimeEvt *)0) { // end of the list?
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d122      	bne.n	8002174 <QTimeEvt_tick_+0x90>
            // NO any new time events armed since the last QTimeEvt_tick_()?
            if (QTimeEvt_timeEvtHead_[tickRate].act == (void *)0) {
 800212e:	4936      	ldr	r1, [pc, #216]	@ (8002208 <QTimeEvt_tick_+0x124>)
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	3308      	adds	r3, #8
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d057      	beq.n	80021f4 <QTimeEvt_tick_+0x110>
                break; // terminate the while-loop
            }

            prev->next = (QTimeEvt*)QTimeEvt_timeEvtHead_[tickRate].act;
 8002144:	4930      	ldr	r1, [pc, #192]	@ (8002208 <QTimeEvt_tick_+0x124>)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	3308      	adds	r3, #8
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	605a      	str	r2, [r3, #4]
            QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 800215a:	492b      	ldr	r1, [pc, #172]	@ (8002208 <QTimeEvt_tick_+0x124>)
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	3308      	adds	r3, #8
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]

            te = prev->next; // switch to the new list
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	613b      	str	r3, [r7, #16]
        }

        // the time event 'te' must be valid
        Q_ASSERT_INCRIT(840, te != (QTimeEvt *)0);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d104      	bne.n	8002184 <QTimeEvt_tick_+0xa0>
 800217a:	f44f 7152 	mov.w	r1, #840	@ 0x348
 800217e:	4821      	ldr	r0, [pc, #132]	@ (8002204 <QTimeEvt_tick_+0x120>)
 8002180:	f7fe fcf8 	bl	8000b74 <Q_onError>

        QTimeEvtCtr ctr = te->ctr; // move volatile into temporary
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	60fb      	str	r3, [r7, #12]

        if (ctr == 0U) { // time event scheduled for removal?
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10d      	bne.n	80021ac <QTimeEvt_tick_+0xc8>
            prev->next = te->next;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	605a      	str	r2, [r3, #4]

            // mark time event 'te' as NOT linked
            te->flags &= (uint8_t)(~QTE_FLAG_IS_LINKED & 0xFFU);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	7d5b      	ldrb	r3, [r3, #21]
 800219c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	755a      	strb	r2, [r3, #21]
            // do NOT advance the prev pointer
            QF_CRIT_EXIT(); // exit crit. section to reduce latency
 80021a6:	f7fe fa37 	bl	8000618 <QF_crit_exit_>
 80021aa:	e020      	b.n	80021ee <QTimeEvt_tick_+0x10a>
        }
        else if (ctr == 1U) { // is time event about to expire?
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d113      	bne.n	80021da <QTimeEvt_tick_+0xf6>
            QActive * const act = (QActive *)te->act;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	60bb      	str	r3, [r7, #8]
            prev = QTimeEvt_expire_(te, prev, act, tickRate);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	6979      	ldr	r1, [r7, #20]
 80021be:	6938      	ldr	r0, [r7, #16]
 80021c0:	f000 f824 	bl	800220c <QTimeEvt_expire_>
 80021c4:	6178      	str	r0, [r7, #20]

                // QACTIVE_POST() asserts if the queue overflows
                QACTIVE_POST(act, &te->super, sender);
            }
#else // not QXK
            QF_CRIT_EXIT(); // exit crit. section before posting
 80021c6:	f7fe fa27 	bl	8000618 <QF_crit_exit_>

            // QACTIVE_POST() asserts if the queue overflows
            QACTIVE_POST(act, &te->super, sender);
 80021ca:	6939      	ldr	r1, [r7, #16]
 80021cc:	2300      	movs	r3, #0
 80021ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021d2:	68b8      	ldr	r0, [r7, #8]
 80021d4:	f7ff fab8 	bl	8001748 <QActive_post_>
 80021d8:	e009      	b.n	80021ee <QTimeEvt_tick_+0x10a>
#endif
        }
        else { // time event keeps timing out
            --ctr; // decrement the tick counter
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3b01      	subs	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
            te->ctr = ctr; // update the original
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	60da      	str	r2, [r3, #12]

            prev = te; // advance to this time event
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	617b      	str	r3, [r7, #20]
            QF_CRIT_EXIT(); // exit crit. section to reduce latency
 80021ea:	f7fe fa15 	bl	8000618 <QF_crit_exit_>
        }
        QF_CRIT_ENTRY(); // re-enter crit. section to continue the loop
 80021ee:	f7fe fa01 	bl	80005f4 <QF_crit_entry_>
    while (true) {
 80021f2:	e78e      	b.n	8002112 <QTimeEvt_tick_+0x2e>
                break; // terminate the while-loop
 80021f4:	bf00      	nop
    }
    QF_CRIT_EXIT();
 80021f6:	f7fe fa0f 	bl	8000618 <QF_crit_exit_>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	0800993c 	.word	0x0800993c
 8002208:	2000031c 	.word	0x2000031c

0800220c <QTimeEvt_expire_>:
//! @private @memberof QTimeEvt
QTimeEvt * QTimeEvt_expire_(QTimeEvt * const me,
    QTimeEvt * const prev_link,
    QActive const * const act,
    uint_fast8_t const tickRate)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
#ifndef Q_SPY
    Q_UNUSED_PAR(act);
    Q_UNUSED_PAR(tickRate);
#endif

    QTimeEvt *prev = prev_link;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	617b      	str	r3, [r7, #20]
    if (me->interval != 0U) { // periodic time evt?
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <QTimeEvt_expire_+0x28>
        me->ctr = me->interval; // rearm the time event
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	60da      	str	r2, [r3, #12]
        prev = me; // advance to this time event
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e00d      	b.n	8002250 <QTimeEvt_expire_+0x44>
    }
    else { // one-shot time event: automatically disarm
        me->ctr = 0U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
        prev->next = me->next;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	605a      	str	r2, [r3, #4]

        // mark this time event as NOT linked
        me->flags &= (uint8_t)(~QTE_FLAG_IS_LINKED & 0xFFU);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	7d5b      	ldrb	r3, [r3, #21]
 8002246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800224a:	b2da      	uxtb	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	755a      	strb	r2, [r3, #21]
        QS_SIG_PRE(me->super.sig);// signal of this time event
        QS_OBJ_PRE(act);          // the target AO
        QS_U8_PRE(tickRate);      // tick rate
    QS_END_PRE()

    return prev;
 8002250:	697b      	ldr	r3, [r7, #20]
}
 8002252:	4618      	mov	r0, r3
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
    return (me->bits[0] != 0U);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	bf14      	ite	ne
 800226e:	2301      	movne	r3, #1
 8002270:	2300      	moveq	r3, #0
 8002272:	b2db      	uxtb	r3, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <QPSet_remove>:

//! @public @memberof QPSet
static inline void QPSet_remove(QPSet * const me,
    uint_fast8_t const n)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
#if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	3b01      	subs	r3, #1
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	601a      	str	r2, [r3, #0]
    }
    else {
        (me->bits[1] = (me->bits[1] & ~((QPSetBits)1U << (n - 33U))));
    }
#endif
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <QPSet_findMax>:

//! @public @memberof QPSet
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
#if (QF_MAX_ACTIVE <= 32U)
    return QF_LOG2(me->bits[0]);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	f1c3 0320 	rsb	r3, r3, #32
#else
    return (me->bits[1] != 0U)
        ? (QF_LOG2(me->bits[1]) + 32U)
        : (QF_LOG2(me->bits[0]));
#endif
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <QF_init>:
    QF_CRIT_EXIT();
}

//............................................................................
//! @static @public @memberof QF
void QF_init(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
    QF_bzero_(&QF_priv_,                 sizeof(QF_priv_));
 80022d0:	2140      	movs	r1, #64	@ 0x40
 80022d2:	4808      	ldr	r0, [pc, #32]	@ (80022f4 <QF_init+0x28>)
 80022d4:	f7ff f9f4 	bl	80016c0 <QF_bzero_>
    QF_bzero_(&QV_priv_,                 sizeof(QV_priv_));
 80022d8:	2108      	movs	r1, #8
 80022da:	4807      	ldr	r0, [pc, #28]	@ (80022f8 <QF_init+0x2c>)
 80022dc:	f7ff f9f0 	bl	80016c0 <QF_bzero_>
    QF_bzero_(&QActive_registry_[0],     sizeof(QActive_registry_));
 80022e0:	2184      	movs	r1, #132	@ 0x84
 80022e2:	4806      	ldr	r0, [pc, #24]	@ (80022fc <QF_init+0x30>)
 80022e4:	f7ff f9ec 	bl	80016c0 <QF_bzero_>

    QTimeEvt_init(); // initialize QTimeEvts
 80022e8:	f7ff fedc 	bl	80020a4 <QTimeEvt_init>

#ifdef QV_INIT
    QV_INIT(); // port-specific initialization of the QV kernel
 80022ec:	f7fe f9a6 	bl	800063c <QV_init>
#endif
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000258 	.word	0x20000258
 80022f8:	20000334 	.word	0x20000334
 80022fc:	20000298 	.word	0x20000298

08002300 <QF_run>:
    // nothing else to do for the QV kernel
}

//............................................................................
//! @static @public @memberof QF
int_t QF_run(void) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
    QS_beginRec_((uint_fast8_t)QS_QF_RUN);
    QS_endRec_();
    QF_INT_ENABLE();
#endif // Q_SPY

    QF_onStartup(); // application-specific startup callback
 8002306:	f7fe fc47 	bl	8000b98 <QF_onStartup>

    QF_INT_DISABLE();
 800230a:	f7fe f94f 	bl	80005ac <QF_int_disable_>

#ifdef QV_START
    QV_START(); // port-specific startup of the QV kernel
 800230e:	2300      	movs	r3, #0
 8002310:	f383 8814 	msr	CONTROL, r3

#endif // (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)

    for (;;) { // QV event loop...
        // find the maximum prio. AO ready to run
        uint_fast8_t const p = (QPSet_notEmpty(&QV_priv_.readySet)
 8002314:	481b      	ldr	r0, [pc, #108]	@ (8002384 <QF_run+0x84>)
 8002316:	f7ff ffa2 	bl	800225e <QPSet_notEmpty>
 800231a:	4603      	mov	r3, r0
                               ? QPSet_findMax(&QV_priv_.readySet)
                               : 0U);
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <QF_run+0x2a>
                               ? QPSet_findMax(&QV_priv_.readySet)
 8002320:	4818      	ldr	r0, [pc, #96]	@ (8002384 <QF_run+0x84>)
 8002322:	f7ff ffc3 	bl	80022ac <QPSet_findMax>
 8002326:	4603      	mov	r3, r0
 8002328:	e000      	b.n	800232c <QF_run+0x2c>
                               : 0U);
 800232a:	2300      	movs	r3, #0
        uint_fast8_t const p = (QPSet_notEmpty(&QV_priv_.readySet)
 800232c:	60fb      	str	r3, [r7, #12]

        if (p > QV_priv_.schedCeil) { // is it above the sched ceiling?
 800232e:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <QF_run+0x84>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	d91f      	bls.n	8002378 <QF_run+0x78>
            QActive * const a = QActive_registry_[p];
 8002338:	4a13      	ldr	r2, [pc, #76]	@ (8002388 <QF_run+0x88>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002340:	60bb      	str	r3, [r7, #8]
#endif // QF_ON_CONTEXT_SW

            pprev = p; // update previous prio.
#endif // (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)

            QF_INT_ENABLE();
 8002342:	f7fe f945 	bl	80005d0 <QF_int_enable_>

            QEvt const * const e = QActive_get_(a);
 8002346:	68b8      	ldr	r0, [r7, #8]
 8002348:	f7ff fa50 	bl	80017ec <QActive_get_>
 800234c:	6078      	str	r0, [r7, #4]

            // dispatch event (virtual call)
            (*a->super.vptr->dispatch)(&a->super, e, p);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	68b8      	ldr	r0, [r7, #8]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4798      	blx	r3
#if (QF_MAX_EPOOL > 0U)
            QF_gc(e);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fba1 	bl	8001aa4 <QF_gc>
#endif
            QF_INT_DISABLE();
 8002362:	f7fe f923 	bl	80005ac <QF_int_disable_>

            if (a->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1d2      	bne.n	8002314 <QF_run+0x14>
                QPSet_remove(&QV_priv_.readySet, p);
 800236e:	68f9      	ldr	r1, [r7, #12]
 8002370:	4804      	ldr	r0, [pc, #16]	@ (8002384 <QF_run+0x84>)
 8002372:	f7ff ff85 	bl	8002280 <QPSet_remove>
 8002376:	e7cd      	b.n	8002314 <QF_run+0x14>
            // the determination of the idle condition can change at any time
            // by an interrupt posting events to a queue.
            //
            // NOTE: QV_onIdle() MUST enable interrupts internally, ideally
            // atomically with putting the CPU into a power-saving mode.
            QV_onIdle();
 8002378:	f7fe fc40 	bl	8000bfc <QV_onIdle>

            QF_INT_DISABLE(); // disable interrupts before looping back
 800237c:	f7fe f916 	bl	80005ac <QF_int_disable_>
    for (;;) { // QV event loop...
 8002380:	e7c8      	b.n	8002314 <QF_run+0x14>
 8002382:	bf00      	nop
 8002384:	20000334 	.word	0x20000334
 8002388:	20000298 	.word	0x20000298

0800238c <QActive_start>:
    QEvtPtr * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	460b      	mov	r3, r1
 800239a:	817b      	strh	r3, [r7, #10]
    Q_UNUSED_PAR(stkSto);  // not needed in QV
    Q_UNUSED_PAR(stkSize); // not needed in QV

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800239c:	f7fe f92a 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (me->super.vptr != (struct QAsmVtable *)0)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <QActive_start+0x22>
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <QActive_start+0x2c>
 80023ae:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80023b2:	4811      	ldr	r0, [pc, #68]	@ (80023f8 <QActive_start+0x6c>)
 80023b4:	f7fe fbde 	bl	8000b74 <Q_onError>
        && (stkSto == (void *)0));
    QF_CRIT_EXIT();
 80023b8:	f7fe f92e 	bl	8000618 <QF_crit_exit_>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); // QF-prio. of the AO
 80023bc:	897b      	ldrh	r3, [r7, #10]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	731a      	strb	r2, [r3, #12]
    me->pthre = 0U; // not used
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	735a      	strb	r2, [r3, #13]
    QActive_register_(me); // make QF aware of this active object
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7ff fcec 	bl	8001da8 <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); // init the built-in queue
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3314      	adds	r3, #20
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fd63 	bl	8001ea4 <QEQueue_init>

    // top-most initial tran. (virtual call)
    (*me->super.vptr->init)(&me->super, par, me->prio);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	7b12      	ldrb	r2, [r2, #12]
 80023ea:	6a39      	ldr	r1, [r7, #32]
 80023ec:	4798      	blx	r3
    QS_FLUSH(); // flush the trace buffer to the host
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	08009944 	.word	0x08009944

080023fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <HAL_MspInit+0x4c>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	4a0f      	ldr	r2, [pc, #60]	@ (8002448 <HAL_MspInit+0x4c>)
 800240c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002410:	6453      	str	r3, [r2, #68]	@ 0x44
 8002412:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_MspInit+0x4c>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_MspInit+0x4c>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	4a08      	ldr	r2, [pc, #32]	@ (8002448 <HAL_MspInit+0x4c>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	@ 0x40
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_MspInit+0x4c>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800243a:	2007      	movs	r0, #7
 800243c:	f000 fa6e 	bl	800291c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40023800 	.word	0x40023800

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <NMI_Handler+0x4>

08002454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <MemManage_Handler+0x4>

08002464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <BusFault_Handler+0x4>

0800246c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <UsageFault_Handler+0x4>

08002474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <OTG_FS_IRQHandler+0x10>)
 80024a6:	f000 fd8d 	bl	8002fc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20001824 	.word	0x20001824

080024b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024bc:	4a14      	ldr	r2, [pc, #80]	@ (8002510 <_sbrk+0x5c>)
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <_sbrk+0x60>)
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d0:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <_sbrk+0x64>)
 80024d2:	4a12      	ldr	r2, [pc, #72]	@ (800251c <_sbrk+0x68>)
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d6:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d207      	bcs.n	80024f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e4:	f006 fcae 	bl	8008e44 <__errno>
 80024e8:	4603      	mov	r3, r0
 80024ea:	220c      	movs	r2, #12
 80024ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024f2:	e009      	b.n	8002508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <_sbrk+0x64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	4a05      	ldr	r2, [pc, #20]	@ (8002518 <_sbrk+0x64>)
 8002504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20020000 	.word	0x20020000
 8002514:	00000400 	.word	0x00000400
 8002518:	2000033c 	.word	0x2000033c
 800251c:	20002070 	.word	0x20002070

08002520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <SystemInit+0x20>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	4a05      	ldr	r2, [pc, #20]	@ (8002540 <SystemInit+0x20>)
 800252c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002530:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	2302      	movs	r3, #2
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	2302      	movs	r3, #2
 800255c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800255e:	4b34      	ldr	r3, [pc, #208]	@ (8002630 <SystemCoreClockUpdate+0xec>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b08      	cmp	r3, #8
 800256c:	d011      	beq.n	8002592 <SystemCoreClockUpdate+0x4e>
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d844      	bhi.n	80025fe <SystemCoreClockUpdate+0xba>
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <SystemCoreClockUpdate+0x3e>
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d004      	beq.n	800258a <SystemCoreClockUpdate+0x46>
 8002580:	e03d      	b.n	80025fe <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002582:	4b2c      	ldr	r3, [pc, #176]	@ (8002634 <SystemCoreClockUpdate+0xf0>)
 8002584:	4a2c      	ldr	r2, [pc, #176]	@ (8002638 <SystemCoreClockUpdate+0xf4>)
 8002586:	601a      	str	r2, [r3, #0]
      break;
 8002588:	e03d      	b.n	8002606 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800258a:	4b2a      	ldr	r3, [pc, #168]	@ (8002634 <SystemCoreClockUpdate+0xf0>)
 800258c:	4a2b      	ldr	r2, [pc, #172]	@ (800263c <SystemCoreClockUpdate+0xf8>)
 800258e:	601a      	str	r2, [r3, #0]
      break;
 8002590:	e039      	b.n	8002606 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002592:	4b27      	ldr	r3, [pc, #156]	@ (8002630 <SystemCoreClockUpdate+0xec>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	0d9b      	lsrs	r3, r3, #22
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259e:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <SystemCoreClockUpdate+0xec>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025a6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80025ae:	4a23      	ldr	r2, [pc, #140]	@ (800263c <SystemCoreClockUpdate+0xf8>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002630 <SystemCoreClockUpdate+0xec>)
 80025b8:	6852      	ldr	r2, [r2, #4]
 80025ba:	0992      	lsrs	r2, r2, #6
 80025bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e00b      	b.n	80025e0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80025c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002638 <SystemCoreClockUpdate+0xf4>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	4a17      	ldr	r2, [pc, #92]	@ (8002630 <SystemCoreClockUpdate+0xec>)
 80025d2:	6852      	ldr	r2, [r2, #4]
 80025d4:	0992      	lsrs	r2, r2, #6
 80025d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <SystemCoreClockUpdate+0xec>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	3301      	adds	r3, #1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002634 <SystemCoreClockUpdate+0xf0>)
 80025fa:	6013      	str	r3, [r2, #0]
      break;
 80025fc:	e003      	b.n	8002606 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80025fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <SystemCoreClockUpdate+0xf0>)
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <SystemCoreClockUpdate+0xf4>)
 8002602:	601a      	str	r2, [r3, #0]
      break;
 8002604:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002606:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <SystemCoreClockUpdate+0xec>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	4a0b      	ldr	r2, [pc, #44]	@ (8002640 <SystemCoreClockUpdate+0xfc>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002616:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <SystemCoreClockUpdate+0xf0>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	4a04      	ldr	r2, [pc, #16]	@ (8002634 <SystemCoreClockUpdate+0xf0>)
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40023800 	.word	0x40023800
 8002634:	20000008 	.word	0x20000008
 8002638:	00f42400 	.word	0x00f42400
 800263c:	007a1200 	.word	0x007a1200
 8002640:	08009948 	.word	0x08009948

08002644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002644:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800267c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002648:	f7ff ff6a 	bl	8002520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800264c:	480c      	ldr	r0, [pc, #48]	@ (8002680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800264e:	490d      	ldr	r1, [pc, #52]	@ (8002684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002650:	4a0d      	ldr	r2, [pc, #52]	@ (8002688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002654:	e002      	b.n	800265c <LoopCopyDataInit>

08002656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265a:	3304      	adds	r3, #4

0800265c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800265c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002660:	d3f9      	bcc.n	8002656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002662:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002664:	4c0a      	ldr	r4, [pc, #40]	@ (8002690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002668:	e001      	b.n	800266e <LoopFillZerobss>

0800266a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800266c:	3204      	adds	r2, #4

0800266e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002670:	d3fb      	bcc.n	800266a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002672:	f006 fbed 	bl	8008e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002676:	f7fe fd2d 	bl	80010d4 <main>
  bx  lr    
 800267a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800267c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002684:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8002688:	080099a8 	.word	0x080099a8
  ldr r2, =_sbss
 800268c:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8002690:	20002070 	.word	0x20002070

08002694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002694:	e7fe      	b.n	8002694 <ADC_IRQHandler>
	...

08002698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800269c:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <HAL_Init+0x40>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	@ (80026d8 <HAL_Init+0x40>)
 80026a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026a8:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <HAL_Init+0x40>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0a      	ldr	r2, [pc, #40]	@ (80026d8 <HAL_Init+0x40>)
 80026ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b4:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <HAL_Init+0x40>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a07      	ldr	r2, [pc, #28]	@ (80026d8 <HAL_Init+0x40>)
 80026ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f000 f92b 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c6:	2000      	movs	r0, #0
 80026c8:	f000 f808 	bl	80026dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026cc:	f7ff fe96 	bl	80023fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023c00 	.word	0x40023c00

080026dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <HAL_InitTick+0x54>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <HAL_InitTick+0x58>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f943 	bl	8002986 <HAL_SYSTICK_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e00e      	b.n	8002728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b0f      	cmp	r3, #15
 800270e:	d80a      	bhi.n	8002726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002710:	2200      	movs	r2, #0
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002718:	f000 f90b 	bl	8002932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800271c:	4a06      	ldr	r2, [pc, #24]	@ (8002738 <HAL_InitTick+0x5c>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000008 	.word	0x20000008
 8002734:	20000010 	.word	0x20000010
 8002738:	2000000c 	.word	0x2000000c

0800273c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_IncTick+0x20>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_IncTick+0x24>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4413      	add	r3, r2
 800274c:	4a04      	ldr	r2, [pc, #16]	@ (8002760 <HAL_IncTick+0x24>)
 800274e:	6013      	str	r3, [r2, #0]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000010 	.word	0x20000010
 8002760:	20000340 	.word	0x20000340

08002764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return uwTick;
 8002768:	4b03      	ldr	r3, [pc, #12]	@ (8002778 <HAL_GetTick+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000340 	.word	0x20000340

0800277c <__NVIC_SetPriorityGrouping>:
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ae:	4a04      	ldr	r2, [pc, #16]	@ (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60d3      	str	r3, [r2, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_GetPriorityGrouping>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_EnableIRQ>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db0b      	blt.n	800280a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4907      	ldr	r1, [pc, #28]	@ (8002818 <__NVIC_EnableIRQ+0x38>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	490c      	ldr	r1, [pc, #48]	@ (8002868 <__NVIC_SetPriority+0x4c>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4908      	ldr	r1, [pc, #32]	@ (800286c <__NVIC_SetPriority+0x50>)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3b04      	subs	r3, #4
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	@ 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b04      	cmp	r3, #4
 800288c:	bf28      	it	cs
 800288e:	2304      	movcs	r3, #4
 8002890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3304      	adds	r3, #4
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b03      	subs	r3, #3
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	4313      	orrs	r3, r2
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	@ 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <SysTick_Config>:
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028fc:	f7ff ff8e 	bl	800281c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002906:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff29 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff3e 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff8e 	bl	8002870 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5d 	bl	800281c <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff31 	bl	80027e0 <__NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ffa2 	bl	80028d8 <SysTick_Config>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e16b      	b.n	8002c94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f040 815a 	bne.w	8002c8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d005      	beq.n	80029f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d130      	bne.n	8002a54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2203      	movs	r2, #3
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a28:	2201      	movs	r2, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 0201 	and.w	r2, r3, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d017      	beq.n	8002a90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d123      	bne.n	8002ae4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	08da      	lsrs	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3208      	adds	r2, #8
 8002aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3208      	adds	r2, #8
 8002ade:	69b9      	ldr	r1, [r7, #24]
 8002ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80b4 	beq.w	8002c8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b60      	ldr	r3, [pc, #384]	@ (8002cac <HAL_GPIO_Init+0x30c>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8002cac <HAL_GPIO_Init+0x30c>)
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b36:	4b5d      	ldr	r3, [pc, #372]	@ (8002cac <HAL_GPIO_Init+0x30c>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b42:	4a5b      	ldr	r2, [pc, #364]	@ (8002cb0 <HAL_GPIO_Init+0x310>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a52      	ldr	r2, [pc, #328]	@ (8002cb4 <HAL_GPIO_Init+0x314>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d02b      	beq.n	8002bc6 <HAL_GPIO_Init+0x226>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a51      	ldr	r2, [pc, #324]	@ (8002cb8 <HAL_GPIO_Init+0x318>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d025      	beq.n	8002bc2 <HAL_GPIO_Init+0x222>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a50      	ldr	r2, [pc, #320]	@ (8002cbc <HAL_GPIO_Init+0x31c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01f      	beq.n	8002bbe <HAL_GPIO_Init+0x21e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4f      	ldr	r2, [pc, #316]	@ (8002cc0 <HAL_GPIO_Init+0x320>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d019      	beq.n	8002bba <HAL_GPIO_Init+0x21a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4e      	ldr	r2, [pc, #312]	@ (8002cc4 <HAL_GPIO_Init+0x324>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <HAL_GPIO_Init+0x216>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4d      	ldr	r2, [pc, #308]	@ (8002cc8 <HAL_GPIO_Init+0x328>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00d      	beq.n	8002bb2 <HAL_GPIO_Init+0x212>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4c      	ldr	r2, [pc, #304]	@ (8002ccc <HAL_GPIO_Init+0x32c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <HAL_GPIO_Init+0x20e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8002cd0 <HAL_GPIO_Init+0x330>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <HAL_GPIO_Init+0x20a>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e00e      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002baa:	2308      	movs	r3, #8
 8002bac:	e00c      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bae:	2306      	movs	r3, #6
 8002bb0:	e00a      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bb2:	2305      	movs	r3, #5
 8002bb4:	e008      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e004      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e002      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	f002 0203 	and.w	r2, r2, #3
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	4093      	lsls	r3, r2
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd8:	4935      	ldr	r1, [pc, #212]	@ (8002cb0 <HAL_GPIO_Init+0x310>)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd4 <HAL_GPIO_Init+0x334>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0a:	4a32      	ldr	r2, [pc, #200]	@ (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c10:	4b30      	ldr	r3, [pc, #192]	@ (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c34:	4a27      	ldr	r2, [pc, #156]	@ (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3a:	4b26      	ldr	r3, [pc, #152]	@ (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c64:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c88:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3301      	adds	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b0f      	cmp	r3, #15
 8002c98:	f67f ae90 	bls.w	80029bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3724      	adds	r7, #36	@ 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020c00 	.word	0x40020c00
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40021400 	.word	0x40021400
 8002ccc:	40021800 	.word	0x40021800
 8002cd0:	40021c00 	.word	0x40021c00
 8002cd4:	40013c00 	.word	0x40013c00

08002cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce8:	787b      	ldrb	r3, [r7, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf4:	e003      	b.n	8002cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	041a      	lsls	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	619a      	str	r2, [r3, #24]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d16:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d22:	4a05      	ldr	r2, [pc, #20]	@ (8002d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fd7a 	bl	8000824 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40013c00 	.word	0x40013c00

08002d3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e101      	b.n	8002f52 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d106      	bne.n	8002d6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f005 fd07 	bl	800877c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2203      	movs	r2, #3
 8002d72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d7c:	d102      	bne.n	8002d84 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 ffb0 	bl	8004cee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7c1a      	ldrb	r2, [r3, #16]
 8002d96:	f88d 2000 	strb.w	r2, [sp]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d9e:	f001 fe8f 	bl	8004ac0 <USB_CoreInit>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0ce      	b.n	8002f52 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 ffa8 	bl	8004d10 <USB_SetCurrentMode>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0bf      	b.n	8002f52 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	e04a      	b.n	8002e6e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3315      	adds	r3, #21
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	b298      	uxth	r0, r3
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	332e      	adds	r3, #46	@ 0x2e
 8002e14:	4602      	mov	r2, r0
 8002e16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3318      	adds	r3, #24
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	331c      	adds	r3, #28
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3320      	adds	r3, #32
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3324      	adds	r3, #36	@ 0x24
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	791b      	ldrb	r3, [r3, #4]
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d3af      	bcc.n	8002dd8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	e044      	b.n	8002f08 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	3301      	adds	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	791b      	ldrb	r3, [r3, #4]
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d3b5      	bcc.n	8002e7e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7c1a      	ldrb	r2, [r3, #16]
 8002f1a:	f88d 2000 	strb.w	r2, [sp]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f22:	f001 ff41 	bl	8004da8 <USB_DevInit>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e00c      	b.n	8002f52 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 ff8b 	bl	8005e66 <USB_DevDisconnect>

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_PCD_Start+0x1c>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e022      	b.n	8002fbc <HAL_PCD_Start+0x62>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f96:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 fe92 	bl	8004ccc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 ff39 	bl	8005e24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b08d      	sub	sp, #52	@ 0x34
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 fff7 	bl	8005fce <USB_GetMode>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 848c 	bne.w	8003900 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 ff5b 	bl	8005ea8 <USB_ReadInterrupts>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8482 	beq.w	80038fe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f002 ff48 	bl	8005ea8 <USB_ReadInterrupts>
 8003018:	4603      	mov	r3, r0
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f002 0202 	and.w	r2, r2, #2
 8003030:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f002 ff36 	bl	8005ea8 <USB_ReadInterrupts>
 800303c:	4603      	mov	r3, r0
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b10      	cmp	r3, #16
 8003044:	d161      	bne.n	800310a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0210 	bic.w	r2, r2, #16
 8003054:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	f003 020f 	and.w	r2, r3, #15
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	3304      	adds	r3, #4
 8003074:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800307c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003080:	d124      	bne.n	80030cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d035      	beq.n	80030fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800309c:	b29b      	uxth	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	6a38      	ldr	r0, [r7, #32]
 80030a2:	f002 fd6d 	bl	8005b80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030b2:	441a      	add	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030c4:	441a      	add	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	615a      	str	r2, [r3, #20]
 80030ca:	e016      	b.n	80030fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80030d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030d6:	d110      	bne.n	80030fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030de:	2208      	movs	r2, #8
 80030e0:	4619      	mov	r1, r3
 80030e2:	6a38      	ldr	r0, [r7, #32]
 80030e4:	f002 fd4c 	bl	8005b80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030f4:	441a      	add	r2, r3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0210 	orr.w	r2, r2, #16
 8003108:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f002 feca 	bl	8005ea8 <USB_ReadInterrupts>
 8003114:	4603      	mov	r3, r0
 8003116:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800311a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800311e:	f040 80a7 	bne.w	8003270 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f002 fecf 	bl	8005ece <USB_ReadDevAllOutEpInterrupt>
 8003130:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003132:	e099      	b.n	8003268 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 808e 	beq.w	800325c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f002 fef3 	bl	8005f36 <USB_ReadDevOutEPInterrupt>
 8003150:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00c      	beq.n	8003176 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003168:	461a      	mov	r2, r3
 800316a:	2301      	movs	r3, #1
 800316c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800316e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fea3 	bl	8003ebc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00c      	beq.n	800319a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800318c:	461a      	mov	r2, r3
 800318e:	2308      	movs	r3, #8
 8003190:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003192:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 ff79 	bl	800408c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031b0:	461a      	mov	r2, r3
 80031b2:	2310      	movs	r3, #16
 80031b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d030      	beq.n	8003222 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c8:	2b80      	cmp	r3, #128	@ 0x80
 80031ca:	d109      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80031e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	78db      	ldrb	r3, [r3, #3]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d108      	bne.n	8003210 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2200      	movs	r2, #0
 8003202:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f005 fbbc 	bl	8008988 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	2302      	movs	r3, #2
 8003220:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003238:	461a      	mov	r2, r3
 800323a:	2320      	movs	r3, #32
 800323c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d009      	beq.n	800325c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003254:	461a      	mov	r2, r3
 8003256:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800325a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	3301      	adds	r3, #1
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	f47f af62 	bne.w	8003134 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f002 fe17 	bl	8005ea8 <USB_ReadInterrupts>
 800327a:	4603      	mov	r3, r0
 800327c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003280:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003284:	f040 80db 	bne.w	800343e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f002 fe38 	bl	8005f02 <USB_ReadDevAllInEpInterrupt>
 8003292:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003298:	e0cd      	b.n	8003436 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800329a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80c2 	beq.w	800342a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f002 fe5e 	bl	8005f72 <USB_ReadDevInEPInterrupt>
 80032b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d057      	beq.n	8003372 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	2201      	movs	r2, #1
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69f9      	ldr	r1, [r7, #28]
 80032de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032e2:	4013      	ands	r3, r2
 80032e4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032f2:	461a      	mov	r2, r3
 80032f4:	2301      	movs	r3, #1
 80032f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	799b      	ldrb	r3, [r3, #6]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d132      	bne.n	8003366 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3320      	adds	r3, #32
 8003310:	6819      	ldr	r1, [r3, #0]
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4403      	add	r3, r0
 8003320:	331c      	adds	r3, #28
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4419      	add	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4403      	add	r3, r0
 8003334:	3320      	adds	r3, #32
 8003336:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d113      	bne.n	8003366 <HAL_PCD_IRQHandler+0x3a2>
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	3324      	adds	r3, #36	@ 0x24
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d108      	bne.n	8003366 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800335e:	461a      	mov	r2, r3
 8003360:	2101      	movs	r1, #1
 8003362:	f002 fe65 	bl	8006030 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	b2db      	uxtb	r3, r3
 800336a:	4619      	mov	r1, r3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f005 fa86 	bl	800887e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003388:	461a      	mov	r2, r3
 800338a:	2308      	movs	r3, #8
 800338c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033a4:	461a      	mov	r2, r3
 80033a6:	2310      	movs	r3, #16
 80033a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033c0:	461a      	mov	r2, r3
 80033c2:	2340      	movs	r3, #64	@ 0x40
 80033c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d023      	beq.n	8003418 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033d2:	6a38      	ldr	r0, [r7, #32]
 80033d4:	f001 fe4c 	bl	8005070 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	3310      	adds	r3, #16
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	3304      	adds	r3, #4
 80033ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	78db      	ldrb	r3, [r3, #3]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d108      	bne.n	8003406 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2200      	movs	r2, #0
 80033f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4619      	mov	r1, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f005 fad3 	bl	80089ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003412:	461a      	mov	r2, r3
 8003414:	2302      	movs	r3, #2
 8003416:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003422:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fcbd 	bl	8003da4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	3301      	adds	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	f47f af2e 	bne.w	800329a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f002 fd30 	bl	8005ea8 <USB_ReadInterrupts>
 8003448:	4603      	mov	r3, r0
 800344a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800344e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003452:	d122      	bne.n	800349a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800346e:	2b01      	cmp	r3, #1
 8003470:	d108      	bne.n	8003484 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800347a:	2100      	movs	r1, #0
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fea3 	bl	80041c8 <HAL_PCDEx_LPM_Callback>
 8003482:	e002      	b.n	800348a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f005 fa71 	bl	800896c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 fd02 	bl	8005ea8 <USB_ReadInterrupts>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ae:	d112      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d102      	bne.n	80034c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f005 fa2d 	bl	8008920 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80034d4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f002 fce4 	bl	8005ea8 <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ea:	f040 80b7 	bne.w	800365c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2110      	movs	r1, #16
 8003508:	4618      	mov	r0, r3
 800350a:	f001 fdb1 	bl	8005070 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003512:	e046      	b.n	80035a2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003520:	461a      	mov	r2, r3
 8003522:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003526:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	440a      	add	r2, r1
 800353e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003542:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003546:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800355a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800356c:	0151      	lsls	r1, r2, #5
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	440a      	add	r2, r1
 8003572:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003576:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800357a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800357c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800358c:	0151      	lsls	r1, r2, #5
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	440a      	add	r2, r1
 8003592:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003596:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800359a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800359c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359e:	3301      	adds	r3, #1
 80035a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	461a      	mov	r2, r3
 80035a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d3b2      	bcc.n	8003514 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035bc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80035c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	7bdb      	ldrb	r3, [r3, #15]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035da:	f043 030b 	orr.w	r3, r3, #11
 80035de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035f0:	f043 030b 	orr.w	r3, r3, #11
 80035f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035f6:	e015      	b.n	8003624 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003606:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800360a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800360e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800361e:	f043 030b 	orr.w	r3, r3, #11
 8003622:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003632:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003636:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003646:	461a      	mov	r2, r3
 8003648:	f002 fcf2 	bl	8006030 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800365a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f002 fc21 	bl	8005ea8 <USB_ReadInterrupts>
 8003666:	4603      	mov	r3, r0
 8003668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800366c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003670:	d123      	bne.n	80036ba <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f002 fcb7 	bl	8005fea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f001 fd6e 	bl	8005162 <USB_GetDevSpeed>
 8003686:	4603      	mov	r3, r0
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681c      	ldr	r4, [r3, #0]
 8003692:	f001 fa09 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8003696:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800369c:	461a      	mov	r2, r3
 800369e:	4620      	mov	r0, r4
 80036a0:	f001 fa72 	bl	8004b88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f005 f912 	bl	80088ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80036b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f002 fbf2 	bl	8005ea8 <USB_ReadInterrupts>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d10a      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f005 f8ef 	bl	80088b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f002 0208 	and.w	r2, r2, #8
 80036e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 fbdd 	bl	8005ea8 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f4:	2b80      	cmp	r3, #128	@ 0x80
 80036f6:	d123      	bne.n	8003740 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003704:	2301      	movs	r3, #1
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
 8003708:	e014      	b.n	8003734 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d105      	bne.n	800372e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	b2db      	uxtb	r3, r3
 8003726:	4619      	mov	r1, r3
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fb0a 	bl	8003d42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	3301      	adds	r3, #1
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	791b      	ldrb	r3, [r3, #4]
 8003738:	461a      	mov	r2, r3
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	4293      	cmp	r3, r2
 800373e:	d3e4      	bcc.n	800370a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f002 fbaf 	bl	8005ea8 <USB_ReadInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003750:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003754:	d13c      	bne.n	80037d0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003756:	2301      	movs	r3, #1
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
 800375a:	e02b      	b.n	80037b4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	3318      	adds	r3, #24
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d115      	bne.n	80037ae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003782:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003784:	2b00      	cmp	r3, #0
 8003786:	da12      	bge.n	80037ae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3317      	adds	r3, #23
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 faca 	bl	8003d42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	3301      	adds	r3, #1
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	791b      	ldrb	r3, [r3, #4]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	4293      	cmp	r3, r2
 80037be:	d3cd      	bcc.n	800375c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80037ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f002 fb67 	bl	8005ea8 <USB_ReadInterrupts>
 80037da:	4603      	mov	r3, r0
 80037dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e4:	d156      	bne.n	8003894 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037e6:	2301      	movs	r3, #1
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ea:	e045      	b.n	8003878 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d12e      	bne.n	8003872 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003814:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003816:	2b00      	cmp	r3, #0
 8003818:	da2b      	bge.n	8003872 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003826:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800382a:	429a      	cmp	r2, r3
 800382c:	d121      	bne.n	8003872 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800386a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800386e:	6053      	str	r3, [r2, #4]
            break;
 8003870:	e008      	b.n	8003884 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	3301      	adds	r3, #1
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	791b      	ldrb	r3, [r3, #4]
 800387c:	461a      	mov	r2, r3
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	4293      	cmp	r3, r2
 8003882:	d3b3      	bcc.n	80037ec <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f002 fb05 	bl	8005ea8 <USB_ReadInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a8:	d10a      	bne.n	80038c0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f005 f890 	bl	80089d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80038be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f002 faef 	bl	8005ea8 <USB_ReadInterrupts>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d115      	bne.n	8003900 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f005 f880 	bl	80089ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	e000      	b.n	8003900 <HAL_PCD_IRQHandler+0x93c>
      return;
 80038fe:	bf00      	nop
    }
  }
}
 8003900:	3734      	adds	r7, #52	@ 0x34
 8003902:	46bd      	mov	sp, r7
 8003904:	bd90      	pop	{r4, r7, pc}

08003906 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_PCD_SetAddress+0x1a>
 800391c:	2302      	movs	r3, #2
 800391e:	e012      	b.n	8003946 <HAL_PCD_SetAddress+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fa4e 	bl	8005dd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	4608      	mov	r0, r1
 8003958:	4611      	mov	r1, r2
 800395a:	461a      	mov	r2, r3
 800395c:	4603      	mov	r3, r0
 800395e:	70fb      	strb	r3, [r7, #3]
 8003960:	460b      	mov	r3, r1
 8003962:	803b      	strh	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800396c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003970:	2b00      	cmp	r3, #0
 8003972:	da0f      	bge.n	8003994 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	3310      	adds	r3, #16
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	3304      	adds	r3, #4
 800398a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	705a      	strb	r2, [r3, #1]
 8003992:	e00f      	b.n	80039b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f003 020f 	and.w	r2, r3, #15
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	3304      	adds	r3, #4
 80039ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80039c0:	883b      	ldrh	r3, [r7, #0]
 80039c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	78ba      	ldrb	r2, [r7, #2]
 80039ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d004      	beq.n	80039e2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039e2:	78bb      	ldrb	r3, [r7, #2]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d102      	bne.n	80039ee <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_PCD_EP_Open+0xae>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e00e      	b.n	8003a1a <HAL_PCD_EP_Open+0xcc>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68f9      	ldr	r1, [r7, #12]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fbce 	bl	80051ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a18:	7afb      	ldrb	r3, [r7, #11]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	da0f      	bge.n	8003a56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 020f 	and.w	r2, r3, #15
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	3310      	adds	r3, #16
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	705a      	strb	r2, [r3, #1]
 8003a54:	e00f      	b.n	8003a76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_PCD_EP_Close+0x6e>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e00e      	b.n	8003aae <HAL_PCD_EP_Close+0x8c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 fc0c 	bl	80052bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	3304      	adds	r3, #4
 8003ade:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2200      	movs	r2, #0
 8003af0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af8:	7afb      	ldrb	r3, [r7, #11]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	799b      	ldrb	r3, [r3, #6]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d102      	bne.n	8003b12 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	799b      	ldrb	r3, [r3, #6]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6979      	ldr	r1, [r7, #20]
 8003b1e:	f001 fca9 	bl	8005474 <USB_EPStartXfer>

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 020f 	and.w	r2, r3, #15
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6c:	7afb      	ldrb	r3, [r7, #11]
 8003b6e:	f003 020f 	and.w	r2, r3, #15
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	3310      	adds	r3, #16
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	3304      	adds	r3, #4
 8003b82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2200      	movs	r2, #0
 8003b94:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b9c:	7afb      	ldrb	r3, [r7, #11]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	799b      	ldrb	r3, [r3, #6]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d102      	bne.n	8003bb6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	799b      	ldrb	r3, [r3, #6]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6979      	ldr	r1, [r7, #20]
 8003bc2:	f001 fc57 	bl	8005474 <USB_EPStartXfer>

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	7912      	ldrb	r2, [r2, #4]
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e04f      	b.n	8003c8e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da0f      	bge.n	8003c16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	f003 020f 	and.w	r2, r3, #15
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	3310      	adds	r3, #16
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	705a      	strb	r2, [r3, #1]
 8003c14:	e00d      	b.n	8003c32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	3304      	adds	r3, #4
 8003c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_PCD_EP_SetStall+0x82>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e01d      	b.n	8003c8e <HAL_PCD_EP_SetStall+0xbe>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 ffe5 	bl	8005c30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7999      	ldrb	r1, [r3, #6]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f002 f9d6 	bl	8006030 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	7912      	ldrb	r2, [r2, #4]
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e042      	b.n	8003d3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	da0f      	bge.n	8003cdc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 020f 	and.w	r2, r3, #15
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	3310      	adds	r3, #16
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	705a      	strb	r2, [r3, #1]
 8003cda:	e00f      	b.n	8003cfc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	f003 020f 	and.w	r2, r3, #15
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_PCD_EP_ClrStall+0x86>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e00e      	b.n	8003d3a <HAL_PCD_EP_ClrStall+0xa4>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68f9      	ldr	r1, [r7, #12]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 ffee 	bl	8005d0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da0c      	bge.n	8003d70 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	f003 020f 	and.w	r2, r3, #15
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	3310      	adds	r3, #16
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e00c      	b.n	8003d8a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	f003 020f 	and.w	r2, r3, #15
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4413      	add	r3, r2
 8003d86:	3304      	adds	r3, #4
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fe0d 	bl	80059b0 <USB_EPStopXfer>
 8003d96:	4603      	mov	r3, r0
 8003d98:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	@ 0x28
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	3310      	adds	r3, #16
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3304      	adds	r3, #4
 8003dca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d901      	bls.n	8003ddc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e06b      	b.n	8003eb4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d902      	bls.n	8003df8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3303      	adds	r3, #3
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e00:	e02a      	b.n	8003e58 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d902      	bls.n	8003e1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3303      	adds	r3, #3
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	68d9      	ldr	r1, [r3, #12]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	4603      	mov	r3, r0
 8003e3a:	6978      	ldr	r0, [r7, #20]
 8003e3c:	f001 fe62 	bl	8005b04 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	441a      	add	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d809      	bhi.n	8003e82 <PCD_WriteEmptyTxFifo+0xde>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d203      	bcs.n	8003e82 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1bf      	bne.n	8003e02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d811      	bhi.n	8003eb2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	2201      	movs	r2, #1
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003eae:	4013      	ands	r3, r2
 8003eb0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	333c      	adds	r3, #60	@ 0x3c
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	799b      	ldrb	r3, [r3, #6]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d17b      	bne.n	8003fea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	4a61      	ldr	r2, [pc, #388]	@ (8004084 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	f240 80b9 	bls.w	8004078 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80b3 	beq.w	8004078 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f24:	6093      	str	r3, [r2, #8]
 8003f26:	e0a7      	b.n	8004078 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2320      	movs	r3, #32
 8003f42:	6093      	str	r3, [r2, #8]
 8003f44:	e098      	b.n	8004078 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 8093 	bne.w	8004078 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	4a4b      	ldr	r2, [pc, #300]	@ (8004084 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d90f      	bls.n	8003f7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f70:	461a      	mov	r2, r3
 8003f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f76:	6093      	str	r3, [r2, #8]
 8003f78:	e07e      	b.n	8004078 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a1a      	ldr	r2, [r3, #32]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	0159      	lsls	r1, r3, #5
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa6:	1ad2      	subs	r2, r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d114      	bne.n	8003fdc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	f002 f832 	bl	8006030 <USB_EP0_OutStart>
 8003fcc:	e006      	b.n	8003fdc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	441a      	add	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f004 fc30 	bl	8008848 <HAL_PCD_DataOutStageCallback>
 8003fe8:	e046      	b.n	8004078 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	4a26      	ldr	r2, [pc, #152]	@ (8004088 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d124      	bne.n	800403c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004008:	461a      	mov	r2, r3
 800400a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800400e:	6093      	str	r3, [r2, #8]
 8004010:	e032      	b.n	8004078 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004028:	461a      	mov	r2, r3
 800402a:	2320      	movs	r3, #32
 800402c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f004 fc07 	bl	8008848 <HAL_PCD_DataOutStageCallback>
 800403a:	e01d      	b.n	8004078 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d114      	bne.n	800406c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004064:	461a      	mov	r2, r3
 8004066:	2100      	movs	r1, #0
 8004068:	f001 ffe2 	bl	8006030 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f004 fbe8 	bl	8008848 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	4f54300a 	.word	0x4f54300a
 8004088:	4f54310a 	.word	0x4f54310a

0800408c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	333c      	adds	r3, #60	@ 0x3c
 80040a4:	3304      	adds	r3, #4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4a15      	ldr	r2, [pc, #84]	@ (8004114 <PCD_EP_OutSetupPacket_int+0x88>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d90e      	bls.n	80040e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d8:	461a      	mov	r2, r3
 80040da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f004 fb9f 	bl	8008824 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004114 <PCD_EP_OutSetupPacket_int+0x88>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d90c      	bls.n	8004108 <PCD_EP_OutSetupPacket_int+0x7c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	799b      	ldrb	r3, [r3, #6]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d108      	bne.n	8004108 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004100:	461a      	mov	r2, r3
 8004102:	2101      	movs	r1, #1
 8004104:	f001 ff94 	bl	8006030 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	4f54300a 	.word	0x4f54300a

08004118 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
 8004124:	4613      	mov	r3, r2
 8004126:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d107      	bne.n	8004146 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004136:	883b      	ldrh	r3, [r7, #0]
 8004138:	0419      	lsls	r1, r3, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	430a      	orrs	r2, r1
 8004142:	629a      	str	r2, [r3, #40]	@ 0x28
 8004144:	e028      	b.n	8004198 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4413      	add	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004154:	2300      	movs	r3, #0
 8004156:	73fb      	strb	r3, [r7, #15]
 8004158:	e00d      	b.n	8004176 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	3340      	adds	r3, #64	@ 0x40
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	4413      	add	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	3301      	adds	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	3b01      	subs	r3, #1
 800417c:	429a      	cmp	r2, r3
 800417e:	d3ec      	bcc.n	800415a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004180:	883b      	ldrh	r3, [r7, #0]
 8004182:	0418      	lsls	r0, r3, #16
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6819      	ldr	r1, [r3, #0]
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	3b01      	subs	r3, #1
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	4302      	orrs	r2, r0
 8004190:	3340      	adds	r3, #64	@ 0x40
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	887a      	ldrh	r2, [r7, #2]
 80041b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e267      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d075      	beq.n	80042ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041fe:	4b88      	ldr	r3, [pc, #544]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b04      	cmp	r3, #4
 8004208:	d00c      	beq.n	8004224 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420a:	4b85      	ldr	r3, [pc, #532]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004212:	2b08      	cmp	r3, #8
 8004214:	d112      	bne.n	800423c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004216:	4b82      	ldr	r3, [pc, #520]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004222:	d10b      	bne.n	800423c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	4b7e      	ldr	r3, [pc, #504]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d05b      	beq.n	80042e8 <HAL_RCC_OscConfig+0x108>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d157      	bne.n	80042e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e242      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004244:	d106      	bne.n	8004254 <HAL_RCC_OscConfig+0x74>
 8004246:	4b76      	ldr	r3, [pc, #472]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a75      	ldr	r2, [pc, #468]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e01d      	b.n	8004290 <HAL_RCC_OscConfig+0xb0>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x98>
 800425e:	4b70      	ldr	r3, [pc, #448]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a6f      	ldr	r2, [pc, #444]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b6d      	ldr	r3, [pc, #436]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6c      	ldr	r2, [pc, #432]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0xb0>
 8004278:	4b69      	ldr	r3, [pc, #420]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a68      	ldr	r2, [pc, #416]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800427e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b66      	ldr	r3, [pc, #408]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a65      	ldr	r2, [pc, #404]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800428a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800428e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fe fa64 	bl	8002764 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fe fa60 	bl	8002764 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	@ 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e207      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0xc0>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe fa50 	bl	8002764 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fe fa4c 	bl	8002764 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e1f3      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042da:	4b51      	ldr	r3, [pc, #324]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0xe8>
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d063      	beq.n	80043be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004302:	4b47      	ldr	r3, [pc, #284]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800430a:	2b08      	cmp	r3, #8
 800430c:	d11c      	bne.n	8004348 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430e:	4b44      	ldr	r3, [pc, #272]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d116      	bne.n	8004348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431a:	4b41      	ldr	r3, [pc, #260]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_RCC_OscConfig+0x152>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e1c7      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004332:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4937      	ldr	r1, [pc, #220]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004346:	e03a      	b.n	80043be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004350:	4b34      	ldr	r3, [pc, #208]	@ (8004424 <HAL_RCC_OscConfig+0x244>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004356:	f7fe fa05 	bl	8002764 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435e:	f7fe fa01 	bl	8002764 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e1a8      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004370:	4b2b      	ldr	r3, [pc, #172]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b28      	ldr	r3, [pc, #160]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4925      	ldr	r1, [pc, #148]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 800438c:	4313      	orrs	r3, r2
 800438e:	600b      	str	r3, [r1, #0]
 8004390:	e015      	b.n	80043be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004392:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <HAL_RCC_OscConfig+0x244>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe f9e4 	bl	8002764 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a0:	f7fe f9e0 	bl	8002764 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e187      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d036      	beq.n	8004438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d016      	beq.n	8004400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d2:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <HAL_RCC_OscConfig+0x248>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fe f9c4 	bl	8002764 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fe f9c0 	bl	8002764 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e167      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_RCC_OscConfig+0x240>)
 80043f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x200>
 80043fe:	e01b      	b.n	8004438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004400:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_RCC_OscConfig+0x248>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004406:	f7fe f9ad 	bl	8002764 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	e00e      	b.n	800442c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440e:	f7fe f9a9 	bl	8002764 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d907      	bls.n	800442c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e150      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
 8004420:	40023800 	.word	0x40023800
 8004424:	42470000 	.word	0x42470000
 8004428:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442c:	4b88      	ldr	r3, [pc, #544]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800442e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ea      	bne.n	800440e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8097 	beq.w	8004574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444a:	4b81      	ldr	r3, [pc, #516]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	4b7d      	ldr	r3, [pc, #500]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	4a7c      	ldr	r2, [pc, #496]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004464:	6413      	str	r3, [r2, #64]	@ 0x40
 8004466:	4b7a      	ldr	r3, [pc, #488]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004476:	4b77      	ldr	r3, [pc, #476]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d118      	bne.n	80044b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004482:	4b74      	ldr	r3, [pc, #464]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a73      	ldr	r2, [pc, #460]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448e:	f7fe f969 	bl	8002764 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7fe f965 	bl	8002764 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e10c      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <HAL_RCC_OscConfig+0x474>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x2ea>
 80044bc:	4b64      	ldr	r3, [pc, #400]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c0:	4a63      	ldr	r2, [pc, #396]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c8:	e01c      	b.n	8004504 <HAL_RCC_OscConfig+0x324>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0x30c>
 80044d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044d8:	f043 0304 	orr.w	r3, r3, #4
 80044dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80044de:	4b5c      	ldr	r3, [pc, #368]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0x324>
 80044ec:	4b58      	ldr	r3, [pc, #352]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f0:	4a57      	ldr	r2, [pc, #348]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f8:	4b55      	ldr	r3, [pc, #340]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fc:	4a54      	ldr	r2, [pc, #336]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80044fe:	f023 0304 	bic.w	r3, r3, #4
 8004502:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fe f92a 	bl	8002764 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004512:	e00a      	b.n	800452a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fe f926 	bl	8002764 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0cb      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452a:	4b49      	ldr	r3, [pc, #292]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ee      	beq.n	8004514 <HAL_RCC_OscConfig+0x334>
 8004536:	e014      	b.n	8004562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004538:	f7fe f914 	bl	8002764 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fe f910 	bl	8002764 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0b5      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004556:	4b3e      	ldr	r3, [pc, #248]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1ee      	bne.n	8004540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004568:	4b39      	ldr	r3, [pc, #228]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	4a38      	ldr	r2, [pc, #224]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800456e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004572:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80a1 	beq.w	80046c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800457e:	4b34      	ldr	r3, [pc, #208]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b08      	cmp	r3, #8
 8004588:	d05c      	beq.n	8004644 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d141      	bne.n	8004616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004592:	4b31      	ldr	r3, [pc, #196]	@ (8004658 <HAL_RCC_OscConfig+0x478>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe f8e4 	bl	8002764 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fe f8e0 	bl	8002764 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e087      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	4b27      	ldr	r3, [pc, #156]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	085b      	lsrs	r3, r3, #1
 80045d6:	3b01      	subs	r3, #1
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	491b      	ldr	r1, [pc, #108]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004658 <HAL_RCC_OscConfig+0x478>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fe f8b9 	bl	8002764 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fe f8b5 	bl	8002764 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e05c      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004608:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x416>
 8004614:	e054      	b.n	80046c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004616:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <HAL_RCC_OscConfig+0x478>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fe f8a2 	bl	8002764 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004624:	f7fe f89e 	bl	8002764 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e045      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_RCC_OscConfig+0x470>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x444>
 8004642:	e03d      	b.n	80046c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d107      	bne.n	800465c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e038      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
 8004650:	40023800 	.word	0x40023800
 8004654:	40007000 	.word	0x40007000
 8004658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800465c:	4b1b      	ldr	r3, [pc, #108]	@ (80046cc <HAL_RCC_OscConfig+0x4ec>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d028      	beq.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d121      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d11a      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800468c:	4013      	ands	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004694:	4293      	cmp	r3, r2
 8004696:	d111      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d107      	bne.n	80046bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0cc      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e4:	4b68      	ldr	r3, [pc, #416]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d90c      	bls.n	800470c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b65      	ldr	r3, [pc, #404]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b63      	ldr	r3, [pc, #396]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0b8      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d020      	beq.n	800475a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004724:	4b59      	ldr	r3, [pc, #356]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a58      	ldr	r2, [pc, #352]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800472e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800473c:	4b53      	ldr	r3, [pc, #332]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4a52      	ldr	r2, [pc, #328]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004748:	4b50      	ldr	r3, [pc, #320]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	494d      	ldr	r1, [pc, #308]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d044      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b47      	ldr	r3, [pc, #284]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d119      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d003      	beq.n	800478e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478a:	2b03      	cmp	r3, #3
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	4b3f      	ldr	r3, [pc, #252]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e06f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479e:	4b3b      	ldr	r3, [pc, #236]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e067      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ae:	4b37      	ldr	r3, [pc, #220]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4934      	ldr	r1, [pc, #208]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c0:	f7fd ffd0 	bl	8002764 <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	e00a      	b.n	80047de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c8:	f7fd ffcc 	bl	8002764 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e04f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	4b2b      	ldr	r3, [pc, #172]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 020c 	and.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1eb      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f0:	4b25      	ldr	r3, [pc, #148]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d20c      	bcs.n	8004818 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b22      	ldr	r3, [pc, #136]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e032      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004824:	4b19      	ldr	r3, [pc, #100]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4916      	ldr	r1, [pc, #88]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004842:	4b12      	ldr	r3, [pc, #72]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	490e      	ldr	r1, [pc, #56]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004856:	f000 f821 	bl	800489c <HAL_RCC_GetSysClockFreq>
 800485a:	4602      	mov	r2, r0
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	490a      	ldr	r1, [pc, #40]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	5ccb      	ldrb	r3, [r1, r3]
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004872:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fd ff30 	bl	80026dc <HAL_InitTick>

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023c00 	.word	0x40023c00
 800488c:	40023800 	.word	0x40023800
 8004890:	08009948 	.word	0x08009948
 8004894:	20000008 	.word	0x20000008
 8004898:	2000000c 	.word	0x2000000c

0800489c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800489c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a0:	b094      	sub	sp, #80	@ 0x50
 80048a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b4:	4b79      	ldr	r3, [pc, #484]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d00d      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x40>
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	f200 80e1 	bhi.w	8004a88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x34>
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ce:	e0db      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d0:	4b73      	ldr	r3, [pc, #460]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 80048d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048d4:	e0db      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048d6:	4b73      	ldr	r3, [pc, #460]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x208>)
 80048d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048da:	e0d8      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048dc:	4b6f      	ldr	r3, [pc, #444]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048e6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d063      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	2200      	movs	r2, #0
 80048fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004904:	633b      	str	r3, [r7, #48]	@ 0x30
 8004906:	2300      	movs	r3, #0
 8004908:	637b      	str	r3, [r7, #52]	@ 0x34
 800490a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800490e:	4622      	mov	r2, r4
 8004910:	462b      	mov	r3, r5
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f04f 0100 	mov.w	r1, #0
 800491a:	0159      	lsls	r1, r3, #5
 800491c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004920:	0150      	lsls	r0, r2, #5
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4621      	mov	r1, r4
 8004928:	1a51      	subs	r1, r2, r1
 800492a:	6139      	str	r1, [r7, #16]
 800492c:	4629      	mov	r1, r5
 800492e:	eb63 0301 	sbc.w	r3, r3, r1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004940:	4659      	mov	r1, fp
 8004942:	018b      	lsls	r3, r1, #6
 8004944:	4651      	mov	r1, sl
 8004946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800494a:	4651      	mov	r1, sl
 800494c:	018a      	lsls	r2, r1, #6
 800494e:	4651      	mov	r1, sl
 8004950:	ebb2 0801 	subs.w	r8, r2, r1
 8004954:	4659      	mov	r1, fp
 8004956:	eb63 0901 	sbc.w	r9, r3, r1
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800496a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800496e:	4690      	mov	r8, r2
 8004970:	4699      	mov	r9, r3
 8004972:	4623      	mov	r3, r4
 8004974:	eb18 0303 	adds.w	r3, r8, r3
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	462b      	mov	r3, r5
 800497c:	eb49 0303 	adc.w	r3, r9, r3
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800498e:	4629      	mov	r1, r5
 8004990:	024b      	lsls	r3, r1, #9
 8004992:	4621      	mov	r1, r4
 8004994:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004998:	4621      	mov	r1, r4
 800499a:	024a      	lsls	r2, r1, #9
 800499c:	4610      	mov	r0, r2
 800499e:	4619      	mov	r1, r3
 80049a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a2:	2200      	movs	r2, #0
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049ac:	f7fb fc68 	bl	8000280 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4613      	mov	r3, r2
 80049b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b8:	e058      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b38      	ldr	r3, [pc, #224]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	2200      	movs	r2, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	4611      	mov	r1, r2
 80049c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049ca:	623b      	str	r3, [r7, #32]
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	f04f 0000 	mov.w	r0, #0
 80049dc:	f04f 0100 	mov.w	r1, #0
 80049e0:	0159      	lsls	r1, r3, #5
 80049e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e6:	0150      	lsls	r0, r2, #5
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4641      	mov	r1, r8
 80049ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80049f2:	4649      	mov	r1, r9
 80049f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a0c:	ebb2 040a 	subs.w	r4, r2, sl
 8004a10:	eb63 050b 	sbc.w	r5, r3, fp
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	00eb      	lsls	r3, r5, #3
 8004a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a22:	00e2      	lsls	r2, r4, #3
 8004a24:	4614      	mov	r4, r2
 8004a26:	461d      	mov	r5, r3
 8004a28:	4643      	mov	r3, r8
 8004a2a:	18e3      	adds	r3, r4, r3
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	464b      	mov	r3, r9
 8004a30:	eb45 0303 	adc.w	r3, r5, r3
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a42:	4629      	mov	r1, r5
 8004a44:	028b      	lsls	r3, r1, #10
 8004a46:	4621      	mov	r1, r4
 8004a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	028a      	lsls	r2, r1, #10
 8004a50:	4610      	mov	r0, r2
 8004a52:	4619      	mov	r1, r3
 8004a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a56:	2200      	movs	r2, #0
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	61fa      	str	r2, [r7, #28]
 8004a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a60:	f7fb fc0e 	bl	8000280 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4613      	mov	r3, r2
 8004a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	3301      	adds	r3, #1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a86:	e002      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3750      	adds	r7, #80	@ 0x50
 8004a94:	46bd      	mov	sp, r7
 8004a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	00f42400 	.word	0x00f42400
 8004aa4:	007a1200 	.word	0x007a1200

08004aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aac:	4b03      	ldr	r3, [pc, #12]	@ (8004abc <HAL_RCC_GetHCLKFreq+0x14>)
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000008 	.word	0x20000008

08004ac0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	f107 001c 	add.w	r0, r7, #28
 8004ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ad2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d123      	bne.n	8004b22 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d105      	bne.n	8004b16 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f001 fae8 	bl	80060ec <USB_CoreReset>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	73fb      	strb	r3, [r7, #15]
 8004b20:	e01b      	b.n	8004b5a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f001 fadc 	bl	80060ec <USB_CoreReset>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d106      	bne.n	8004b4e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b4c:	e005      	b.n	8004b5a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b5a:	7fbb      	ldrb	r3, [r7, #30]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d10b      	bne.n	8004b78 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f043 0206 	orr.w	r2, r3, #6
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f043 0220 	orr.w	r2, r3, #32
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b84:	b004      	add	sp, #16
 8004b86:	4770      	bx	lr

08004b88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d165      	bne.n	8004c68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4a41      	ldr	r2, [pc, #260]	@ (8004ca4 <USB_SetTurnaroundTime+0x11c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d906      	bls.n	8004bb2 <USB_SetTurnaroundTime+0x2a>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4a40      	ldr	r2, [pc, #256]	@ (8004ca8 <USB_SetTurnaroundTime+0x120>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d202      	bcs.n	8004bb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bac:	230f      	movs	r3, #15
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e062      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ca8 <USB_SetTurnaroundTime+0x120>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d306      	bcc.n	8004bc8 <USB_SetTurnaroundTime+0x40>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8004cac <USB_SetTurnaroundTime+0x124>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d202      	bcs.n	8004bc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bc2:	230e      	movs	r3, #14
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	e057      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4a38      	ldr	r2, [pc, #224]	@ (8004cac <USB_SetTurnaroundTime+0x124>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d306      	bcc.n	8004bde <USB_SetTurnaroundTime+0x56>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4a37      	ldr	r2, [pc, #220]	@ (8004cb0 <USB_SetTurnaroundTime+0x128>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d202      	bcs.n	8004bde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004bd8:	230d      	movs	r3, #13
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e04c      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4a33      	ldr	r2, [pc, #204]	@ (8004cb0 <USB_SetTurnaroundTime+0x128>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d306      	bcc.n	8004bf4 <USB_SetTurnaroundTime+0x6c>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4a32      	ldr	r2, [pc, #200]	@ (8004cb4 <USB_SetTurnaroundTime+0x12c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d802      	bhi.n	8004bf4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004bee:	230c      	movs	r3, #12
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	e041      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8004cb4 <USB_SetTurnaroundTime+0x12c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d906      	bls.n	8004c0a <USB_SetTurnaroundTime+0x82>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8004cb8 <USB_SetTurnaroundTime+0x130>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d802      	bhi.n	8004c0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c04:	230b      	movs	r3, #11
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	e036      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb8 <USB_SetTurnaroundTime+0x130>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d906      	bls.n	8004c20 <USB_SetTurnaroundTime+0x98>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4a29      	ldr	r2, [pc, #164]	@ (8004cbc <USB_SetTurnaroundTime+0x134>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d802      	bhi.n	8004c20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c1a:	230a      	movs	r3, #10
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	e02b      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4a26      	ldr	r2, [pc, #152]	@ (8004cbc <USB_SetTurnaroundTime+0x134>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d906      	bls.n	8004c36 <USB_SetTurnaroundTime+0xae>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4a25      	ldr	r2, [pc, #148]	@ (8004cc0 <USB_SetTurnaroundTime+0x138>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d202      	bcs.n	8004c36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c30:	2309      	movs	r3, #9
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e020      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4a21      	ldr	r2, [pc, #132]	@ (8004cc0 <USB_SetTurnaroundTime+0x138>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d306      	bcc.n	8004c4c <USB_SetTurnaroundTime+0xc4>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4a20      	ldr	r2, [pc, #128]	@ (8004cc4 <USB_SetTurnaroundTime+0x13c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d802      	bhi.n	8004c4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c46:	2308      	movs	r3, #8
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	e015      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc4 <USB_SetTurnaroundTime+0x13c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d906      	bls.n	8004c62 <USB_SetTurnaroundTime+0xda>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc8 <USB_SetTurnaroundTime+0x140>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d202      	bcs.n	8004c62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c5c:	2307      	movs	r3, #7
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e00a      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c62:	2306      	movs	r3, #6
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e007      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c6e:	2309      	movs	r3, #9
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e001      	b.n	8004c78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c74:	2309      	movs	r3, #9
 8004c76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	029b      	lsls	r3, r3, #10
 8004c8c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	00d8acbf 	.word	0x00d8acbf
 8004ca8:	00e4e1c0 	.word	0x00e4e1c0
 8004cac:	00f42400 	.word	0x00f42400
 8004cb0:	01067380 	.word	0x01067380
 8004cb4:	011a499f 	.word	0x011a499f
 8004cb8:	01312cff 	.word	0x01312cff
 8004cbc:	014ca43f 	.word	0x014ca43f
 8004cc0:	016e3600 	.word	0x016e3600
 8004cc4:	01a6ab1f 	.word	0x01a6ab1f
 8004cc8:	01e84800 	.word	0x01e84800

08004ccc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f043 0201 	orr.w	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f023 0201 	bic.w	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d115      	bne.n	8004d5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d3e:	200a      	movs	r0, #10
 8004d40:	f7fc f9ed 	bl	800111e <HAL_Delay>
      ms += 10U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	330a      	adds	r3, #10
 8004d48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f001 f93f 	bl	8005fce <USB_GetMode>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d01e      	beq.n	8004d94 <USB_SetCurrentMode+0x84>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d5a:	d9f0      	bls.n	8004d3e <USB_SetCurrentMode+0x2e>
 8004d5c:	e01a      	b.n	8004d94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d115      	bne.n	8004d90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d70:	200a      	movs	r0, #10
 8004d72:	f7fc f9d4 	bl	800111e <HAL_Delay>
      ms += 10U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	330a      	adds	r3, #10
 8004d7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f001 f926 	bl	8005fce <USB_GetMode>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <USB_SetCurrentMode+0x84>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d8c:	d9f0      	bls.n	8004d70 <USB_SetCurrentMode+0x60>
 8004d8e:	e001      	b.n	8004d94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e005      	b.n	8004da0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d98:	d101      	bne.n	8004d9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004da8:	b084      	sub	sp, #16
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b086      	sub	sp, #24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e009      	b.n	8004ddc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3340      	adds	r3, #64	@ 0x40
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b0e      	cmp	r3, #14
 8004de0:	d9f2      	bls.n	8004dc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004de2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d11c      	bne.n	8004e24 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004df8:	f043 0302 	orr.w	r3, r3, #2
 8004dfc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e22:	e00b      	b.n	8004e3c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e42:	461a      	mov	r2, r3
 8004e44:	2300      	movs	r3, #0
 8004e46:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e48:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d10d      	bne.n	8004e6c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e58:	2100      	movs	r1, #0
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f968 	bl	8005130 <USB_SetDevSpeed>
 8004e60:	e008      	b.n	8004e74 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e62:	2101      	movs	r1, #1
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f963 	bl	8005130 <USB_SetDevSpeed>
 8004e6a:	e003      	b.n	8004e74 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e6c:	2103      	movs	r1, #3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f95e 	bl	8005130 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e74:	2110      	movs	r1, #16
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f8fa 	bl	8005070 <USB_FlushTxFifo>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f924 	bl	80050d4 <USB_FlushRxFifo>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e043      	b.n	8004f48 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ed6:	d118      	bne.n	8004f0a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eea:	461a      	mov	r2, r3
 8004eec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e013      	b.n	8004f1c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f00:	461a      	mov	r2, r3
 8004f02:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e008      	b.n	8004f1c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f16:	461a      	mov	r2, r3
 8004f18:	2300      	movs	r3, #0
 8004f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3301      	adds	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d3b5      	bcc.n	8004ec0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	e043      	b.n	8004fe2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f70:	d118      	bne.n	8004fa4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f84:	461a      	mov	r2, r3
 8004f86:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	e013      	b.n	8004fb6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	e008      	b.n	8004fb6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d3b5      	bcc.n	8004f5a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005000:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800500e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005010:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005014:	2b00      	cmp	r3, #0
 8005016:	d105      	bne.n	8005024 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	f043 0210 	orr.w	r2, r3, #16
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699a      	ldr	r2, [r3, #24]
 8005028:	4b10      	ldr	r3, [pc, #64]	@ (800506c <USB_DevInit+0x2c4>)
 800502a:	4313      	orrs	r3, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005030:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f043 0208 	orr.w	r2, r3, #8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005044:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005048:	2b01      	cmp	r3, #1
 800504a:	d107      	bne.n	800505c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800505c:	7dfb      	ldrb	r3, [r7, #23]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005068:	b004      	add	sp, #16
 800506a:	4770      	bx	lr
 800506c:	803c3800 	.word	0x803c3800

08005070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3301      	adds	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800508a:	d901      	bls.n	8005090 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e01b      	b.n	80050c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	daf2      	bge.n	800507e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	019b      	lsls	r3, r3, #6
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050b4:	d901      	bls.n	80050ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e006      	b.n	80050c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d0f0      	beq.n	80050a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3301      	adds	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ec:	d901      	bls.n	80050f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e018      	b.n	8005124 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	daf2      	bge.n	80050e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2210      	movs	r2, #16
 8005102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3301      	adds	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005110:	d901      	bls.n	8005116 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e006      	b.n	8005124 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b10      	cmp	r3, #16
 8005120:	d0f0      	beq.n	8005104 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005150:	4313      	orrs	r3, r2
 8005152:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005162:	b480      	push	{r7}
 8005164:	b087      	sub	sp, #28
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0306 	and.w	r3, r3, #6
 800517a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d102      	bne.n	8005188 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]
 8005186:	e00a      	b.n	800519e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d002      	beq.n	8005194 <USB_GetDevSpeed+0x32>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b06      	cmp	r3, #6
 8005192:	d102      	bne.n	800519a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005194:	2302      	movs	r3, #2
 8005196:	75fb      	strb	r3, [r7, #23]
 8005198:	e001      	b.n	800519e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800519a:	230f      	movs	r3, #15
 800519c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800519e:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d13a      	bne.n	800523e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	2101      	movs	r1, #1
 80051da:	fa01 f303 	lsl.w	r3, r1, r3
 80051de:	b29b      	uxth	r3, r3
 80051e0:	68f9      	ldr	r1, [r7, #12]
 80051e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d155      	bne.n	80052ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	791b      	ldrb	r3, [r3, #4]
 800521a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800521c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	059b      	lsls	r3, r3, #22
 8005222:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005224:	4313      	orrs	r3, r2
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	440a      	add	r2, r1
 800522e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	e036      	b.n	80052ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005244:	69da      	ldr	r2, [r3, #28]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	2101      	movs	r1, #1
 8005250:	fa01 f303 	lsl.w	r3, r1, r3
 8005254:	041b      	lsls	r3, r3, #16
 8005256:	68f9      	ldr	r1, [r7, #12]
 8005258:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800525c:	4313      	orrs	r3, r2
 800525e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d11a      	bne.n	80052ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	791b      	ldrb	r3, [r3, #4]
 8005290:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005292:	430b      	orrs	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	440a      	add	r2, r1
 800529e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d161      	bne.n	800539c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052ee:	d11f      	bne.n	8005330 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800530a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800530e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800532a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800532e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	2101      	movs	r1, #1
 8005342:	fa01 f303 	lsl.w	r3, r1, r3
 8005346:	b29b      	uxth	r3, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005350:	4013      	ands	r3, r2
 8005352:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	2101      	movs	r1, #1
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	b29b      	uxth	r3, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005374:	4013      	ands	r3, r2
 8005376:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	0159      	lsls	r1, r3, #5
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	440b      	add	r3, r1
 800538e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005392:	4619      	mov	r1, r3
 8005394:	4b35      	ldr	r3, [pc, #212]	@ (800546c <USB_DeactivateEndpoint+0x1b0>)
 8005396:	4013      	ands	r3, r2
 8005398:	600b      	str	r3, [r1, #0]
 800539a:	e060      	b.n	800545e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053b2:	d11f      	bne.n	80053f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	0151      	lsls	r1, r2, #5
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	440a      	add	r2, r1
 80053ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	2101      	movs	r1, #1
 8005406:	fa01 f303 	lsl.w	r3, r1, r3
 800540a:	041b      	lsls	r3, r3, #16
 800540c:	43db      	mvns	r3, r3
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005414:	4013      	ands	r3, r2
 8005416:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	2101      	movs	r1, #1
 800542a:	fa01 f303 	lsl.w	r3, r1, r3
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	43db      	mvns	r3, r3
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005438:	4013      	ands	r3, r2
 800543a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	0159      	lsls	r1, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	440b      	add	r3, r1
 8005452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005456:	4619      	mov	r1, r3
 8005458:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <USB_DeactivateEndpoint+0x1b4>)
 800545a:	4013      	ands	r3, r2
 800545c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	ec337800 	.word	0xec337800
 8005470:	eff37800 	.word	0xeff37800

08005474 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	@ 0x28
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	2b01      	cmp	r3, #1
 8005492:	f040 817f 	bne.w	8005794 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d132      	bne.n	8005504 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80054bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80054c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054fc:	0cdb      	lsrs	r3, r3, #19
 80054fe:	04db      	lsls	r3, r3, #19
 8005500:	6113      	str	r3, [r2, #16]
 8005502:	e097      	b.n	8005634 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800551e:	0cdb      	lsrs	r3, r3, #19
 8005520:	04db      	lsls	r3, r3, #19
 8005522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800553e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005542:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005546:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d11a      	bne.n	8005584 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	429a      	cmp	r2, r3
 8005558:	d903      	bls.n	8005562 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800557c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005580:	6113      	str	r3, [r2, #16]
 8005582:	e044      	b.n	800560e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4413      	add	r3, r2
 800558e:	1e5a      	subs	r2, r3, #1
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	fbb2 f3f3 	udiv	r3, r2, r3
 8005598:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	8afb      	ldrh	r3, [r7, #22]
 80055aa:	04d9      	lsls	r1, r3, #19
 80055ac:	4ba4      	ldr	r3, [pc, #656]	@ (8005840 <USB_EPStartXfer+0x3cc>)
 80055ae:	400b      	ands	r3, r1
 80055b0:	69b9      	ldr	r1, [r7, #24]
 80055b2:	0148      	lsls	r0, r1, #5
 80055b4:	69f9      	ldr	r1, [r7, #28]
 80055b6:	4401      	add	r1, r0
 80055b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055bc:	4313      	orrs	r3, r2
 80055be:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	791b      	ldrb	r3, [r3, #4]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d122      	bne.n	800560e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055e2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80055e6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	8afb      	ldrh	r3, [r7, #22]
 80055f8:	075b      	lsls	r3, r3, #29
 80055fa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80055fe:	69b9      	ldr	r1, [r7, #24]
 8005600:	0148      	lsls	r0, r1, #5
 8005602:	69f9      	ldr	r1, [r7, #28]
 8005604:	4401      	add	r1, r0
 8005606:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800560a:	4313      	orrs	r3, r2
 800560c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005624:	69b9      	ldr	r1, [r7, #24]
 8005626:	0148      	lsls	r0, r1, #5
 8005628:	69f9      	ldr	r1, [r7, #28]
 800562a:	4401      	add	r1, r0
 800562c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005630:	4313      	orrs	r3, r2
 8005632:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d14b      	bne.n	80056d2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800564e:	461a      	mov	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	791b      	ldrb	r3, [r3, #4]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d128      	bne.n	80056b0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d110      	bne.n	8005690 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005688:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	e00f      	b.n	80056b0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	0151      	lsls	r1, r2, #5
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	440a      	add	r2, r1
 80056a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	e166      	b.n	80059a0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056f0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	791b      	ldrb	r3, [r3, #4]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d015      	beq.n	8005726 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 814e 	beq.w	80059a0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800570a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	69f9      	ldr	r1, [r7, #28]
 800571c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005720:	4313      	orrs	r3, r2
 8005722:	634b      	str	r3, [r1, #52]	@ 0x34
 8005724:	e13c      	b.n	80059a0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d110      	bne.n	8005758 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005750:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e00f      	b.n	8005778 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005776:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	68d9      	ldr	r1, [r3, #12]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	781a      	ldrb	r2, [r3, #0]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	b298      	uxth	r0, r3
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	4603      	mov	r3, r0
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f9b9 	bl	8005b04 <USB_WritePacket>
 8005792:	e105      	b.n	80059a0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057ae:	0cdb      	lsrs	r3, r3, #19
 80057b0:	04db      	lsls	r3, r3, #19
 80057b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057d6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d132      	bne.n	8005844 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	0148      	lsls	r0, r1, #5
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	4401      	add	r1, r0
 8005814:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005818:	4313      	orrs	r3, r2
 800581a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005836:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800583a:	6113      	str	r3, [r2, #16]
 800583c:	e062      	b.n	8005904 <USB_EPStartXfer+0x490>
 800583e:	bf00      	nop
 8005840:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d123      	bne.n	8005894 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005862:	69b9      	ldr	r1, [r7, #24]
 8005864:	0148      	lsls	r0, r1, #5
 8005866:	69f9      	ldr	r1, [r7, #28]
 8005868:	4401      	add	r1, r0
 800586a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800586e:	4313      	orrs	r3, r2
 8005870:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800588c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005890:	6113      	str	r3, [r2, #16]
 8005892:	e037      	b.n	8005904 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4413      	add	r3, r2
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	8afa      	ldrh	r2, [r7, #22]
 80058b0:	fb03 f202 	mul.w	r2, r3, r2
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	8afb      	ldrh	r3, [r7, #22]
 80058c8:	04d9      	lsls	r1, r3, #19
 80058ca:	4b38      	ldr	r3, [pc, #224]	@ (80059ac <USB_EPStartXfer+0x538>)
 80058cc:	400b      	ands	r3, r1
 80058ce:	69b9      	ldr	r1, [r7, #24]
 80058d0:	0148      	lsls	r0, r1, #5
 80058d2:	69f9      	ldr	r1, [r7, #28]
 80058d4:	4401      	add	r1, r0
 80058d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058da:	4313      	orrs	r3, r2
 80058dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f4:	69b9      	ldr	r1, [r7, #24]
 80058f6:	0148      	lsls	r0, r1, #5
 80058f8:	69f9      	ldr	r1, [r7, #28]
 80058fa:	4401      	add	r1, r0
 80058fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005900:	4313      	orrs	r3, r2
 8005902:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d10d      	bne.n	8005926 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	68d9      	ldr	r1, [r3, #12]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005922:	460a      	mov	r2, r1
 8005924:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	791b      	ldrb	r3, [r3, #4]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d128      	bne.n	8005980 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005958:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e00f      	b.n	8005980 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800597a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800597e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800599a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800599e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	1ff80000 	.word	0x1ff80000

080059b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d14a      	bne.n	8005a64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059e6:	f040 8086 	bne.w	8005af6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	7812      	ldrb	r2, [r2, #0]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	7812      	ldrb	r2, [r2, #0]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3301      	adds	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d902      	bls.n	8005a48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	75fb      	strb	r3, [r7, #23]
          break;
 8005a46:	e056      	b.n	8005af6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a60:	d0e7      	beq.n	8005a32 <USB_EPStopXfer+0x82>
 8005a62:	e048      	b.n	8005af6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a7c:	d13b      	bne.n	8005af6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005aa0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	7812      	ldrb	r2, [r2, #0]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d902      	bls.n	8005adc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8005ada:	e00c      	b.n	8005af6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005af0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005af4:	d0e7      	beq.n	8005ac6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	@ 0x24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	4611      	mov	r1, r2
 8005b10:	461a      	mov	r2, r3
 8005b12:	460b      	mov	r3, r1
 8005b14:	71fb      	strb	r3, [r7, #7]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d123      	bne.n	8005b72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b2a:	88bb      	ldrh	r3, [r7, #4]
 8005b2c:	3303      	adds	r3, #3
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	e018      	b.n	8005b6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	031a      	lsls	r2, r3, #12
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b44:	461a      	mov	r2, r3
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	3301      	adds	r3, #1
 8005b56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3301      	adds	r3, #1
 8005b62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	3301      	adds	r3, #1
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d3e2      	bcc.n	8005b38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3724      	adds	r7, #36	@ 0x24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b08b      	sub	sp, #44	@ 0x2c
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	089b      	lsrs	r3, r3, #2
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	f003 0303 	and.w	r3, r3, #3
 8005ba4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	623b      	str	r3, [r7, #32]
 8005baa:	e014      	b.n	8005bd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	3301      	adds	r3, #1
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	3301      	adds	r3, #1
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	6a3a      	ldr	r2, [r7, #32]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d3e6      	bcc.n	8005bac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bde:	8bfb      	ldrh	r3, [r7, #30]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01e      	beq.n	8005c22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f107 0310 	add.w	r3, r7, #16
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	fa22 f303 	lsr.w	r3, r2, r3
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	701a      	strb	r2, [r3, #0]
      i++;
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	3301      	adds	r3, #1
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c16:	8bfb      	ldrh	r3, [r7, #30]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c1c:	8bfb      	ldrh	r3, [r7, #30]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1ea      	bne.n	8005bf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	372c      	adds	r7, #44	@ 0x2c
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d12c      	bne.n	8005ca6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	db12      	blt.n	8005c84 <USB_EPSetStall+0x54>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00f      	beq.n	8005c84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	e02b      	b.n	8005cfe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	db12      	blt.n	8005cde <USB_EPSetStall+0xae>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00f      	beq.n	8005cde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	0151      	lsls	r1, r2, #5
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005cdc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d128      	bne.n	8005d7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	791b      	ldrb	r3, [r3, #4]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d003      	beq.n	8005d58 <USB_EPClearStall+0x4c>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	791b      	ldrb	r3, [r3, #4]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d138      	bne.n	8005dca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	e027      	b.n	8005dca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	791b      	ldrb	r3, [r3, #4]
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d003      	beq.n	8005daa <USB_EPClearStall+0x9e>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	791b      	ldrb	r3, [r3, #4]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d10f      	bne.n	8005dca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005df6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005dfa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e12:	4313      	orrs	r3, r2
 8005e14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e3e:	f023 0303 	bic.w	r3, r3, #3
 8005e42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e52:	f023 0302 	bic.w	r3, r3, #2
 8005e56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e80:	f023 0303 	bic.w	r3, r3, #3
 8005e84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e94:	f043 0302 	orr.w	r3, r3, #2
 8005e98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	0c1b      	lsrs	r3, r3, #16
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	b29b      	uxth	r3, r3
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	4013      	ands	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f64:	68bb      	ldr	r3, [r7, #8]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b087      	sub	sp, #28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	01db      	lsls	r3, r3, #7
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005fac:	78fb      	ldrb	r3, [r7, #3]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f003 0301 	and.w	r3, r3, #1
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006004:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006008:	f023 0307 	bic.w	r3, r3, #7
 800600c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800601c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006020:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	460b      	mov	r3, r1
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	333c      	adds	r3, #60	@ 0x3c
 8006046:	3304      	adds	r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4a26      	ldr	r2, [pc, #152]	@ (80060e8 <USB_EP0_OutStart+0xb8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d90a      	bls.n	800606a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006060:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006064:	d101      	bne.n	800606a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e037      	b.n	80060da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006070:	461a      	mov	r2, r3
 8006072:	2300      	movs	r3, #0
 8006074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006084:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006098:	f043 0318 	orr.w	r3, r3, #24
 800609c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80060b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d10f      	bne.n	80060d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80060d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	4f54300a 	.word	0x4f54300a

080060ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006104:	d901      	bls.n	800610a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e01b      	b.n	8006142 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	daf2      	bge.n	80060f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f043 0201 	orr.w	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800612e:	d901      	bls.n	8006134 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e006      	b.n	8006142 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b01      	cmp	r3, #1
 800613e:	d0f0      	beq.n	8006122 <USB_CoreReset+0x36>

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800615c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006160:	f002 fddc 	bl	8008d1c <USBD_static_malloc>
 8006164:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d109      	bne.n	8006180 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	32b0      	adds	r2, #176	@ 0xb0
 8006176:	2100      	movs	r1, #0
 8006178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800617c:	2302      	movs	r3, #2
 800617e:	e0d4      	b.n	800632a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006180:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006184:	2100      	movs	r1, #0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f002 fe42 	bl	8008e10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	32b0      	adds	r2, #176	@ 0xb0
 8006196:	68f9      	ldr	r1, [r7, #12]
 8006198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	32b0      	adds	r2, #176	@ 0xb0
 80061a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	7c1b      	ldrb	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d138      	bne.n	800622a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061b8:	4b5e      	ldr	r3, [pc, #376]	@ (8006334 <USBD_CDC_Init+0x1e4>)
 80061ba:	7819      	ldrb	r1, [r3, #0]
 80061bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061c0:	2202      	movs	r2, #2
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f002 fc87 	bl	8008ad6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80061c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006334 <USBD_CDC_Init+0x1e4>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	f003 020f 	and.w	r2, r3, #15
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	440b      	add	r3, r1
 80061dc:	3324      	adds	r3, #36	@ 0x24
 80061de:	2201      	movs	r2, #1
 80061e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061e2:	4b55      	ldr	r3, [pc, #340]	@ (8006338 <USBD_CDC_Init+0x1e8>)
 80061e4:	7819      	ldrb	r1, [r3, #0]
 80061e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061ea:	2202      	movs	r2, #2
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f002 fc72 	bl	8008ad6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061f2:	4b51      	ldr	r3, [pc, #324]	@ (8006338 <USBD_CDC_Init+0x1e8>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	f003 020f 	and.w	r2, r3, #15
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800620a:	2201      	movs	r2, #1
 800620c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800620e:	4b4b      	ldr	r3, [pc, #300]	@ (800633c <USBD_CDC_Init+0x1ec>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	f003 020f 	and.w	r2, r3, #15
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	3326      	adds	r3, #38	@ 0x26
 8006224:	2210      	movs	r2, #16
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	e035      	b.n	8006296 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800622a:	4b42      	ldr	r3, [pc, #264]	@ (8006334 <USBD_CDC_Init+0x1e4>)
 800622c:	7819      	ldrb	r1, [r3, #0]
 800622e:	2340      	movs	r3, #64	@ 0x40
 8006230:	2202      	movs	r2, #2
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f002 fc4f 	bl	8008ad6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006238:	4b3e      	ldr	r3, [pc, #248]	@ (8006334 <USBD_CDC_Init+0x1e4>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f003 020f 	and.w	r2, r3, #15
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	3324      	adds	r3, #36	@ 0x24
 800624e:	2201      	movs	r2, #1
 8006250:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006252:	4b39      	ldr	r3, [pc, #228]	@ (8006338 <USBD_CDC_Init+0x1e8>)
 8006254:	7819      	ldrb	r1, [r3, #0]
 8006256:	2340      	movs	r3, #64	@ 0x40
 8006258:	2202      	movs	r2, #2
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f002 fc3b 	bl	8008ad6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006260:	4b35      	ldr	r3, [pc, #212]	@ (8006338 <USBD_CDC_Init+0x1e8>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	f003 020f 	and.w	r2, r3, #15
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006278:	2201      	movs	r2, #1
 800627a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800627c:	4b2f      	ldr	r3, [pc, #188]	@ (800633c <USBD_CDC_Init+0x1ec>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	f003 020f 	and.w	r2, r3, #15
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	440b      	add	r3, r1
 8006290:	3326      	adds	r3, #38	@ 0x26
 8006292:	2210      	movs	r2, #16
 8006294:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006296:	4b29      	ldr	r3, [pc, #164]	@ (800633c <USBD_CDC_Init+0x1ec>)
 8006298:	7819      	ldrb	r1, [r3, #0]
 800629a:	2308      	movs	r3, #8
 800629c:	2203      	movs	r2, #3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f002 fc19 	bl	8008ad6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80062a4:	4b25      	ldr	r3, [pc, #148]	@ (800633c <USBD_CDC_Init+0x1ec>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f003 020f 	and.w	r2, r3, #15
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	440b      	add	r3, r1
 80062b8:	3324      	adds	r3, #36	@ 0x24
 80062ba:	2201      	movs	r2, #1
 80062bc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	33b0      	adds	r3, #176	@ 0xb0
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80062f4:	2302      	movs	r3, #2
 80062f6:	e018      	b.n	800632a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	7c1b      	ldrb	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006300:	4b0d      	ldr	r3, [pc, #52]	@ (8006338 <USBD_CDC_Init+0x1e8>)
 8006302:	7819      	ldrb	r1, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800630a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f002 fcd0 	bl	8008cb4 <USBD_LL_PrepareReceive>
 8006314:	e008      	b.n	8006328 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006316:	4b08      	ldr	r3, [pc, #32]	@ (8006338 <USBD_CDC_Init+0x1e8>)
 8006318:	7819      	ldrb	r1, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006320:	2340      	movs	r3, #64	@ 0x40
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f002 fcc6 	bl	8008cb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	2000009b 	.word	0x2000009b
 8006338:	2000009c 	.word	0x2000009c
 800633c:	2000009d 	.word	0x2000009d

08006340 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800634c:	4b3a      	ldr	r3, [pc, #232]	@ (8006438 <USBD_CDC_DeInit+0xf8>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f002 fbe5 	bl	8008b22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006358:	4b37      	ldr	r3, [pc, #220]	@ (8006438 <USBD_CDC_DeInit+0xf8>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	f003 020f 	and.w	r2, r3, #15
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	3324      	adds	r3, #36	@ 0x24
 800636e:	2200      	movs	r2, #0
 8006370:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006372:	4b32      	ldr	r3, [pc, #200]	@ (800643c <USBD_CDC_DeInit+0xfc>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f002 fbd2 	bl	8008b22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800637e:	4b2f      	ldr	r3, [pc, #188]	@ (800643c <USBD_CDC_DeInit+0xfc>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f003 020f 	and.w	r2, r3, #15
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006396:	2200      	movs	r2, #0
 8006398:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800639a:	4b29      	ldr	r3, [pc, #164]	@ (8006440 <USBD_CDC_DeInit+0x100>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f002 fbbe 	bl	8008b22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80063a6:	4b26      	ldr	r3, [pc, #152]	@ (8006440 <USBD_CDC_DeInit+0x100>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	f003 020f 	and.w	r2, r3, #15
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	3324      	adds	r3, #36	@ 0x24
 80063bc:	2200      	movs	r2, #0
 80063be:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80063c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006440 <USBD_CDC_DeInit+0x100>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f003 020f 	and.w	r2, r3, #15
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	3326      	adds	r3, #38	@ 0x26
 80063d6:	2200      	movs	r2, #0
 80063d8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	32b0      	adds	r2, #176	@ 0xb0
 80063e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01f      	beq.n	800642c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	33b0      	adds	r3, #176	@ 0xb0
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	32b0      	adds	r2, #176	@ 0xb0
 800640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640e:	4618      	mov	r0, r3
 8006410:	f002 fc92 	bl	8008d38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	32b0      	adds	r2, #176	@ 0xb0
 800641e:	2100      	movs	r1, #0
 8006420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	2000009b 	.word	0x2000009b
 800643c:	2000009c 	.word	0x2000009c
 8006440:	2000009d 	.word	0x2000009d

08006444 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	32b0      	adds	r2, #176	@ 0xb0
 8006458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006470:	2303      	movs	r3, #3
 8006472:	e0bf      	b.n	80065f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800647c:	2b00      	cmp	r3, #0
 800647e:	d050      	beq.n	8006522 <USBD_CDC_Setup+0xde>
 8006480:	2b20      	cmp	r3, #32
 8006482:	f040 80af 	bne.w	80065e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	88db      	ldrh	r3, [r3, #6]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d03a      	beq.n	8006504 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	b25b      	sxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	da1b      	bge.n	80064d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	33b0      	adds	r3, #176	@ 0xb0
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80064ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	88d2      	ldrh	r2, [r2, #6]
 80064b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	88db      	ldrh	r3, [r3, #6]
 80064ba:	2b07      	cmp	r3, #7
 80064bc:	bf28      	it	cs
 80064be:	2307      	movcs	r3, #7
 80064c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	89fa      	ldrh	r2, [r7, #14]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fd93 	bl	8007ff4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80064ce:	e090      	b.n	80065f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	785a      	ldrb	r2, [r3, #1]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	88db      	ldrh	r3, [r3, #6]
 80064de:	2b3f      	cmp	r3, #63	@ 0x3f
 80064e0:	d803      	bhi.n	80064ea <USBD_CDC_Setup+0xa6>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	88db      	ldrh	r3, [r3, #6]
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	e000      	b.n	80064ec <USBD_CDC_Setup+0xa8>
 80064ea:	2240      	movs	r2, #64	@ 0x40
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80064f2:	6939      	ldr	r1, [r7, #16]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80064fa:	461a      	mov	r2, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fda5 	bl	800804c <USBD_CtlPrepareRx>
      break;
 8006502:	e076      	b.n	80065f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	33b0      	adds	r3, #176	@ 0xb0
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	7850      	ldrb	r0, [r2, #1]
 800651a:	2200      	movs	r2, #0
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	4798      	blx	r3
      break;
 8006520:	e067      	b.n	80065f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b0b      	cmp	r3, #11
 8006528:	d851      	bhi.n	80065ce <USBD_CDC_Setup+0x18a>
 800652a:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <USBD_CDC_Setup+0xec>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006561 	.word	0x08006561
 8006534:	080065dd 	.word	0x080065dd
 8006538:	080065cf 	.word	0x080065cf
 800653c:	080065cf 	.word	0x080065cf
 8006540:	080065cf 	.word	0x080065cf
 8006544:	080065cf 	.word	0x080065cf
 8006548:	080065cf 	.word	0x080065cf
 800654c:	080065cf 	.word	0x080065cf
 8006550:	080065cf 	.word	0x080065cf
 8006554:	080065cf 	.word	0x080065cf
 8006558:	0800658b 	.word	0x0800658b
 800655c:	080065b5 	.word	0x080065b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b03      	cmp	r3, #3
 800656a:	d107      	bne.n	800657c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800656c:	f107 030a 	add.w	r3, r7, #10
 8006570:	2202      	movs	r2, #2
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fd3d 	bl	8007ff4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800657a:	e032      	b.n	80065e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 fcbb 	bl	8007efa <USBD_CtlError>
            ret = USBD_FAIL;
 8006584:	2303      	movs	r3, #3
 8006586:	75fb      	strb	r3, [r7, #23]
          break;
 8006588:	e02b      	b.n	80065e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b03      	cmp	r3, #3
 8006594:	d107      	bne.n	80065a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006596:	f107 030d 	add.w	r3, r7, #13
 800659a:	2201      	movs	r2, #1
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f001 fd28 	bl	8007ff4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065a4:	e01d      	b.n	80065e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 fca6 	bl	8007efa <USBD_CtlError>
            ret = USBD_FAIL;
 80065ae:	2303      	movs	r3, #3
 80065b0:	75fb      	strb	r3, [r7, #23]
          break;
 80065b2:	e016      	b.n	80065e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d00f      	beq.n	80065e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 fc99 	bl	8007efa <USBD_CtlError>
            ret = USBD_FAIL;
 80065c8:	2303      	movs	r3, #3
 80065ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065cc:	e008      	b.n	80065e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 fc92 	bl	8007efa <USBD_CtlError>
          ret = USBD_FAIL;
 80065d6:	2303      	movs	r3, #3
 80065d8:	75fb      	strb	r3, [r7, #23]
          break;
 80065da:	e002      	b.n	80065e2 <USBD_CDC_Setup+0x19e>
          break;
 80065dc:	bf00      	nop
 80065de:	e008      	b.n	80065f2 <USBD_CDC_Setup+0x1ae>
          break;
 80065e0:	bf00      	nop
      }
      break;
 80065e2:	e006      	b.n	80065f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 fc87 	bl	8007efa <USBD_CtlError>
      ret = USBD_FAIL;
 80065ec:	2303      	movs	r3, #3
 80065ee:	75fb      	strb	r3, [r7, #23]
      break;
 80065f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800660e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	32b0      	adds	r2, #176	@ 0xb0
 800661a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006622:	2303      	movs	r3, #3
 8006624:	e065      	b.n	80066f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	32b0      	adds	r2, #176	@ 0xb0
 8006630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006634:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	f003 020f 	and.w	r2, r3, #15
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	3318      	adds	r3, #24
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02f      	beq.n	80066b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	f003 020f 	and.w	r2, r3, #15
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	3318      	adds	r3, #24
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	f003 010f 	and.w	r1, r3, #15
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	460b      	mov	r3, r1
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	440b      	add	r3, r1
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4403      	add	r3, r0
 8006678:	331c      	adds	r3, #28
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006686:	2b00      	cmp	r3, #0
 8006688:	d112      	bne.n	80066b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	f003 020f 	and.w	r2, r3, #15
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	3318      	adds	r3, #24
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066a2:	78f9      	ldrb	r1, [r7, #3]
 80066a4:	2300      	movs	r3, #0
 80066a6:	2200      	movs	r2, #0
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f002 fae2 	bl	8008c72 <USBD_LL_Transmit>
 80066ae:	e01f      	b.n	80066f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	33b0      	adds	r3, #176	@ 0xb0
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d010      	beq.n	80066f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	33b0      	adds	r3, #176	@ 0xb0
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	32b0      	adds	r2, #176	@ 0xb0
 8006710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006714:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	32b0      	adds	r2, #176	@ 0xb0
 8006720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006728:	2303      	movs	r3, #3
 800672a:	e01a      	b.n	8006762 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f002 fae0 	bl	8008cf6 <USBD_LL_GetRxDataSize>
 8006736:	4602      	mov	r2, r0
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	33b0      	adds	r3, #176	@ 0xb0
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800675c:	4611      	mov	r1, r2
 800675e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	32b0      	adds	r2, #176	@ 0xb0
 800677c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006780:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006788:	2303      	movs	r3, #3
 800678a:	e024      	b.n	80067d6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	33b0      	adds	r3, #176	@ 0xb0
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d019      	beq.n	80067d4 <USBD_CDC_EP0_RxReady+0x6a>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80067a6:	2bff      	cmp	r3, #255	@ 0xff
 80067a8:	d014      	beq.n	80067d4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	33b0      	adds	r3, #176	@ 0xb0
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80067c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80067ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	22ff      	movs	r2, #255	@ 0xff
 80067d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067e8:	2182      	movs	r1, #130	@ 0x82
 80067ea:	4818      	ldr	r0, [pc, #96]	@ (800684c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067ec:	f000 fd4f 	bl	800728e <USBD_GetEpDesc>
 80067f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067f2:	2101      	movs	r1, #1
 80067f4:	4815      	ldr	r0, [pc, #84]	@ (800684c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067f6:	f000 fd4a 	bl	800728e <USBD_GetEpDesc>
 80067fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067fc:	2181      	movs	r1, #129	@ 0x81
 80067fe:	4813      	ldr	r0, [pc, #76]	@ (800684c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006800:	f000 fd45 	bl	800728e <USBD_GetEpDesc>
 8006804:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2210      	movs	r2, #16
 8006810:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d006      	beq.n	8006826 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2200      	movs	r2, #0
 800681c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006820:	711a      	strb	r2, [r3, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d006      	beq.n	800683a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006834:	711a      	strb	r2, [r3, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2243      	movs	r2, #67	@ 0x43
 800683e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006840:	4b02      	ldr	r3, [pc, #8]	@ (800684c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000058 	.word	0x20000058

08006850 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006858:	2182      	movs	r1, #130	@ 0x82
 800685a:	4818      	ldr	r0, [pc, #96]	@ (80068bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800685c:	f000 fd17 	bl	800728e <USBD_GetEpDesc>
 8006860:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006862:	2101      	movs	r1, #1
 8006864:	4815      	ldr	r0, [pc, #84]	@ (80068bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006866:	f000 fd12 	bl	800728e <USBD_GetEpDesc>
 800686a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800686c:	2181      	movs	r1, #129	@ 0x81
 800686e:	4813      	ldr	r0, [pc, #76]	@ (80068bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006870:	f000 fd0d 	bl	800728e <USBD_GetEpDesc>
 8006874:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2210      	movs	r2, #16
 8006880:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d006      	beq.n	8006896 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2200      	movs	r2, #0
 800688c:	711a      	strb	r2, [r3, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f042 0202 	orr.w	r2, r2, #2
 8006894:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d006      	beq.n	80068aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	711a      	strb	r2, [r3, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f042 0202 	orr.w	r2, r2, #2
 80068a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2243      	movs	r2, #67	@ 0x43
 80068ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068b0:	4b02      	ldr	r3, [pc, #8]	@ (80068bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20000058 	.word	0x20000058

080068c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068c8:	2182      	movs	r1, #130	@ 0x82
 80068ca:	4818      	ldr	r0, [pc, #96]	@ (800692c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068cc:	f000 fcdf 	bl	800728e <USBD_GetEpDesc>
 80068d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068d2:	2101      	movs	r1, #1
 80068d4:	4815      	ldr	r0, [pc, #84]	@ (800692c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068d6:	f000 fcda 	bl	800728e <USBD_GetEpDesc>
 80068da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068dc:	2181      	movs	r1, #129	@ 0x81
 80068de:	4813      	ldr	r0, [pc, #76]	@ (800692c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068e0:	f000 fcd5 	bl	800728e <USBD_GetEpDesc>
 80068e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2210      	movs	r2, #16
 80068f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d006      	beq.n	8006906 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006900:	711a      	strb	r2, [r3, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d006      	beq.n	800691a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006914:	711a      	strb	r2, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2243      	movs	r2, #67	@ 0x43
 800691e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006920:	4b02      	ldr	r3, [pc, #8]	@ (800692c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000058 	.word	0x20000058

08006930 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	220a      	movs	r2, #10
 800693c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800693e:	4b03      	ldr	r3, [pc, #12]	@ (800694c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	20000014 	.word	0x20000014

08006950 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006960:	2303      	movs	r3, #3
 8006962:	e009      	b.n	8006978 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	33b0      	adds	r3, #176	@ 0xb0
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	32b0      	adds	r2, #176	@ 0xb0
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e008      	b.n	80069bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	32b0      	adds	r2, #176	@ 0xb0
 80069dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e004      	b.n	80069f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
	...

08006a04 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	32b0      	adds	r2, #176	@ 0xb0
 8006a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e025      	b.n	8006a76 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11f      	bne.n	8006a74 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006a3c:	4b10      	ldr	r3, [pc, #64]	@ (8006a80 <USBD_CDC_TransmitPacket+0x7c>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	f003 020f 	and.w	r2, r3, #15
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4403      	add	r3, r0
 8006a56:	3318      	adds	r3, #24
 8006a58:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006a5a:	4b09      	ldr	r3, [pc, #36]	@ (8006a80 <USBD_CDC_TransmitPacket+0x7c>)
 8006a5c:	7819      	ldrb	r1, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f002 f901 	bl	8008c72 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	2000009b 	.word	0x2000009b

08006a84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	32b0      	adds	r2, #176	@ 0xb0
 8006a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	32b0      	adds	r2, #176	@ 0xb0
 8006aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e018      	b.n	8006ae4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7c1b      	ldrb	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006aba:	4b0c      	ldr	r3, [pc, #48]	@ (8006aec <USBD_CDC_ReceivePacket+0x68>)
 8006abc:	7819      	ldrb	r1, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ac4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f002 f8f3 	bl	8008cb4 <USBD_LL_PrepareReceive>
 8006ace:	e008      	b.n	8006ae2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <USBD_CDC_ReceivePacket+0x68>)
 8006ad2:	7819      	ldrb	r1, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ada:	2340      	movs	r3, #64	@ 0x40
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f002 f8e9 	bl	8008cb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	2000009c 	.word	0x2000009c

08006af0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e01f      	b.n	8006b48 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	79fa      	ldrb	r2, [r7, #7]
 8006b3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f001 ff63 	bl	8008a08 <USBD_LL_Init>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e025      	b.n	8006bb4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	32ae      	adds	r2, #174	@ 0xae
 8006b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00f      	beq.n	8006ba4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	32ae      	adds	r2, #174	@ 0xae
 8006b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b94:	f107 020e 	add.w	r2, r7, #14
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4798      	blx	r3
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 ff6b 	bl	8008aa0 <USBD_LL_Start>
 8006bca:	4603      	mov	r3, r0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	78fa      	ldrb	r2, [r7, #3]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
 8006c14:	4603      	mov	r3, r0
 8006c16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	4798      	blx	r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f001 f90c 	bl	8007e86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006c8a:	f003 031f 	and.w	r3, r3, #31
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d01a      	beq.n	8006cc8 <USBD_LL_SetupStage+0x72>
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d822      	bhi.n	8006cdc <USBD_LL_SetupStage+0x86>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <USBD_LL_SetupStage+0x4a>
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d00a      	beq.n	8006cb4 <USBD_LL_SetupStage+0x5e>
 8006c9e:	e01d      	b.n	8006cdc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb63 	bl	8007374 <USBD_StdDevReq>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb2:	e020      	b.n	8006cf6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fbcb 	bl	8007458 <USBD_StdItfReq>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc6:	e016      	b.n	8006cf6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fc2d 	bl	8007530 <USBD_StdEPReq>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006cda:	e00c      	b.n	8006cf6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ce2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 ff38 	bl	8008b60 <USBD_LL_StallEP>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf4:	bf00      	nop
  }

  return ret;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006d12:	7afb      	ldrb	r3, [r7, #11]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d16e      	bne.n	8006df6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006d1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	f040 8098 	bne.w	8006e5c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d913      	bls.n	8006d60 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	1ad2      	subs	r2, r2, r3
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	bf28      	it	cs
 8006d52:	4613      	movcs	r3, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f001 f994 	bl	8008086 <USBD_CtlContinueRx>
 8006d5e:	e07d      	b.n	8006e5c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d014      	beq.n	8006d98 <USBD_LL_DataOutStage+0x98>
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d81d      	bhi.n	8006dae <USBD_LL_DataOutStage+0xae>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <USBD_LL_DataOutStage+0x7c>
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d003      	beq.n	8006d82 <USBD_LL_DataOutStage+0x82>
 8006d7a:	e018      	b.n	8006dae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	75bb      	strb	r3, [r7, #22]
            break;
 8006d80:	e018      	b.n	8006db4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fa64 	bl	800725a <USBD_CoreFindIF>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75bb      	strb	r3, [r7, #22]
            break;
 8006d96:	e00d      	b.n	8006db4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	4619      	mov	r1, r3
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fa66 	bl	8007274 <USBD_CoreFindEP>
 8006da8:	4603      	mov	r3, r0
 8006daa:	75bb      	strb	r3, [r7, #22]
            break;
 8006dac:	e002      	b.n	8006db4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	75bb      	strb	r3, [r7, #22]
            break;
 8006db2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006db4:	7dbb      	ldrb	r3, [r7, #22]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d119      	bne.n	8006dee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d113      	bne.n	8006dee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006dc6:	7dba      	ldrb	r2, [r7, #22]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	32ae      	adds	r2, #174	@ 0xae
 8006dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006dd6:	7dba      	ldrb	r2, [r7, #22]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006dde:	7dba      	ldrb	r2, [r7, #22]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	32ae      	adds	r2, #174	@ 0xae
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f001 f95a 	bl	80080a8 <USBD_CtlSendStatus>
 8006df4:	e032      	b.n	8006e5c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fa37 	bl	8007274 <USBD_CoreFindEP>
 8006e06:	4603      	mov	r3, r0
 8006e08:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e0a:	7dbb      	ldrb	r3, [r7, #22]
 8006e0c:	2bff      	cmp	r3, #255	@ 0xff
 8006e0e:	d025      	beq.n	8006e5c <USBD_LL_DataOutStage+0x15c>
 8006e10:	7dbb      	ldrb	r3, [r7, #22]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d122      	bne.n	8006e5c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d117      	bne.n	8006e52 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006e22:	7dba      	ldrb	r2, [r7, #22]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	32ae      	adds	r2, #174	@ 0xae
 8006e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00f      	beq.n	8006e52 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006e32:	7dba      	ldrb	r2, [r7, #22]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006e3a:	7dba      	ldrb	r2, [r7, #22]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	32ae      	adds	r2, #174	@ 0xae
 8006e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	7afa      	ldrb	r2, [r7, #11]
 8006e48:	4611      	mov	r1, r2
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	4798      	blx	r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
 8006e5a:	e000      	b.n	8006e5e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d16f      	bne.n	8006f5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3314      	adds	r3, #20
 8006e7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d15a      	bne.n	8006f40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d914      	bls.n	8006ec0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f001 f8bc 	bl	800802a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f001 fefb 	bl	8008cb4 <USBD_LL_PrepareReceive>
 8006ebe:	e03f      	b.n	8006f40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d11c      	bne.n	8006f06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d316      	bcc.n	8006f06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d20f      	bcs.n	8006f06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2100      	movs	r1, #0
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f001 f89d 	bl	800802a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2200      	movs	r2, #0
 8006efc:	2100      	movs	r1, #0
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f001 fed8 	bl	8008cb4 <USBD_LL_PrepareReceive>
 8006f04:	e01c      	b.n	8006f40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d10f      	bne.n	8006f32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d009      	beq.n	8006f32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f32:	2180      	movs	r1, #128	@ 0x80
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f001 fe13 	bl	8008b60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f001 f8c7 	bl	80080ce <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d03a      	beq.n	8006fc0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f7ff fe42 	bl	8006bd4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006f58:	e032      	b.n	8006fc0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
 8006f5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f985 	bl	8007274 <USBD_CoreFindEP>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2bff      	cmp	r3, #255	@ 0xff
 8006f72:	d025      	beq.n	8006fc0 <USBD_LL_DataInStage+0x15a>
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d122      	bne.n	8006fc0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d11c      	bne.n	8006fc0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006f86:	7dfa      	ldrb	r2, [r7, #23]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	32ae      	adds	r2, #174	@ 0xae
 8006f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d014      	beq.n	8006fc0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006f96:	7dfa      	ldrb	r2, [r7, #23]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006f9e:	7dfa      	ldrb	r2, [r7, #23]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	32ae      	adds	r2, #174	@ 0xae
 8006fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	7afa      	ldrb	r2, [r7, #11]
 8006fac:	4611      	mov	r1, r2
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	4798      	blx	r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006fb6:	7dbb      	ldrb	r3, [r7, #22]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006fbc:	7dbb      	ldrb	r3, [r7, #22]
 8006fbe:	e000      	b.n	8006fc2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d014      	beq.n	8007030 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00e      	beq.n	8007030 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6852      	ldr	r2, [r2, #4]
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	4611      	mov	r1, r2
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800702c:	2303      	movs	r3, #3
 800702e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007030:	2340      	movs	r3, #64	@ 0x40
 8007032:	2200      	movs	r2, #0
 8007034:	2100      	movs	r1, #0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fd4d 	bl	8008ad6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2240      	movs	r2, #64	@ 0x40
 8007048:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800704c:	2340      	movs	r3, #64	@ 0x40
 800704e:	2200      	movs	r2, #0
 8007050:	2180      	movs	r1, #128	@ 0x80
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 fd3f 	bl	8008ad6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2240      	movs	r2, #64	@ 0x40
 8007062:	621a      	str	r2, [r3, #32]

  return ret;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	78fa      	ldrb	r2, [r7, #3]
 800707e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d006      	beq.n	80070b0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2204      	movs	r2, #4
 80070b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d106      	bne.n	80070e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d110      	bne.n	800712c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b082      	sub	sp, #8
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	460b      	mov	r3, r1
 8007140:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	32ae      	adds	r2, #174	@ 0xae
 800714c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	e01c      	b.n	8007192 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b03      	cmp	r3, #3
 8007162:	d115      	bne.n	8007190 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	32ae      	adds	r2, #174	@ 0xae
 800716e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	32ae      	adds	r2, #174	@ 0xae
 8007182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	78fa      	ldrb	r2, [r7, #3]
 800718a:	4611      	mov	r1, r2
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	32ae      	adds	r2, #174	@ 0xae
 80071b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e01c      	b.n	80071f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d115      	bne.n	80071f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32ae      	adds	r2, #174	@ 0xae
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32ae      	adds	r2, #174	@ 0xae
 80071e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ec:	78fa      	ldrb	r2, [r7, #3]
 80071ee:	4611      	mov	r1, r2
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00e      	beq.n	8007250 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6852      	ldr	r2, [r2, #4]
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	4611      	mov	r1, r2
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	4798      	blx	r3
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800724c:	2303      	movs	r3, #3
 800724e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007250:	7bfb      	ldrb	r3, [r7, #15]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007266:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007280:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b086      	sub	sp, #24
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	885b      	ldrh	r3, [r3, #2]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	7812      	ldrb	r2, [r2, #0]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d91f      	bls.n	80072f4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80072ba:	e013      	b.n	80072e4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80072bc:	f107 030a 	add.w	r3, r7, #10
 80072c0:	4619      	mov	r1, r3
 80072c2:	6978      	ldr	r0, [r7, #20]
 80072c4:	f000 f81b 	bl	80072fe <USBD_GetNextDesc>
 80072c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d108      	bne.n	80072e4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	789b      	ldrb	r3, [r3, #2]
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d008      	beq.n	80072f2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	885b      	ldrh	r3, [r3, #2]
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	897b      	ldrh	r3, [r7, #10]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d8e5      	bhi.n	80072bc <USBD_GetEpDesc+0x2e>
 80072f0:	e000      	b.n	80072f4 <USBD_GetEpDesc+0x66>
          break;
 80072f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80072f4:	693b      	ldr	r3, [r7, #16]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80072fe:	b480      	push	{r7}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	4413      	add	r3, r2
 8007316:	b29a      	uxth	r2, r3
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4413      	add	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007328:	68fb      	ldr	r3, [r7, #12]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007336:	b480      	push	{r7}
 8007338:	b087      	sub	sp, #28
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	3301      	adds	r3, #1
 800734c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007354:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007358:	021b      	lsls	r3, r3, #8
 800735a:	b21a      	sxth	r2, r3
 800735c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007360:	4313      	orrs	r3, r2
 8007362:	b21b      	sxth	r3, r3
 8007364:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007366:	89fb      	ldrh	r3, [r7, #14]
}
 8007368:	4618      	mov	r0, r3
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800738a:	2b40      	cmp	r3, #64	@ 0x40
 800738c:	d005      	beq.n	800739a <USBD_StdDevReq+0x26>
 800738e:	2b40      	cmp	r3, #64	@ 0x40
 8007390:	d857      	bhi.n	8007442 <USBD_StdDevReq+0xce>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00f      	beq.n	80073b6 <USBD_StdDevReq+0x42>
 8007396:	2b20      	cmp	r3, #32
 8007398:	d153      	bne.n	8007442 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	32ae      	adds	r2, #174	@ 0xae
 80073a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	4798      	blx	r3
 80073b0:	4603      	mov	r3, r0
 80073b2:	73fb      	strb	r3, [r7, #15]
      break;
 80073b4:	e04a      	b.n	800744c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	785b      	ldrb	r3, [r3, #1]
 80073ba:	2b09      	cmp	r3, #9
 80073bc:	d83b      	bhi.n	8007436 <USBD_StdDevReq+0xc2>
 80073be:	a201      	add	r2, pc, #4	@ (adr r2, 80073c4 <USBD_StdDevReq+0x50>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	08007419 	.word	0x08007419
 80073c8:	0800742d 	.word	0x0800742d
 80073cc:	08007437 	.word	0x08007437
 80073d0:	08007423 	.word	0x08007423
 80073d4:	08007437 	.word	0x08007437
 80073d8:	080073f7 	.word	0x080073f7
 80073dc:	080073ed 	.word	0x080073ed
 80073e0:	08007437 	.word	0x08007437
 80073e4:	0800740f 	.word	0x0800740f
 80073e8:	08007401 	.word	0x08007401
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa3c 	bl	800786c <USBD_GetDescriptor>
          break;
 80073f4:	e024      	b.n	8007440 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fba1 	bl	8007b40 <USBD_SetAddress>
          break;
 80073fe:	e01f      	b.n	8007440 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fbe0 	bl	8007bc8 <USBD_SetConfig>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
          break;
 800740c:	e018      	b.n	8007440 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fc83 	bl	8007d1c <USBD_GetConfig>
          break;
 8007416:	e013      	b.n	8007440 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fcb4 	bl	8007d88 <USBD_GetStatus>
          break;
 8007420:	e00e      	b.n	8007440 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fce3 	bl	8007df0 <USBD_SetFeature>
          break;
 800742a:	e009      	b.n	8007440 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fd07 	bl	8007e42 <USBD_ClrFeature>
          break;
 8007434:	e004      	b.n	8007440 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fd5e 	bl	8007efa <USBD_CtlError>
          break;
 800743e:	bf00      	nop
      }
      break;
 8007440:	e004      	b.n	800744c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fd58 	bl	8007efa <USBD_CtlError>
      break;
 800744a:	bf00      	nop
  }

  return ret;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop

08007458 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800746e:	2b40      	cmp	r3, #64	@ 0x40
 8007470:	d005      	beq.n	800747e <USBD_StdItfReq+0x26>
 8007472:	2b40      	cmp	r3, #64	@ 0x40
 8007474:	d852      	bhi.n	800751c <USBD_StdItfReq+0xc4>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <USBD_StdItfReq+0x26>
 800747a:	2b20      	cmp	r3, #32
 800747c:	d14e      	bne.n	800751c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007484:	b2db      	uxtb	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	2b02      	cmp	r3, #2
 800748a:	d840      	bhi.n	800750e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	889b      	ldrh	r3, [r3, #4]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b01      	cmp	r3, #1
 8007494:	d836      	bhi.n	8007504 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	889b      	ldrh	r3, [r3, #4]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fedb 	bl	800725a <USBD_CoreFindIF>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2bff      	cmp	r3, #255	@ 0xff
 80074ac:	d01d      	beq.n	80074ea <USBD_StdItfReq+0x92>
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d11a      	bne.n	80074ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80074b4:	7bba      	ldrb	r2, [r7, #14]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32ae      	adds	r2, #174	@ 0xae
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00f      	beq.n	80074e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80074c4:	7bba      	ldrb	r2, [r7, #14]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80074cc:	7bba      	ldrb	r2, [r7, #14]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	32ae      	adds	r2, #174	@ 0xae
 80074d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80074e2:	e004      	b.n	80074ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80074e8:	e001      	b.n	80074ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80074ea:	2303      	movs	r3, #3
 80074ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	88db      	ldrh	r3, [r3, #6]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d110      	bne.n	8007518 <USBD_StdItfReq+0xc0>
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10d      	bne.n	8007518 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fdd3 	bl	80080a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007502:	e009      	b.n	8007518 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fcf7 	bl	8007efa <USBD_CtlError>
          break;
 800750c:	e004      	b.n	8007518 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fcf2 	bl	8007efa <USBD_CtlError>
          break;
 8007516:	e000      	b.n	800751a <USBD_StdItfReq+0xc2>
          break;
 8007518:	bf00      	nop
      }
      break;
 800751a:	e004      	b.n	8007526 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fceb 	bl	8007efa <USBD_CtlError>
      break;
 8007524:	bf00      	nop
  }

  return ret;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	889b      	ldrh	r3, [r3, #4]
 8007542:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800754c:	2b40      	cmp	r3, #64	@ 0x40
 800754e:	d007      	beq.n	8007560 <USBD_StdEPReq+0x30>
 8007550:	2b40      	cmp	r3, #64	@ 0x40
 8007552:	f200 817f 	bhi.w	8007854 <USBD_StdEPReq+0x324>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d02a      	beq.n	80075b0 <USBD_StdEPReq+0x80>
 800755a:	2b20      	cmp	r3, #32
 800755c:	f040 817a 	bne.w	8007854 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff fe85 	bl	8007274 <USBD_CoreFindEP>
 800756a:	4603      	mov	r3, r0
 800756c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800756e:	7b7b      	ldrb	r3, [r7, #13]
 8007570:	2bff      	cmp	r3, #255	@ 0xff
 8007572:	f000 8174 	beq.w	800785e <USBD_StdEPReq+0x32e>
 8007576:	7b7b      	ldrb	r3, [r7, #13]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f040 8170 	bne.w	800785e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800757e:	7b7a      	ldrb	r2, [r7, #13]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007586:	7b7a      	ldrb	r2, [r7, #13]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	32ae      	adds	r2, #174	@ 0xae
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 8163 	beq.w	800785e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007598:	7b7a      	ldrb	r2, [r7, #13]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	32ae      	adds	r2, #174	@ 0xae
 800759e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
 80075aa:	4603      	mov	r3, r0
 80075ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075ae:	e156      	b.n	800785e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d008      	beq.n	80075ca <USBD_StdEPReq+0x9a>
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	f300 8145 	bgt.w	8007848 <USBD_StdEPReq+0x318>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 809b 	beq.w	80076fa <USBD_StdEPReq+0x1ca>
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d03c      	beq.n	8007642 <USBD_StdEPReq+0x112>
 80075c8:	e13e      	b.n	8007848 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d002      	beq.n	80075dc <USBD_StdEPReq+0xac>
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d016      	beq.n	8007608 <USBD_StdEPReq+0xd8>
 80075da:	e02c      	b.n	8007636 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075dc:	7bbb      	ldrb	r3, [r7, #14]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00d      	beq.n	80075fe <USBD_StdEPReq+0xce>
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	2b80      	cmp	r3, #128	@ 0x80
 80075e6:	d00a      	beq.n	80075fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 fab7 	bl	8008b60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075f2:	2180      	movs	r1, #128	@ 0x80
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fab3 	bl	8008b60 <USBD_LL_StallEP>
 80075fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075fc:	e020      	b.n	8007640 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fc7a 	bl	8007efa <USBD_CtlError>
              break;
 8007606:	e01b      	b.n	8007640 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	885b      	ldrh	r3, [r3, #2]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10e      	bne.n	800762e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00b      	beq.n	800762e <USBD_StdEPReq+0xfe>
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	2b80      	cmp	r3, #128	@ 0x80
 800761a:	d008      	beq.n	800762e <USBD_StdEPReq+0xfe>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	88db      	ldrh	r3, [r3, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 fa99 	bl	8008b60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fd3a 	bl	80080a8 <USBD_CtlSendStatus>

              break;
 8007634:	e004      	b.n	8007640 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fc5e 	bl	8007efa <USBD_CtlError>
              break;
 800763e:	bf00      	nop
          }
          break;
 8007640:	e107      	b.n	8007852 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d002      	beq.n	8007654 <USBD_StdEPReq+0x124>
 800764e:	2b03      	cmp	r3, #3
 8007650:	d016      	beq.n	8007680 <USBD_StdEPReq+0x150>
 8007652:	e04b      	b.n	80076ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00d      	beq.n	8007676 <USBD_StdEPReq+0x146>
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b80      	cmp	r3, #128	@ 0x80
 800765e:	d00a      	beq.n	8007676 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 fa7b 	bl	8008b60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800766a:	2180      	movs	r1, #128	@ 0x80
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 fa77 	bl	8008b60 <USBD_LL_StallEP>
 8007672:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007674:	e040      	b.n	80076f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fc3e 	bl	8007efa <USBD_CtlError>
              break;
 800767e:	e03b      	b.n	80076f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	885b      	ldrh	r3, [r3, #2]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d136      	bne.n	80076f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800768e:	2b00      	cmp	r3, #0
 8007690:	d004      	beq.n	800769c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007692:	7bbb      	ldrb	r3, [r7, #14]
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fa81 	bl	8008b9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fd03 	bl	80080a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff fde4 	bl	8007274 <USBD_CoreFindEP>
 80076ac:	4603      	mov	r3, r0
 80076ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076b0:	7b7b      	ldrb	r3, [r7, #13]
 80076b2:	2bff      	cmp	r3, #255	@ 0xff
 80076b4:	d01f      	beq.n	80076f6 <USBD_StdEPReq+0x1c6>
 80076b6:	7b7b      	ldrb	r3, [r7, #13]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d11c      	bne.n	80076f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80076bc:	7b7a      	ldrb	r2, [r7, #13]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80076c4:	7b7a      	ldrb	r2, [r7, #13]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	32ae      	adds	r2, #174	@ 0xae
 80076ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d010      	beq.n	80076f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076d4:	7b7a      	ldrb	r2, [r7, #13]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	32ae      	adds	r2, #174	@ 0xae
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80076ea:	e004      	b.n	80076f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fc03 	bl	8007efa <USBD_CtlError>
              break;
 80076f4:	e000      	b.n	80076f8 <USBD_StdEPReq+0x1c8>
              break;
 80076f6:	bf00      	nop
          }
          break;
 80076f8:	e0ab      	b.n	8007852 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d002      	beq.n	800770c <USBD_StdEPReq+0x1dc>
 8007706:	2b03      	cmp	r3, #3
 8007708:	d032      	beq.n	8007770 <USBD_StdEPReq+0x240>
 800770a:	e097      	b.n	800783c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <USBD_StdEPReq+0x1f2>
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	2b80      	cmp	r3, #128	@ 0x80
 8007716:	d004      	beq.n	8007722 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fbed 	bl	8007efa <USBD_CtlError>
                break;
 8007720:	e091      	b.n	8007846 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	da0b      	bge.n	8007742 <USBD_StdEPReq+0x212>
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	3310      	adds	r3, #16
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	4413      	add	r3, r2
 800773e:	3304      	adds	r3, #4
 8007740:	e00b      	b.n	800775a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007748:	4613      	mov	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	4413      	add	r3, r2
 8007758:	3304      	adds	r3, #4
 800775a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2202      	movs	r2, #2
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fc43 	bl	8007ff4 <USBD_CtlSendData>
              break;
 800776e:	e06a      	b.n	8007846 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007774:	2b00      	cmp	r3, #0
 8007776:	da11      	bge.n	800779c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	f003 020f 	and.w	r2, r3, #15
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	3324      	adds	r3, #36	@ 0x24
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d117      	bne.n	80077c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fbb0 	bl	8007efa <USBD_CtlError>
                  break;
 800779a:	e054      	b.n	8007846 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	f003 020f 	and.w	r2, r3, #15
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	440b      	add	r3, r1
 80077ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d104      	bne.n	80077c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fb9d 	bl	8007efa <USBD_CtlError>
                  break;
 80077c0:	e041      	b.n	8007846 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da0b      	bge.n	80077e2 <USBD_StdEPReq+0x2b2>
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	3310      	adds	r3, #16
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	4413      	add	r3, r2
 80077de:	3304      	adds	r3, #4
 80077e0:	e00b      	b.n	80077fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	4413      	add	r3, r2
 80077f8:	3304      	adds	r3, #4
 80077fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <USBD_StdEPReq+0x2d8>
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b80      	cmp	r3, #128	@ 0x80
 8007806:	d103      	bne.n	8007810 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	e00e      	b.n	800782e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 f9e1 	bl	8008bdc <USBD_LL_IsStallEP>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2201      	movs	r2, #1
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e002      	b.n	800782e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2202      	movs	r2, #2
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fbdd 	bl	8007ff4 <USBD_CtlSendData>
              break;
 800783a:	e004      	b.n	8007846 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fb5b 	bl	8007efa <USBD_CtlError>
              break;
 8007844:	bf00      	nop
          }
          break;
 8007846:	e004      	b.n	8007852 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fb55 	bl	8007efa <USBD_CtlError>
          break;
 8007850:	bf00      	nop
      }
      break;
 8007852:	e005      	b.n	8007860 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fb4f 	bl	8007efa <USBD_CtlError>
      break;
 800785c:	e000      	b.n	8007860 <USBD_StdEPReq+0x330>
      break;
 800785e:	bf00      	nop
  }

  return ret;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	885b      	ldrh	r3, [r3, #2]
 8007886:	0a1b      	lsrs	r3, r3, #8
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	2b06      	cmp	r3, #6
 800788e:	f200 8128 	bhi.w	8007ae2 <USBD_GetDescriptor+0x276>
 8007892:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <USBD_GetDescriptor+0x2c>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	080078b5 	.word	0x080078b5
 800789c:	080078cd 	.word	0x080078cd
 80078a0:	0800790d 	.word	0x0800790d
 80078a4:	08007ae3 	.word	0x08007ae3
 80078a8:	08007ae3 	.word	0x08007ae3
 80078ac:	08007a83 	.word	0x08007a83
 80078b0:	08007aaf 	.word	0x08007aaf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	7c12      	ldrb	r2, [r2, #16]
 80078c0:	f107 0108 	add.w	r1, r7, #8
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	60f8      	str	r0, [r7, #12]
      break;
 80078ca:	e112      	b.n	8007af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	7c1b      	ldrb	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10d      	bne.n	80078f0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	f107 0208 	add.w	r2, r7, #8
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3301      	adds	r3, #1
 80078ea:	2202      	movs	r2, #2
 80078ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078ee:	e100      	b.n	8007af2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	f107 0208 	add.w	r2, r7, #8
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	2202      	movs	r2, #2
 8007908:	701a      	strb	r2, [r3, #0]
      break;
 800790a:	e0f2      	b.n	8007af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	885b      	ldrh	r3, [r3, #2]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b05      	cmp	r3, #5
 8007914:	f200 80ac 	bhi.w	8007a70 <USBD_GetDescriptor+0x204>
 8007918:	a201      	add	r2, pc, #4	@ (adr r2, 8007920 <USBD_GetDescriptor+0xb4>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	08007939 	.word	0x08007939
 8007924:	0800796d 	.word	0x0800796d
 8007928:	080079a1 	.word	0x080079a1
 800792c:	080079d5 	.word	0x080079d5
 8007930:	08007a09 	.word	0x08007a09
 8007934:	08007a3d 	.word	0x08007a3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	7c12      	ldrb	r2, [r2, #16]
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
 8007958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795a:	e091      	b.n	8007a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 facb 	bl	8007efa <USBD_CtlError>
            err++;
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	3301      	adds	r3, #1
 8007968:	72fb      	strb	r3, [r7, #11]
          break;
 800796a:	e089      	b.n	8007a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	7c12      	ldrb	r2, [r2, #16]
 8007984:	f107 0108 	add.w	r1, r7, #8
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800798e:	e077      	b.n	8007a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fab1 	bl	8007efa <USBD_CtlError>
            err++;
 8007998:	7afb      	ldrb	r3, [r7, #11]
 800799a:	3301      	adds	r3, #1
 800799c:	72fb      	strb	r3, [r7, #11]
          break;
 800799e:	e06f      	b.n	8007a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7c12      	ldrb	r2, [r2, #16]
 80079b8:	f107 0108 	add.w	r1, r7, #8
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c2:	e05d      	b.n	8007a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fa97 	bl	8007efa <USBD_CtlError>
            err++;
 80079cc:	7afb      	ldrb	r3, [r7, #11]
 80079ce:	3301      	adds	r3, #1
 80079d0:	72fb      	strb	r3, [r7, #11]
          break;
 80079d2:	e055      	b.n	8007a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	7c12      	ldrb	r2, [r2, #16]
 80079ec:	f107 0108 	add.w	r1, r7, #8
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
 80079f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079f6:	e043      	b.n	8007a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa7d 	bl	8007efa <USBD_CtlError>
            err++;
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	3301      	adds	r3, #1
 8007a04:	72fb      	strb	r3, [r7, #11]
          break;
 8007a06:	e03b      	b.n	8007a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	7c12      	ldrb	r2, [r2, #16]
 8007a20:	f107 0108 	add.w	r1, r7, #8
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
 8007a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2a:	e029      	b.n	8007a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa63 	bl	8007efa <USBD_CtlError>
            err++;
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	3301      	adds	r3, #1
 8007a38:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3a:	e021      	b.n	8007a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	7c12      	ldrb	r2, [r2, #16]
 8007a54:	f107 0108 	add.w	r1, r7, #8
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a5e:	e00f      	b.n	8007a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa49 	bl	8007efa <USBD_CtlError>
            err++;
 8007a68:	7afb      	ldrb	r3, [r7, #11]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a6e:	e007      	b.n	8007a80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa41 	bl	8007efa <USBD_CtlError>
          err++;
 8007a78:	7afb      	ldrb	r3, [r7, #11]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007a7e:	bf00      	nop
      }
      break;
 8007a80:	e037      	b.n	8007af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	7c1b      	ldrb	r3, [r3, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a92:	f107 0208 	add.w	r2, r7, #8
 8007a96:	4610      	mov	r0, r2
 8007a98:	4798      	blx	r3
 8007a9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a9c:	e029      	b.n	8007af2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fa2a 	bl	8007efa <USBD_CtlError>
        err++;
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8007aac:	e021      	b.n	8007af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	7c1b      	ldrb	r3, [r3, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10d      	bne.n	8007ad2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abe:	f107 0208 	add.w	r2, r7, #8
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4798      	blx	r3
 8007ac6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
 8007acc:	2207      	movs	r2, #7
 8007ace:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ad0:	e00f      	b.n	8007af2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fa10 	bl	8007efa <USBD_CtlError>
        err++;
 8007ada:	7afb      	ldrb	r3, [r7, #11]
 8007adc:	3301      	adds	r3, #1
 8007ade:	72fb      	strb	r3, [r7, #11]
      break;
 8007ae0:	e007      	b.n	8007af2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fa08 	bl	8007efa <USBD_CtlError>
      err++;
 8007aea:	7afb      	ldrb	r3, [r7, #11]
 8007aec:	3301      	adds	r3, #1
 8007aee:	72fb      	strb	r3, [r7, #11]
      break;
 8007af0:	bf00      	nop
  }

  if (err != 0U)
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d11e      	bne.n	8007b36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	88db      	ldrh	r3, [r3, #6]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d016      	beq.n	8007b2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b00:	893b      	ldrh	r3, [r7, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00e      	beq.n	8007b24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	88da      	ldrh	r2, [r3, #6]
 8007b0a:	893b      	ldrh	r3, [r7, #8]
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	bf28      	it	cs
 8007b10:	4613      	movcs	r3, r2
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b16:	893b      	ldrh	r3, [r7, #8]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	68f9      	ldr	r1, [r7, #12]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fa69 	bl	8007ff4 <USBD_CtlSendData>
 8007b22:	e009      	b.n	8007b38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9e7 	bl	8007efa <USBD_CtlError>
 8007b2c:	e004      	b.n	8007b38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 faba 	bl	80080a8 <USBD_CtlSendStatus>
 8007b34:	e000      	b.n	8007b38 <USBD_GetDescriptor+0x2cc>
    return;
 8007b36:	bf00      	nop
  }
}
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop

08007b40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	889b      	ldrh	r3, [r3, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d131      	bne.n	8007bb6 <USBD_SetAddress+0x76>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	88db      	ldrh	r3, [r3, #6]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d12d      	bne.n	8007bb6 <USBD_SetAddress+0x76>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	885b      	ldrh	r3, [r3, #2]
 8007b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b60:	d829      	bhi.n	8007bb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	885b      	ldrh	r3, [r3, #2]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d104      	bne.n	8007b84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f9bc 	bl	8007efa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b82:	e01d      	b.n	8007bc0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7bfa      	ldrb	r2, [r7, #15]
 8007b88:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 f84f 	bl	8008c34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa86 	bl	80080a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d004      	beq.n	8007bac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007baa:	e009      	b.n	8007bc0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb4:	e004      	b.n	8007bc0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f99e 	bl	8007efa <USBD_CtlError>
  }
}
 8007bbe:	bf00      	nop
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	885b      	ldrh	r3, [r3, #2]
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007bde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007be0:	4b4d      	ldr	r3, [pc, #308]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d905      	bls.n	8007bf4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f985 	bl	8007efa <USBD_CtlError>
    return USBD_FAIL;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e08c      	b.n	8007d0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d002      	beq.n	8007c06 <USBD_SetConfig+0x3e>
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d029      	beq.n	8007c58 <USBD_SetConfig+0x90>
 8007c04:	e075      	b.n	8007cf2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c06:	4b44      	ldr	r3, [pc, #272]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d020      	beq.n	8007c50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007c0e:	4b42      	ldr	r3, [pc, #264]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c18:	4b3f      	ldr	r3, [pc, #252]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7fe ffe3 	bl	8006bea <USBD_SetClassConfig>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d008      	beq.n	8007c40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f962 	bl	8007efa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c3e:	e065      	b.n	8007d0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fa31 	bl	80080a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2203      	movs	r2, #3
 8007c4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007c4e:	e05d      	b.n	8007d0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fa29 	bl	80080a8 <USBD_CtlSendStatus>
      break;
 8007c56:	e059      	b.n	8007d0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c58:	4b2f      	ldr	r3, [pc, #188]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d112      	bne.n	8007c86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007c68:	4b2b      	ldr	r3, [pc, #172]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c72:	4b29      	ldr	r3, [pc, #164]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7fe ffd2 	bl	8006c22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa12 	bl	80080a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c84:	e042      	b.n	8007d0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007c86:	4b24      	ldr	r3, [pc, #144]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d02a      	beq.n	8007cea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7fe ffc0 	bl	8006c22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cac:	4b1a      	ldr	r3, [pc, #104]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7fe ff99 	bl	8006bea <USBD_SetClassConfig>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00f      	beq.n	8007ce2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f918 	bl	8007efa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7fe ffa5 	bl	8006c22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ce0:	e014      	b.n	8007d0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f9e0 	bl	80080a8 <USBD_CtlSendStatus>
      break;
 8007ce8:	e010      	b.n	8007d0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f9dc 	bl	80080a8 <USBD_CtlSendStatus>
      break;
 8007cf0:	e00c      	b.n	8007d0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f900 	bl	8007efa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cfa:	4b07      	ldr	r3, [pc, #28]	@ (8007d18 <USBD_SetConfig+0x150>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7fe ff8e 	bl	8006c22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d06:	2303      	movs	r3, #3
 8007d08:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0a:	bf00      	nop
  }

  return ret;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20000344 	.word	0x20000344

08007d1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	88db      	ldrh	r3, [r3, #6]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d004      	beq.n	8007d38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f8e2 	bl	8007efa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d36:	e023      	b.n	8007d80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	dc02      	bgt.n	8007d4a <USBD_GetConfig+0x2e>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dc03      	bgt.n	8007d50 <USBD_GetConfig+0x34>
 8007d48:	e015      	b.n	8007d76 <USBD_GetConfig+0x5a>
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d00b      	beq.n	8007d66 <USBD_GetConfig+0x4a>
 8007d4e:	e012      	b.n	8007d76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3308      	adds	r3, #8
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f948 	bl	8007ff4 <USBD_CtlSendData>
        break;
 8007d64:	e00c      	b.n	8007d80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f940 	bl	8007ff4 <USBD_CtlSendData>
        break;
 8007d74:	e004      	b.n	8007d80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8be 	bl	8007efa <USBD_CtlError>
        break;
 8007d7e:	bf00      	nop
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d81e      	bhi.n	8007dde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	88db      	ldrh	r3, [r3, #6]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d004      	beq.n	8007db2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f8a5 	bl	8007efa <USBD_CtlError>
        break;
 8007db0:	e01a      	b.n	8007de8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f043 0202 	orr.w	r2, r3, #2
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f90c 	bl	8007ff4 <USBD_CtlSendData>
      break;
 8007ddc:	e004      	b.n	8007de8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f88a 	bl	8007efa <USBD_CtlError>
      break;
 8007de6:	bf00      	nop
  }
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	885b      	ldrh	r3, [r3, #2]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d107      	bne.n	8007e12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f94c 	bl	80080a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007e10:	e013      	b.n	8007e3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	885b      	ldrh	r3, [r3, #2]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d10b      	bne.n	8007e32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	889b      	ldrh	r3, [r3, #4]
 8007e1e:	0a1b      	lsrs	r3, r3, #8
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f93c 	bl	80080a8 <USBD_CtlSendStatus>
}
 8007e30:	e003      	b.n	8007e3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f860 	bl	8007efa <USBD_CtlError>
}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	3b01      	subs	r3, #1
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d80b      	bhi.n	8007e72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	885b      	ldrh	r3, [r3, #2]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d10c      	bne.n	8007e7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f91c 	bl	80080a8 <USBD_CtlSendStatus>
      }
      break;
 8007e70:	e004      	b.n	8007e7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f840 	bl	8007efa <USBD_CtlError>
      break;
 8007e7a:	e000      	b.n	8007e7e <USBD_ClrFeature+0x3c>
      break;
 8007e7c:	bf00      	nop
  }
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	781a      	ldrb	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	781a      	ldrb	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3301      	adds	r3, #1
 8007eae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7ff fa40 	bl	8007336 <SWAPBYTE>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	461a      	mov	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7ff fa33 	bl	8007336 <SWAPBYTE>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	3301      	adds	r3, #1
 8007edc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f7ff fa26 	bl	8007336 <SWAPBYTE>
 8007eea:	4603      	mov	r3, r0
 8007eec:	461a      	mov	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	80da      	strh	r2, [r3, #6]
}
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f04:	2180      	movs	r1, #128	@ 0x80
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fe2a 	bl	8008b60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fe26 	bl	8008b60 <USBD_LL_StallEP>
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d042      	beq.n	8007fb8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007f36:	6938      	ldr	r0, [r7, #16]
 8007f38:	f000 f842 	bl	8007fc0 <USBD_GetLen>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	3301      	adds	r3, #1
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f46:	d808      	bhi.n	8007f5a <USBD_GetString+0x3e>
 8007f48:	6938      	ldr	r0, [r7, #16]
 8007f4a:	f000 f839 	bl	8007fc0 <USBD_GetLen>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	3301      	adds	r3, #1
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	e001      	b.n	8007f5e <USBD_GetString+0x42>
 8007f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	4413      	add	r3, r2
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	7812      	ldrb	r2, [r2, #0]
 8007f6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	3301      	adds	r3, #1
 8007f72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	4413      	add	r3, r2
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
 8007f80:	3301      	adds	r3, #1
 8007f82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f84:	e013      	b.n	8007fae <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	7812      	ldrb	r2, [r2, #0]
 8007f90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3301      	adds	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]
    idx++;
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	3301      	adds	r3, #1
 8007fac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e7      	bne.n	8007f86 <USBD_GetString+0x6a>
 8007fb6:	e000      	b.n	8007fba <USBD_GetString+0x9e>
    return;
 8007fb8:	bf00      	nop
  }
}
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007fd0:	e005      	b.n	8007fde <USBD_GetLen+0x1e>
  {
    len++;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1f5      	bne.n	8007fd2 <USBD_GetLen+0x12>
  }

  return len;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2202      	movs	r2, #2
 8008004:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	2100      	movs	r1, #0
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 fe29 	bl	8008c72 <USBD_LL_Transmit>

  return USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b084      	sub	sp, #16
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	2100      	movs	r1, #0
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 fe18 	bl	8008c72 <USBD_LL_Transmit>

  return USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2203      	movs	r2, #3
 800805c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	2100      	movs	r1, #0
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 fe1c 	bl	8008cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	2100      	movs	r1, #0
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 fe0b 	bl	8008cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2204      	movs	r2, #4
 80080b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080b8:	2300      	movs	r3, #0
 80080ba:	2200      	movs	r2, #0
 80080bc:	2100      	movs	r1, #0
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fdd7 	bl	8008c72 <USBD_LL_Transmit>

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2205      	movs	r2, #5
 80080da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080de:	2300      	movs	r3, #0
 80080e0:	2200      	movs	r2, #0
 80080e2:	2100      	movs	r1, #0
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fde5 	bl	8008cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080f8:	2200      	movs	r2, #0
 80080fa:	4912      	ldr	r1, [pc, #72]	@ (8008144 <MX_USB_DEVICE_Init+0x50>)
 80080fc:	4812      	ldr	r0, [pc, #72]	@ (8008148 <MX_USB_DEVICE_Init+0x54>)
 80080fe:	f7fe fcf7 	bl	8006af0 <USBD_Init>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008108:	f7f8 fd3c 	bl	8000b84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800810c:	490f      	ldr	r1, [pc, #60]	@ (800814c <MX_USB_DEVICE_Init+0x58>)
 800810e:	480e      	ldr	r0, [pc, #56]	@ (8008148 <MX_USB_DEVICE_Init+0x54>)
 8008110:	f7fe fd1e 	bl	8006b50 <USBD_RegisterClass>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800811a:	f7f8 fd33 	bl	8000b84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800811e:	490c      	ldr	r1, [pc, #48]	@ (8008150 <MX_USB_DEVICE_Init+0x5c>)
 8008120:	4809      	ldr	r0, [pc, #36]	@ (8008148 <MX_USB_DEVICE_Init+0x54>)
 8008122:	f7fe fc15 	bl	8006950 <USBD_CDC_RegisterInterface>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800812c:	f7f8 fd2a 	bl	8000b84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008130:	4805      	ldr	r0, [pc, #20]	@ (8008148 <MX_USB_DEVICE_Init+0x54>)
 8008132:	f7fe fd43 	bl	8006bbc <USBD_Start>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800813c:	f7f8 fd22 	bl	8000b84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008140:	bf00      	nop
 8008142:	bd80      	pop	{r7, pc}
 8008144:	200000b4 	.word	0x200000b4
 8008148:	20000348 	.word	0x20000348
 800814c:	20000020 	.word	0x20000020
 8008150:	200000a0 	.word	0x200000a0

08008154 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008158:	2200      	movs	r2, #0
 800815a:	4905      	ldr	r1, [pc, #20]	@ (8008170 <CDC_Init_FS+0x1c>)
 800815c:	4805      	ldr	r0, [pc, #20]	@ (8008174 <CDC_Init_FS+0x20>)
 800815e:	f7fe fc11 	bl	8006984 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008162:	4905      	ldr	r1, [pc, #20]	@ (8008178 <CDC_Init_FS+0x24>)
 8008164:	4803      	ldr	r0, [pc, #12]	@ (8008174 <CDC_Init_FS+0x20>)
 8008166:	f7fe fc2f 	bl	80069c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800816a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800816c:	4618      	mov	r0, r3
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20000e24 	.word	0x20000e24
 8008174:	20000348 	.word	0x20000348
 8008178:	20000624 	.word	0x20000624

0800817c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008180:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008182:	4618      	mov	r0, r3
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	6039      	str	r1, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
 8008198:	4613      	mov	r3, r2
 800819a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	2b23      	cmp	r3, #35	@ 0x23
 80081a0:	d84a      	bhi.n	8008238 <CDC_Control_FS+0xac>
 80081a2:	a201      	add	r2, pc, #4	@ (adr r2, 80081a8 <CDC_Control_FS+0x1c>)
 80081a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a8:	08008239 	.word	0x08008239
 80081ac:	08008239 	.word	0x08008239
 80081b0:	08008239 	.word	0x08008239
 80081b4:	08008239 	.word	0x08008239
 80081b8:	08008239 	.word	0x08008239
 80081bc:	08008239 	.word	0x08008239
 80081c0:	08008239 	.word	0x08008239
 80081c4:	08008239 	.word	0x08008239
 80081c8:	08008239 	.word	0x08008239
 80081cc:	08008239 	.word	0x08008239
 80081d0:	08008239 	.word	0x08008239
 80081d4:	08008239 	.word	0x08008239
 80081d8:	08008239 	.word	0x08008239
 80081dc:	08008239 	.word	0x08008239
 80081e0:	08008239 	.word	0x08008239
 80081e4:	08008239 	.word	0x08008239
 80081e8:	08008239 	.word	0x08008239
 80081ec:	08008239 	.word	0x08008239
 80081f0:	08008239 	.word	0x08008239
 80081f4:	08008239 	.word	0x08008239
 80081f8:	08008239 	.word	0x08008239
 80081fc:	08008239 	.word	0x08008239
 8008200:	08008239 	.word	0x08008239
 8008204:	08008239 	.word	0x08008239
 8008208:	08008239 	.word	0x08008239
 800820c:	08008239 	.word	0x08008239
 8008210:	08008239 	.word	0x08008239
 8008214:	08008239 	.word	0x08008239
 8008218:	08008239 	.word	0x08008239
 800821c:	08008239 	.word	0x08008239
 8008220:	08008239 	.word	0x08008239
 8008224:	08008239 	.word	0x08008239
 8008228:	08008239 	.word	0x08008239
 800822c:	08008239 	.word	0x08008239
 8008230:	08008239 	.word	0x08008239
 8008234:	08008239 	.word	0x08008239
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008238:	bf00      	nop
  }

  return (USBD_OK);
 800823a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <CDC_Receive_FS>:
  */
#include "elevator.h"
#include <string.h>                 // QP/C real-time embedded framework
#include "bsp.h"

static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len){
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]

	if (*Len == 1U){
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b01      	cmp	r3, #1
 8008258:	f040 8089 	bne.w	800836e <CDC_Receive_FS+0x126>
		if ((char)Buf[0] >= '1' && (char)Buf[0] <= '5') {
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b30      	cmp	r3, #48	@ 0x30
 8008262:	d919      	bls.n	8008298 <CDC_Receive_FS+0x50>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b35      	cmp	r3, #53	@ 0x35
 800826a:	d815      	bhi.n	8008298 <CDC_Receive_FS+0x50>
				// Logic for the enter button simulation
				requestEvt * RequestEve = Q_NEW(requestEvt ,REQUEST_SIG);
 800826c:	2206      	movs	r2, #6
 800826e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008272:	2006      	movs	r0, #6
 8008274:	f7f9 fbaa 	bl	80019cc <QF_newX_>
 8008278:	60b8      	str	r0, [r7, #8]
				RequestEve->level = (uint8_t)((char)Buf[0] - '0');
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	3b30      	subs	r3, #48	@ 0x30
 8008280:	b2da      	uxtb	r2, r3
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	711a      	strb	r2, [r3, #4]
				QACTIVE_POST(AOElevator, (QEvtPtr)RequestEve, (void*)0U);
 8008286:	4b8a      	ldr	r3, [pc, #552]	@ (80084b0 <CDC_Receive_FS+0x268>)
 8008288:	6818      	ldr	r0, [r3, #0]
 800828a:	2300      	movs	r3, #0
 800828c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	f7f9 fa59 	bl	8001748 <QActive_post_>
		if ((char)Buf[0] >= '1' && (char)Buf[0] <= '5') {
 8008296:	e0ff      	b.n	8008498 <CDC_Receive_FS+0x250>
		}else {
			switch(Buf[0]){
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	3b4d      	subs	r3, #77	@ 0x4d
 800829e:	2b22      	cmp	r3, #34	@ 0x22
 80082a0:	f200 80f9 	bhi.w	8008496 <CDC_Receive_FS+0x24e>
 80082a4:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <CDC_Receive_FS+0x64>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	08008339 	.word	0x08008339
 80082b0:	0800834b 	.word	0x0800834b
 80082b4:	0800835d 	.word	0x0800835d
 80082b8:	08008497 	.word	0x08008497
 80082bc:	08008497 	.word	0x08008497
 80082c0:	08008497 	.word	0x08008497
 80082c4:	08008497 	.word	0x08008497
 80082c8:	08008497 	.word	0x08008497
 80082cc:	08008497 	.word	0x08008497
 80082d0:	08008497 	.word	0x08008497
 80082d4:	08008497 	.word	0x08008497
 80082d8:	08008497 	.word	0x08008497
 80082dc:	08008497 	.word	0x08008497
 80082e0:	08008497 	.word	0x08008497
 80082e4:	08008497 	.word	0x08008497
 80082e8:	08008497 	.word	0x08008497
 80082ec:	08008497 	.word	0x08008497
 80082f0:	08008497 	.word	0x08008497
 80082f4:	08008497 	.word	0x08008497
 80082f8:	08008497 	.word	0x08008497
 80082fc:	08008497 	.word	0x08008497
 8008300:	08008497 	.word	0x08008497
 8008304:	08008497 	.word	0x08008497
 8008308:	08008497 	.word	0x08008497
 800830c:	08008497 	.word	0x08008497
 8008310:	08008497 	.word	0x08008497
 8008314:	08008497 	.word	0x08008497
 8008318:	08008497 	.word	0x08008497
 800831c:	08008497 	.word	0x08008497
 8008320:	08008497 	.word	0x08008497
 8008324:	08008497 	.word	0x08008497
 8008328:	08008497 	.word	0x08008497
 800832c:	08008339 	.word	0x08008339
 8008330:	0800834b 	.word	0x0800834b
 8008334:	0800835d 	.word	0x0800835d
			case 'M':
			case 'm':
				static const QEvt menuEvt = QEVT_INITIALIZER(PRINT_SIG);
				QACTIVE_POST(AOElevator, (QEvtPtr)&menuEvt, (void*)0U);
 8008338:	4b5d      	ldr	r3, [pc, #372]	@ (80084b0 <CDC_Receive_FS+0x268>)
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	2300      	movs	r3, #0
 800833e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008342:	495c      	ldr	r1, [pc, #368]	@ (80084b4 <CDC_Receive_FS+0x26c>)
 8008344:	f7f9 fa00 	bl	8001748 <QActive_post_>
				break;
 8008348:	e0a6      	b.n	8008498 <CDC_Receive_FS+0x250>
			case 'N':
			case 'n':
				static const QEvt closeEvt = QEVT_INITIALIZER(CLOSE_SIG);
				QACTIVE_POST(AOElevator, (QEvtPtr)&closeEvt, (void*)0U);
 800834a:	4b59      	ldr	r3, [pc, #356]	@ (80084b0 <CDC_Receive_FS+0x268>)
 800834c:	6818      	ldr	r0, [r3, #0]
 800834e:	2300      	movs	r3, #0
 8008350:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008354:	4958      	ldr	r1, [pc, #352]	@ (80084b8 <CDC_Receive_FS+0x270>)
 8008356:	f7f9 f9f7 	bl	8001748 <QActive_post_>
				break;
 800835a:	e09d      	b.n	8008498 <CDC_Receive_FS+0x250>
			case 'O':
			case 'o':
				static const QEvt openEvt = QEVT_INITIALIZER(OPEN_SIG);
				QACTIVE_POST(AOElevator, (QEvtPtr)&openEvt, (void*)0U);
 800835c:	4b54      	ldr	r3, [pc, #336]	@ (80084b0 <CDC_Receive_FS+0x268>)
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	2300      	movs	r3, #0
 8008362:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008366:	4955      	ldr	r1, [pc, #340]	@ (80084bc <CDC_Receive_FS+0x274>)
 8008368:	f7f9 f9ee 	bl	8001748 <QActive_post_>
				break;
 800836c:	e094      	b.n	8008498 <CDC_Receive_FS+0x250>
			default:
				break;
			}
		}
	}else if (*Len == 2U ){
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b02      	cmp	r3, #2
 8008374:	f040 8090 	bne.w	8008498 <CDC_Receive_FS+0x250>
			requestEvt *RequestEve = Q_NEW(requestEvt, REQUEST_SIG);
 8008378:	2206      	movs	r2, #6
 800837a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800837e:	2006      	movs	r0, #6
 8008380:	f7f9 fb24 	bl	80019cc <QF_newX_>
 8008384:	60f8      	str	r0, [r7, #12]

			if (strncmp((const char*)Buf, "A1", *Len) == 0 || strncmp((const char*)Buf, "a1", *Len) == 0) {
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	494c      	ldr	r1, [pc, #304]	@ (80084c0 <CDC_Receive_FS+0x278>)
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fd46 	bl	8008e20 <strncmp>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <CDC_Receive_FS+0x166>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	4948      	ldr	r1, [pc, #288]	@ (80084c4 <CDC_Receive_FS+0x27c>)
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fd3c 	bl	8008e20 <strncmp>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d103      	bne.n	80083b6 <CDC_Receive_FS+0x16e>
				RequestEve->level = 1U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	711a      	strb	r2, [r3, #4]
 80083b4:	e062      	b.n	800847c <CDC_Receive_FS+0x234>
			} else if (strncmp((const char*)Buf, "B2", *Len) == 0 || strncmp((const char*)Buf, "b2", *Len) == 0) {
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	4942      	ldr	r1, [pc, #264]	@ (80084c8 <CDC_Receive_FS+0x280>)
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fd2e 	bl	8008e20 <strncmp>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d009      	beq.n	80083de <CDC_Receive_FS+0x196>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	493e      	ldr	r1, [pc, #248]	@ (80084cc <CDC_Receive_FS+0x284>)
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fd24 	bl	8008e20 <strncmp>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d103      	bne.n	80083e6 <CDC_Receive_FS+0x19e>
				RequestEve->level = 2U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2202      	movs	r2, #2
 80083e2:	711a      	strb	r2, [r3, #4]
 80083e4:	e04a      	b.n	800847c <CDC_Receive_FS+0x234>
			} else if (strncmp((const char*)Buf, "C3", *Len) == 0 || strncmp((const char*)Buf, "c3", *Len) == 0) {
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	4938      	ldr	r1, [pc, #224]	@ (80084d0 <CDC_Receive_FS+0x288>)
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fd16 	bl	8008e20 <strncmp>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d009      	beq.n	800840e <CDC_Receive_FS+0x1c6>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	4934      	ldr	r1, [pc, #208]	@ (80084d4 <CDC_Receive_FS+0x28c>)
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fd0c 	bl	8008e20 <strncmp>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d103      	bne.n	8008416 <CDC_Receive_FS+0x1ce>
				RequestEve->level = 3U;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2203      	movs	r2, #3
 8008412:	711a      	strb	r2, [r3, #4]
 8008414:	e032      	b.n	800847c <CDC_Receive_FS+0x234>
			} else if (strncmp((const char*)Buf, "D4", *Len) == 0 || strncmp((const char*)Buf, "d4", *Len) == 0) {
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	492e      	ldr	r1, [pc, #184]	@ (80084d8 <CDC_Receive_FS+0x290>)
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fcfe 	bl	8008e20 <strncmp>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <CDC_Receive_FS+0x1f6>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	492a      	ldr	r1, [pc, #168]	@ (80084dc <CDC_Receive_FS+0x294>)
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fcf4 	bl	8008e20 <strncmp>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <CDC_Receive_FS+0x1fe>
				RequestEve->level = 4U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2204      	movs	r2, #4
 8008442:	711a      	strb	r2, [r3, #4]
 8008444:	e01a      	b.n	800847c <CDC_Receive_FS+0x234>
			} else if (strncmp((const char*)Buf, "E5", *Len) == 0 || strncmp((const char*)Buf, "e5", *Len) == 0) {
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	4924      	ldr	r1, [pc, #144]	@ (80084e0 <CDC_Receive_FS+0x298>)
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fce6 	bl	8008e20 <strncmp>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d009      	beq.n	800846e <CDC_Receive_FS+0x226>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	4920      	ldr	r1, [pc, #128]	@ (80084e4 <CDC_Receive_FS+0x29c>)
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fcdc 	bl	8008e20 <strncmp>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d103      	bne.n	8008476 <CDC_Receive_FS+0x22e>
				RequestEve->level = 5U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2205      	movs	r2, #5
 8008472:	711a      	strb	r2, [r3, #4]
 8008474:	e002      	b.n	800847c <CDC_Receive_FS+0x234>
			} else {
				RequestEve->level = 0U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	711a      	strb	r2, [r3, #4]
			}
			if(RequestEve->level != 0U){
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	791b      	ldrb	r3, [r3, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d009      	beq.n	8008498 <CDC_Receive_FS+0x250>
				QACTIVE_POST(AOElevator, (QEvtPtr)RequestEve, (void*)0U);
 8008484:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <CDC_Receive_FS+0x268>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800848e:	68f9      	ldr	r1, [r7, #12]
 8008490:	f7f9 f95a 	bl	8001748 <QActive_post_>
 8008494:	e000      	b.n	8008498 <CDC_Receive_FS+0x250>
				break;
 8008496:	bf00      	nop
			}
		}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	4813      	ldr	r0, [pc, #76]	@ (80084e8 <CDC_Receive_FS+0x2a0>)
 800849c:	f7fe fa94 	bl	80069c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084a0:	4811      	ldr	r0, [pc, #68]	@ (80084e8 <CDC_Receive_FS+0x2a0>)
 80084a2:	f7fe faef 	bl	8006a84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084a6:	2300      	movs	r3, #0
  /* USER CODE END 6 */

}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000004 	.word	0x20000004
 80084b4:	08009958 	.word	0x08009958
 80084b8:	0800995c 	.word	0x0800995c
 80084bc:	08009960 	.word	0x08009960
 80084c0:	0800986c 	.word	0x0800986c
 80084c4:	08009870 	.word	0x08009870
 80084c8:	08009874 	.word	0x08009874
 80084cc:	08009878 	.word	0x08009878
 80084d0:	0800987c 	.word	0x0800987c
 80084d4:	08009880 	.word	0x08009880
 80084d8:	08009884 	.word	0x08009884
 80084dc:	08009888 	.word	0x08009888
 80084e0:	0800988c 	.word	0x0800988c
 80084e4:	08009890 	.word	0x08009890
 80084e8:	20000348 	.word	0x20000348

080084ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <CDC_Transmit_FS+0x48>)
 80084fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008502:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800850e:	2301      	movs	r3, #1
 8008510:	e00b      	b.n	800852a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008512:	887b      	ldrh	r3, [r7, #2]
 8008514:	461a      	mov	r2, r3
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	4806      	ldr	r0, [pc, #24]	@ (8008534 <CDC_Transmit_FS+0x48>)
 800851a:	f7fe fa33 	bl	8006984 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800851e:	4805      	ldr	r0, [pc, #20]	@ (8008534 <CDC_Transmit_FS+0x48>)
 8008520:	f7fe fa70 	bl	8006a04 <USBD_CDC_TransmitPacket>
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008528:	7bfb      	ldrb	r3, [r7, #15]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20000348 	.word	0x20000348

08008538 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800854a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800854e:	4618      	mov	r0, r3
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
	...

0800855c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2212      	movs	r2, #18
 800856c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800856e:	4b03      	ldr	r3, [pc, #12]	@ (800857c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008570:	4618      	mov	r0, r3
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	200000d0 	.word	0x200000d0

08008580 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2204      	movs	r2, #4
 8008590:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008592:	4b03      	ldr	r3, [pc, #12]	@ (80085a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	200000e4 	.word	0x200000e4

080085a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d105      	bne.n	80085c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	4907      	ldr	r1, [pc, #28]	@ (80085d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085ba:	4808      	ldr	r0, [pc, #32]	@ (80085dc <USBD_FS_ProductStrDescriptor+0x38>)
 80085bc:	f7ff fcae 	bl	8007f1c <USBD_GetString>
 80085c0:	e004      	b.n	80085cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	4904      	ldr	r1, [pc, #16]	@ (80085d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085c6:	4805      	ldr	r0, [pc, #20]	@ (80085dc <USBD_FS_ProductStrDescriptor+0x38>)
 80085c8:	f7ff fca8 	bl	8007f1c <USBD_GetString>
  }
  return USBD_StrDesc;
 80085cc:	4b02      	ldr	r3, [pc, #8]	@ (80085d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20001624 	.word	0x20001624
 80085dc:	08009894 	.word	0x08009894

080085e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	6039      	str	r1, [r7, #0]
 80085ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	4904      	ldr	r1, [pc, #16]	@ (8008600 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085f0:	4804      	ldr	r0, [pc, #16]	@ (8008604 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085f2:	f7ff fc93 	bl	8007f1c <USBD_GetString>
  return USBD_StrDesc;
 80085f6:	4b02      	ldr	r3, [pc, #8]	@ (8008600 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	20001624 	.word	0x20001624
 8008604:	080098ac 	.word	0x080098ac

08008608 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	221a      	movs	r2, #26
 8008618:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800861a:	f000 f843 	bl	80086a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800861e:	4b02      	ldr	r3, [pc, #8]	@ (8008628 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	200000e8 	.word	0x200000e8

0800862c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d105      	bne.n	800864a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	4907      	ldr	r1, [pc, #28]	@ (8008660 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008642:	4808      	ldr	r0, [pc, #32]	@ (8008664 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008644:	f7ff fc6a 	bl	8007f1c <USBD_GetString>
 8008648:	e004      	b.n	8008654 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	4904      	ldr	r1, [pc, #16]	@ (8008660 <USBD_FS_ConfigStrDescriptor+0x34>)
 800864e:	4805      	ldr	r0, [pc, #20]	@ (8008664 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008650:	f7ff fc64 	bl	8007f1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008654:	4b02      	ldr	r3, [pc, #8]	@ (8008660 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20001624 	.word	0x20001624
 8008664:	080098c0 	.word	0x080098c0

08008668 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	6039      	str	r1, [r7, #0]
 8008672:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d105      	bne.n	8008686 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	4907      	ldr	r1, [pc, #28]	@ (800869c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800867e:	4808      	ldr	r0, [pc, #32]	@ (80086a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008680:	f7ff fc4c 	bl	8007f1c <USBD_GetString>
 8008684:	e004      	b.n	8008690 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	4904      	ldr	r1, [pc, #16]	@ (800869c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800868a:	4805      	ldr	r0, [pc, #20]	@ (80086a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800868c:	f7ff fc46 	bl	8007f1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008690:	4b02      	ldr	r3, [pc, #8]	@ (800869c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	20001624 	.word	0x20001624
 80086a0:	080098cc 	.word	0x080098cc

080086a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086aa:	4b0f      	ldr	r3, [pc, #60]	@ (80086e8 <Get_SerialNum+0x44>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086b0:	4b0e      	ldr	r3, [pc, #56]	@ (80086ec <Get_SerialNum+0x48>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086b6:	4b0e      	ldr	r3, [pc, #56]	@ (80086f0 <Get_SerialNum+0x4c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4413      	add	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ca:	2208      	movs	r2, #8
 80086cc:	4909      	ldr	r1, [pc, #36]	@ (80086f4 <Get_SerialNum+0x50>)
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f814 	bl	80086fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086d4:	2204      	movs	r2, #4
 80086d6:	4908      	ldr	r1, [pc, #32]	@ (80086f8 <Get_SerialNum+0x54>)
 80086d8:	68b8      	ldr	r0, [r7, #8]
 80086da:	f000 f80f 	bl	80086fc <IntToUnicode>
  }
}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	1fff7a10 	.word	0x1fff7a10
 80086ec:	1fff7a14 	.word	0x1fff7a14
 80086f0:	1fff7a18 	.word	0x1fff7a18
 80086f4:	200000ea 	.word	0x200000ea
 80086f8:	200000fa 	.word	0x200000fa

080086fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	4613      	mov	r3, r2
 8008708:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]
 8008712:	e027      	b.n	8008764 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	0f1b      	lsrs	r3, r3, #28
 8008718:	2b09      	cmp	r3, #9
 800871a:	d80b      	bhi.n	8008734 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	0f1b      	lsrs	r3, r3, #28
 8008720:	b2da      	uxtb	r2, r3
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	4619      	mov	r1, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	440b      	add	r3, r1
 800872c:	3230      	adds	r2, #48	@ 0x30
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	e00a      	b.n	800874a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	0f1b      	lsrs	r3, r3, #28
 8008738:	b2da      	uxtb	r2, r3
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	4619      	mov	r1, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	440b      	add	r3, r1
 8008744:	3237      	adds	r2, #55	@ 0x37
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	3301      	adds	r3, #1
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	4413      	add	r3, r2
 800875a:	2200      	movs	r2, #0
 800875c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	3301      	adds	r3, #1
 8008762:	75fb      	strb	r3, [r7, #23]
 8008764:	7dfa      	ldrb	r2, [r7, #23]
 8008766:	79fb      	ldrb	r3, [r7, #7]
 8008768:	429a      	cmp	r2, r3
 800876a:	d3d3      	bcc.n	8008714 <IntToUnicode+0x18>
  }
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
	...

0800877c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08a      	sub	sp, #40	@ 0x28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008784:	f107 0314 	add.w	r3, r7, #20
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	605a      	str	r2, [r3, #4]
 800878e:	609a      	str	r2, [r3, #8]
 8008790:	60da      	str	r2, [r3, #12]
 8008792:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800879c:	d13a      	bne.n	8008814 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800879e:	2300      	movs	r3, #0
 80087a0:	613b      	str	r3, [r7, #16]
 80087a2:	4b1e      	ldr	r3, [pc, #120]	@ (800881c <HAL_PCD_MspInit+0xa0>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a6:	4a1d      	ldr	r2, [pc, #116]	@ (800881c <HAL_PCD_MspInit+0xa0>)
 80087a8:	f043 0301 	orr.w	r3, r3, #1
 80087ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80087ae:	4b1b      	ldr	r3, [pc, #108]	@ (800881c <HAL_PCD_MspInit+0xa0>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	613b      	str	r3, [r7, #16]
 80087b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80087ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80087be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087c0:	2302      	movs	r3, #2
 80087c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087c8:	2303      	movs	r3, #3
 80087ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087cc:	230a      	movs	r3, #10
 80087ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087d0:	f107 0314 	add.w	r3, r7, #20
 80087d4:	4619      	mov	r1, r3
 80087d6:	4812      	ldr	r0, [pc, #72]	@ (8008820 <HAL_PCD_MspInit+0xa4>)
 80087d8:	f7fa f8e2 	bl	80029a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087dc:	4b0f      	ldr	r3, [pc, #60]	@ (800881c <HAL_PCD_MspInit+0xa0>)
 80087de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087e0:	4a0e      	ldr	r2, [pc, #56]	@ (800881c <HAL_PCD_MspInit+0xa0>)
 80087e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	4b0b      	ldr	r3, [pc, #44]	@ (800881c <HAL_PCD_MspInit+0xa0>)
 80087ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087f0:	4a0a      	ldr	r2, [pc, #40]	@ (800881c <HAL_PCD_MspInit+0xa0>)
 80087f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80087f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80087f8:	4b08      	ldr	r3, [pc, #32]	@ (800881c <HAL_PCD_MspInit+0xa0>)
 80087fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008800:	60fb      	str	r3, [r7, #12]
 8008802:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008804:	2200      	movs	r2, #0
 8008806:	2100      	movs	r1, #0
 8008808:	2043      	movs	r0, #67	@ 0x43
 800880a:	f7fa f892 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800880e:	2043      	movs	r0, #67	@ 0x43
 8008810:	f7fa f8ab 	bl	800296a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008814:	bf00      	nop
 8008816:	3728      	adds	r7, #40	@ 0x28
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	40023800 	.word	0x40023800
 8008820:	40020000 	.word	0x40020000

08008824 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008838:	4619      	mov	r1, r3
 800883a:	4610      	mov	r0, r2
 800883c:	f7fe fa0b 	bl	8006c56 <USBD_LL_SetupStage>
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800885a:	78fa      	ldrb	r2, [r7, #3]
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	78fb      	ldrb	r3, [r7, #3]
 8008870:	4619      	mov	r1, r3
 8008872:	f7fe fa45 	bl	8006d00 <USBD_LL_DataOutStage>
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	4613      	mov	r3, r2
 8008896:	00db      	lsls	r3, r3, #3
 8008898:	4413      	add	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	440b      	add	r3, r1
 800889e:	3320      	adds	r3, #32
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	4619      	mov	r1, r3
 80088a6:	f7fe fade 	bl	8006e66 <USBD_LL_DataInStage>
}
 80088aa:	bf00      	nop
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe fc18 	bl	80070f6 <USBD_LL_SOF>
}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088d6:	2301      	movs	r3, #1
 80088d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	79db      	ldrb	r3, [r3, #7]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d102      	bne.n	80088e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]
 80088e6:	e008      	b.n	80088fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	79db      	ldrb	r3, [r3, #7]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d102      	bne.n	80088f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
 80088f4:	e001      	b.n	80088fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80088f6:	f7f8 f945 	bl	8000b84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008900:	7bfa      	ldrb	r2, [r7, #15]
 8008902:	4611      	mov	r1, r2
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe fbb2 	bl	800706e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe fb5a 	bl	8006fca <USBD_LL_Reset>
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe fbad 	bl	800708e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008946:	f043 0301 	orr.w	r3, r3, #1
 800894a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7adb      	ldrb	r3, [r3, #11]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008954:	4b04      	ldr	r3, [pc, #16]	@ (8008968 <HAL_PCD_SuspendCallback+0x48>)
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	4a03      	ldr	r2, [pc, #12]	@ (8008968 <HAL_PCD_SuspendCallback+0x48>)
 800895a:	f043 0306 	orr.w	r3, r3, #6
 800895e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	e000ed00 	.word	0xe000ed00

0800896c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fba3 	bl	80070c6 <USBD_LL_Resume>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fbfb 	bl	800719a <USBD_LL_IsoOUTIncomplete>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe fbb7 	bl	8007136 <USBD_LL_IsoINIncomplete>
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fc0d 	bl	80071fe <USBD_LL_DevConnected>
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe fc0a 	bl	8007214 <USBD_LL_DevDisconnected>
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d13c      	bne.n	8008a92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a18:	4a20      	ldr	r2, [pc, #128]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a1e      	ldr	r2, [pc, #120]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a24:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a28:	4b1c      	ldr	r3, [pc, #112]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008a2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a30:	4b1a      	ldr	r3, [pc, #104]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a32:	2204      	movs	r2, #4
 8008a34:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a36:	4b19      	ldr	r3, [pc, #100]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a38:	2202      	movs	r2, #2
 8008a3a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a3c:	4b17      	ldr	r3, [pc, #92]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a42:	4b16      	ldr	r3, [pc, #88]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a44:	2202      	movs	r2, #2
 8008a46:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a48:	4b14      	ldr	r3, [pc, #80]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a4e:	4b13      	ldr	r3, [pc, #76]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a54:	4b11      	ldr	r3, [pc, #68]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a5a:	4b10      	ldr	r3, [pc, #64]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a60:	4b0e      	ldr	r3, [pc, #56]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a66:	480d      	ldr	r0, [pc, #52]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a68:	f7fa f968 	bl	8002d3c <HAL_PCD_Init>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a72:	f7f8 f887 	bl	8000b84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a76:	2180      	movs	r1, #128	@ 0x80
 8008a78:	4808      	ldr	r0, [pc, #32]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a7a:	f7fb fb94 	bl	80041a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a7e:	2240      	movs	r2, #64	@ 0x40
 8008a80:	2100      	movs	r1, #0
 8008a82:	4806      	ldr	r0, [pc, #24]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a84:	f7fb fb48 	bl	8004118 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a88:	2280      	movs	r2, #128	@ 0x80
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	4803      	ldr	r0, [pc, #12]	@ (8008a9c <USBD_LL_Init+0x94>)
 8008a8e:	f7fb fb43 	bl	8004118 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20001824 	.word	0x20001824

08008aa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fa fa4f 	bl	8002f5a <HAL_PCD_Start>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 f942 	bl	8008d4c <USBD_Get_USB_Status>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	4608      	mov	r0, r1
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	70fb      	strb	r3, [r7, #3]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70bb      	strb	r3, [r7, #2]
 8008aec:	4613      	mov	r3, r2
 8008aee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008afe:	78bb      	ldrb	r3, [r7, #2]
 8008b00:	883a      	ldrh	r2, [r7, #0]
 8008b02:	78f9      	ldrb	r1, [r7, #3]
 8008b04:	f7fa ff23 	bl	800394e <HAL_PCD_EP_Open>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f91c 	bl	8008d4c <USBD_Get_USB_Status>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fa ff6e 	bl	8003a22 <HAL_PCD_EP_Close>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f8fd 	bl	8008d4c <USBD_Get_USB_Status>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fb f826 	bl	8003bd0 <HAL_PCD_EP_SetStall>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f8de 	bl	8008d4c <USBD_Get_USB_Status>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fb f86a 	bl	8003c96 <HAL_PCD_EP_ClrStall>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 f8bf 	bl	8008d4c <USBD_Get_USB_Status>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	da0b      	bge.n	8008c10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bf8:	78fb      	ldrb	r3, [r7, #3]
 8008bfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bfe:	68f9      	ldr	r1, [r7, #12]
 8008c00:	4613      	mov	r3, r2
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	4413      	add	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	440b      	add	r3, r1
 8008c0a:	3316      	adds	r3, #22
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	e00b      	b.n	8008c28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c16:	68f9      	ldr	r1, [r7, #12]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008c26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c4e:	78fa      	ldrb	r2, [r7, #3]
 8008c50:	4611      	mov	r1, r2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fa fe57 	bl	8003906 <HAL_PCD_SetAddress>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 f874 	bl	8008d4c <USBD_Get_USB_Status>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	607a      	str	r2, [r7, #4]
 8008c7c:	603b      	str	r3, [r7, #0]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c90:	7af9      	ldrb	r1, [r7, #11]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	f7fa ff61 	bl	8003b5c <HAL_PCD_EP_Transmit>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 f853 	bl	8008d4c <USBD_Get_USB_Status>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008caa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cd2:	7af9      	ldrb	r1, [r7, #11]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	f7fa feed 	bl	8003ab6 <HAL_PCD_EP_Receive>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 f832 	bl	8008d4c <USBD_Get_USB_Status>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cec:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fa ff0d 	bl	8003b2c <HAL_PCD_EP_GetRxCount>
 8008d12:	4603      	mov	r3, r0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d24:	4b03      	ldr	r3, [pc, #12]	@ (8008d34 <USBD_static_malloc+0x18>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	20001d08 	.word	0x20001d08

08008d38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]

}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d817      	bhi.n	8008d90 <USBD_Get_USB_Status+0x44>
 8008d60:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <USBD_Get_USB_Status+0x1c>)
 8008d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d66:	bf00      	nop
 8008d68:	08008d79 	.word	0x08008d79
 8008d6c:	08008d7f 	.word	0x08008d7f
 8008d70:	08008d85 	.word	0x08008d85
 8008d74:	08008d8b 	.word	0x08008d8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7c:	e00b      	b.n	8008d96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	73fb      	strb	r3, [r7, #15]
    break;
 8008d82:	e008      	b.n	8008d96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d84:	2301      	movs	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
    break;
 8008d88:	e005      	b.n	8008d96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8e:	e002      	b.n	8008d96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	73fb      	strb	r3, [r7, #15]
    break;
 8008d94:	bf00      	nop
  }
  return usb_status;
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <sniprintf>:
 8008da4:	b40c      	push	{r2, r3}
 8008da6:	b530      	push	{r4, r5, lr}
 8008da8:	4b18      	ldr	r3, [pc, #96]	@ (8008e0c <sniprintf+0x68>)
 8008daa:	1e0c      	subs	r4, r1, #0
 8008dac:	681d      	ldr	r5, [r3, #0]
 8008dae:	b09d      	sub	sp, #116	@ 0x74
 8008db0:	da08      	bge.n	8008dc4 <sniprintf+0x20>
 8008db2:	238b      	movs	r3, #139	@ 0x8b
 8008db4:	602b      	str	r3, [r5, #0]
 8008db6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dba:	b01d      	add	sp, #116	@ 0x74
 8008dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dc0:	b002      	add	sp, #8
 8008dc2:	4770      	bx	lr
 8008dc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008dc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008dd2:	bf14      	ite	ne
 8008dd4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008dd8:	4623      	moveq	r3, r4
 8008dda:	9304      	str	r3, [sp, #16]
 8008ddc:	9307      	str	r3, [sp, #28]
 8008dde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008de2:	9002      	str	r0, [sp, #8]
 8008de4:	9006      	str	r0, [sp, #24]
 8008de6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008dea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008dec:	ab21      	add	r3, sp, #132	@ 0x84
 8008dee:	a902      	add	r1, sp, #8
 8008df0:	4628      	mov	r0, r5
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	f000 f9a6 	bl	8009144 <_svfiprintf_r>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	bfbc      	itt	lt
 8008dfc:	238b      	movlt	r3, #139	@ 0x8b
 8008dfe:	602b      	strlt	r3, [r5, #0]
 8008e00:	2c00      	cmp	r4, #0
 8008e02:	d0da      	beq.n	8008dba <sniprintf+0x16>
 8008e04:	9b02      	ldr	r3, [sp, #8]
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	e7d6      	b.n	8008dba <sniprintf+0x16>
 8008e0c:	20000104 	.word	0x20000104

08008e10 <memset>:
 8008e10:	4402      	add	r2, r0
 8008e12:	4603      	mov	r3, r0
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d100      	bne.n	8008e1a <memset+0xa>
 8008e18:	4770      	bx	lr
 8008e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e1e:	e7f9      	b.n	8008e14 <memset+0x4>

08008e20 <strncmp>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	b16a      	cbz	r2, 8008e40 <strncmp+0x20>
 8008e24:	3901      	subs	r1, #1
 8008e26:	1884      	adds	r4, r0, r2
 8008e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d103      	bne.n	8008e3c <strncmp+0x1c>
 8008e34:	42a0      	cmp	r0, r4
 8008e36:	d001      	beq.n	8008e3c <strncmp+0x1c>
 8008e38:	2a00      	cmp	r2, #0
 8008e3a:	d1f5      	bne.n	8008e28 <strncmp+0x8>
 8008e3c:	1ad0      	subs	r0, r2, r3
 8008e3e:	bd10      	pop	{r4, pc}
 8008e40:	4610      	mov	r0, r2
 8008e42:	e7fc      	b.n	8008e3e <strncmp+0x1e>

08008e44 <__errno>:
 8008e44:	4b01      	ldr	r3, [pc, #4]	@ (8008e4c <__errno+0x8>)
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	20000104 	.word	0x20000104

08008e50 <__libc_init_array>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	4d0d      	ldr	r5, [pc, #52]	@ (8008e88 <__libc_init_array+0x38>)
 8008e54:	4c0d      	ldr	r4, [pc, #52]	@ (8008e8c <__libc_init_array+0x3c>)
 8008e56:	1b64      	subs	r4, r4, r5
 8008e58:	10a4      	asrs	r4, r4, #2
 8008e5a:	2600      	movs	r6, #0
 8008e5c:	42a6      	cmp	r6, r4
 8008e5e:	d109      	bne.n	8008e74 <__libc_init_array+0x24>
 8008e60:	4d0b      	ldr	r5, [pc, #44]	@ (8008e90 <__libc_init_array+0x40>)
 8008e62:	4c0c      	ldr	r4, [pc, #48]	@ (8008e94 <__libc_init_array+0x44>)
 8008e64:	f000 fc64 	bl	8009730 <_init>
 8008e68:	1b64      	subs	r4, r4, r5
 8008e6a:	10a4      	asrs	r4, r4, #2
 8008e6c:	2600      	movs	r6, #0
 8008e6e:	42a6      	cmp	r6, r4
 8008e70:	d105      	bne.n	8008e7e <__libc_init_array+0x2e>
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
 8008e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e78:	4798      	blx	r3
 8008e7a:	3601      	adds	r6, #1
 8008e7c:	e7ee      	b.n	8008e5c <__libc_init_array+0xc>
 8008e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e82:	4798      	blx	r3
 8008e84:	3601      	adds	r6, #1
 8008e86:	e7f2      	b.n	8008e6e <__libc_init_array+0x1e>
 8008e88:	080099a0 	.word	0x080099a0
 8008e8c:	080099a0 	.word	0x080099a0
 8008e90:	080099a0 	.word	0x080099a0
 8008e94:	080099a4 	.word	0x080099a4

08008e98 <__retarget_lock_acquire_recursive>:
 8008e98:	4770      	bx	lr

08008e9a <__retarget_lock_release_recursive>:
 8008e9a:	4770      	bx	lr

08008e9c <_free_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	2900      	cmp	r1, #0
 8008ea2:	d041      	beq.n	8008f28 <_free_r+0x8c>
 8008ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ea8:	1f0c      	subs	r4, r1, #4
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfb8      	it	lt
 8008eae:	18e4      	addlt	r4, r4, r3
 8008eb0:	f000 f8e0 	bl	8009074 <__malloc_lock>
 8008eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f2c <_free_r+0x90>)
 8008eb6:	6813      	ldr	r3, [r2, #0]
 8008eb8:	b933      	cbnz	r3, 8008ec8 <_free_r+0x2c>
 8008eba:	6063      	str	r3, [r4, #4]
 8008ebc:	6014      	str	r4, [r2, #0]
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ec4:	f000 b8dc 	b.w	8009080 <__malloc_unlock>
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	d908      	bls.n	8008ede <_free_r+0x42>
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	1821      	adds	r1, r4, r0
 8008ed0:	428b      	cmp	r3, r1
 8008ed2:	bf01      	itttt	eq
 8008ed4:	6819      	ldreq	r1, [r3, #0]
 8008ed6:	685b      	ldreq	r3, [r3, #4]
 8008ed8:	1809      	addeq	r1, r1, r0
 8008eda:	6021      	streq	r1, [r4, #0]
 8008edc:	e7ed      	b.n	8008eba <_free_r+0x1e>
 8008ede:	461a      	mov	r2, r3
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	b10b      	cbz	r3, 8008ee8 <_free_r+0x4c>
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	d9fa      	bls.n	8008ede <_free_r+0x42>
 8008ee8:	6811      	ldr	r1, [r2, #0]
 8008eea:	1850      	adds	r0, r2, r1
 8008eec:	42a0      	cmp	r0, r4
 8008eee:	d10b      	bne.n	8008f08 <_free_r+0x6c>
 8008ef0:	6820      	ldr	r0, [r4, #0]
 8008ef2:	4401      	add	r1, r0
 8008ef4:	1850      	adds	r0, r2, r1
 8008ef6:	4283      	cmp	r3, r0
 8008ef8:	6011      	str	r1, [r2, #0]
 8008efa:	d1e0      	bne.n	8008ebe <_free_r+0x22>
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	6053      	str	r3, [r2, #4]
 8008f02:	4408      	add	r0, r1
 8008f04:	6010      	str	r0, [r2, #0]
 8008f06:	e7da      	b.n	8008ebe <_free_r+0x22>
 8008f08:	d902      	bls.n	8008f10 <_free_r+0x74>
 8008f0a:	230c      	movs	r3, #12
 8008f0c:	602b      	str	r3, [r5, #0]
 8008f0e:	e7d6      	b.n	8008ebe <_free_r+0x22>
 8008f10:	6820      	ldr	r0, [r4, #0]
 8008f12:	1821      	adds	r1, r4, r0
 8008f14:	428b      	cmp	r3, r1
 8008f16:	bf04      	itt	eq
 8008f18:	6819      	ldreq	r1, [r3, #0]
 8008f1a:	685b      	ldreq	r3, [r3, #4]
 8008f1c:	6063      	str	r3, [r4, #4]
 8008f1e:	bf04      	itt	eq
 8008f20:	1809      	addeq	r1, r1, r0
 8008f22:	6021      	streq	r1, [r4, #0]
 8008f24:	6054      	str	r4, [r2, #4]
 8008f26:	e7ca      	b.n	8008ebe <_free_r+0x22>
 8008f28:	bd38      	pop	{r3, r4, r5, pc}
 8008f2a:	bf00      	nop
 8008f2c:	2000206c 	.word	0x2000206c

08008f30 <sbrk_aligned>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	4e0f      	ldr	r6, [pc, #60]	@ (8008f70 <sbrk_aligned+0x40>)
 8008f34:	460c      	mov	r4, r1
 8008f36:	6831      	ldr	r1, [r6, #0]
 8008f38:	4605      	mov	r5, r0
 8008f3a:	b911      	cbnz	r1, 8008f42 <sbrk_aligned+0x12>
 8008f3c:	f000 fba4 	bl	8009688 <_sbrk_r>
 8008f40:	6030      	str	r0, [r6, #0]
 8008f42:	4621      	mov	r1, r4
 8008f44:	4628      	mov	r0, r5
 8008f46:	f000 fb9f 	bl	8009688 <_sbrk_r>
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	d103      	bne.n	8008f56 <sbrk_aligned+0x26>
 8008f4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008f52:	4620      	mov	r0, r4
 8008f54:	bd70      	pop	{r4, r5, r6, pc}
 8008f56:	1cc4      	adds	r4, r0, #3
 8008f58:	f024 0403 	bic.w	r4, r4, #3
 8008f5c:	42a0      	cmp	r0, r4
 8008f5e:	d0f8      	beq.n	8008f52 <sbrk_aligned+0x22>
 8008f60:	1a21      	subs	r1, r4, r0
 8008f62:	4628      	mov	r0, r5
 8008f64:	f000 fb90 	bl	8009688 <_sbrk_r>
 8008f68:	3001      	adds	r0, #1
 8008f6a:	d1f2      	bne.n	8008f52 <sbrk_aligned+0x22>
 8008f6c:	e7ef      	b.n	8008f4e <sbrk_aligned+0x1e>
 8008f6e:	bf00      	nop
 8008f70:	20002068 	.word	0x20002068

08008f74 <_malloc_r>:
 8008f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f78:	1ccd      	adds	r5, r1, #3
 8008f7a:	f025 0503 	bic.w	r5, r5, #3
 8008f7e:	3508      	adds	r5, #8
 8008f80:	2d0c      	cmp	r5, #12
 8008f82:	bf38      	it	cc
 8008f84:	250c      	movcc	r5, #12
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	4606      	mov	r6, r0
 8008f8a:	db01      	blt.n	8008f90 <_malloc_r+0x1c>
 8008f8c:	42a9      	cmp	r1, r5
 8008f8e:	d904      	bls.n	8008f9a <_malloc_r+0x26>
 8008f90:	230c      	movs	r3, #12
 8008f92:	6033      	str	r3, [r6, #0]
 8008f94:	2000      	movs	r0, #0
 8008f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009070 <_malloc_r+0xfc>
 8008f9e:	f000 f869 	bl	8009074 <__malloc_lock>
 8008fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fa6:	461c      	mov	r4, r3
 8008fa8:	bb44      	cbnz	r4, 8008ffc <_malloc_r+0x88>
 8008faa:	4629      	mov	r1, r5
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7ff ffbf 	bl	8008f30 <sbrk_aligned>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	d158      	bne.n	800906a <_malloc_r+0xf6>
 8008fb8:	f8d8 4000 	ldr.w	r4, [r8]
 8008fbc:	4627      	mov	r7, r4
 8008fbe:	2f00      	cmp	r7, #0
 8008fc0:	d143      	bne.n	800904a <_malloc_r+0xd6>
 8008fc2:	2c00      	cmp	r4, #0
 8008fc4:	d04b      	beq.n	800905e <_malloc_r+0xea>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	4639      	mov	r1, r7
 8008fca:	4630      	mov	r0, r6
 8008fcc:	eb04 0903 	add.w	r9, r4, r3
 8008fd0:	f000 fb5a 	bl	8009688 <_sbrk_r>
 8008fd4:	4581      	cmp	r9, r0
 8008fd6:	d142      	bne.n	800905e <_malloc_r+0xea>
 8008fd8:	6821      	ldr	r1, [r4, #0]
 8008fda:	1a6d      	subs	r5, r5, r1
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f7ff ffa6 	bl	8008f30 <sbrk_aligned>
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d03a      	beq.n	800905e <_malloc_r+0xea>
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	442b      	add	r3, r5
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	f8d8 3000 	ldr.w	r3, [r8]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	bb62      	cbnz	r2, 8009050 <_malloc_r+0xdc>
 8008ff6:	f8c8 7000 	str.w	r7, [r8]
 8008ffa:	e00f      	b.n	800901c <_malloc_r+0xa8>
 8008ffc:	6822      	ldr	r2, [r4, #0]
 8008ffe:	1b52      	subs	r2, r2, r5
 8009000:	d420      	bmi.n	8009044 <_malloc_r+0xd0>
 8009002:	2a0b      	cmp	r2, #11
 8009004:	d917      	bls.n	8009036 <_malloc_r+0xc2>
 8009006:	1961      	adds	r1, r4, r5
 8009008:	42a3      	cmp	r3, r4
 800900a:	6025      	str	r5, [r4, #0]
 800900c:	bf18      	it	ne
 800900e:	6059      	strne	r1, [r3, #4]
 8009010:	6863      	ldr	r3, [r4, #4]
 8009012:	bf08      	it	eq
 8009014:	f8c8 1000 	streq.w	r1, [r8]
 8009018:	5162      	str	r2, [r4, r5]
 800901a:	604b      	str	r3, [r1, #4]
 800901c:	4630      	mov	r0, r6
 800901e:	f000 f82f 	bl	8009080 <__malloc_unlock>
 8009022:	f104 000b 	add.w	r0, r4, #11
 8009026:	1d23      	adds	r3, r4, #4
 8009028:	f020 0007 	bic.w	r0, r0, #7
 800902c:	1ac2      	subs	r2, r0, r3
 800902e:	bf1c      	itt	ne
 8009030:	1a1b      	subne	r3, r3, r0
 8009032:	50a3      	strne	r3, [r4, r2]
 8009034:	e7af      	b.n	8008f96 <_malloc_r+0x22>
 8009036:	6862      	ldr	r2, [r4, #4]
 8009038:	42a3      	cmp	r3, r4
 800903a:	bf0c      	ite	eq
 800903c:	f8c8 2000 	streq.w	r2, [r8]
 8009040:	605a      	strne	r2, [r3, #4]
 8009042:	e7eb      	b.n	800901c <_malloc_r+0xa8>
 8009044:	4623      	mov	r3, r4
 8009046:	6864      	ldr	r4, [r4, #4]
 8009048:	e7ae      	b.n	8008fa8 <_malloc_r+0x34>
 800904a:	463c      	mov	r4, r7
 800904c:	687f      	ldr	r7, [r7, #4]
 800904e:	e7b6      	b.n	8008fbe <_malloc_r+0x4a>
 8009050:	461a      	mov	r2, r3
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	42a3      	cmp	r3, r4
 8009056:	d1fb      	bne.n	8009050 <_malloc_r+0xdc>
 8009058:	2300      	movs	r3, #0
 800905a:	6053      	str	r3, [r2, #4]
 800905c:	e7de      	b.n	800901c <_malloc_r+0xa8>
 800905e:	230c      	movs	r3, #12
 8009060:	6033      	str	r3, [r6, #0]
 8009062:	4630      	mov	r0, r6
 8009064:	f000 f80c 	bl	8009080 <__malloc_unlock>
 8009068:	e794      	b.n	8008f94 <_malloc_r+0x20>
 800906a:	6005      	str	r5, [r0, #0]
 800906c:	e7d6      	b.n	800901c <_malloc_r+0xa8>
 800906e:	bf00      	nop
 8009070:	2000206c 	.word	0x2000206c

08009074 <__malloc_lock>:
 8009074:	4801      	ldr	r0, [pc, #4]	@ (800907c <__malloc_lock+0x8>)
 8009076:	f7ff bf0f 	b.w	8008e98 <__retarget_lock_acquire_recursive>
 800907a:	bf00      	nop
 800907c:	20002064 	.word	0x20002064

08009080 <__malloc_unlock>:
 8009080:	4801      	ldr	r0, [pc, #4]	@ (8009088 <__malloc_unlock+0x8>)
 8009082:	f7ff bf0a 	b.w	8008e9a <__retarget_lock_release_recursive>
 8009086:	bf00      	nop
 8009088:	20002064 	.word	0x20002064

0800908c <__ssputs_r>:
 800908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	688e      	ldr	r6, [r1, #8]
 8009092:	461f      	mov	r7, r3
 8009094:	42be      	cmp	r6, r7
 8009096:	680b      	ldr	r3, [r1, #0]
 8009098:	4682      	mov	sl, r0
 800909a:	460c      	mov	r4, r1
 800909c:	4690      	mov	r8, r2
 800909e:	d82d      	bhi.n	80090fc <__ssputs_r+0x70>
 80090a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090a8:	d026      	beq.n	80090f8 <__ssputs_r+0x6c>
 80090aa:	6965      	ldr	r5, [r4, #20]
 80090ac:	6909      	ldr	r1, [r1, #16]
 80090ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090b2:	eba3 0901 	sub.w	r9, r3, r1
 80090b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090ba:	1c7b      	adds	r3, r7, #1
 80090bc:	444b      	add	r3, r9
 80090be:	106d      	asrs	r5, r5, #1
 80090c0:	429d      	cmp	r5, r3
 80090c2:	bf38      	it	cc
 80090c4:	461d      	movcc	r5, r3
 80090c6:	0553      	lsls	r3, r2, #21
 80090c8:	d527      	bpl.n	800911a <__ssputs_r+0x8e>
 80090ca:	4629      	mov	r1, r5
 80090cc:	f7ff ff52 	bl	8008f74 <_malloc_r>
 80090d0:	4606      	mov	r6, r0
 80090d2:	b360      	cbz	r0, 800912e <__ssputs_r+0xa2>
 80090d4:	6921      	ldr	r1, [r4, #16]
 80090d6:	464a      	mov	r2, r9
 80090d8:	f000 fae6 	bl	80096a8 <memcpy>
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	6126      	str	r6, [r4, #16]
 80090ea:	6165      	str	r5, [r4, #20]
 80090ec:	444e      	add	r6, r9
 80090ee:	eba5 0509 	sub.w	r5, r5, r9
 80090f2:	6026      	str	r6, [r4, #0]
 80090f4:	60a5      	str	r5, [r4, #8]
 80090f6:	463e      	mov	r6, r7
 80090f8:	42be      	cmp	r6, r7
 80090fa:	d900      	bls.n	80090fe <__ssputs_r+0x72>
 80090fc:	463e      	mov	r6, r7
 80090fe:	6820      	ldr	r0, [r4, #0]
 8009100:	4632      	mov	r2, r6
 8009102:	4641      	mov	r1, r8
 8009104:	f000 faa6 	bl	8009654 <memmove>
 8009108:	68a3      	ldr	r3, [r4, #8]
 800910a:	1b9b      	subs	r3, r3, r6
 800910c:	60a3      	str	r3, [r4, #8]
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	4433      	add	r3, r6
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	2000      	movs	r0, #0
 8009116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911a:	462a      	mov	r2, r5
 800911c:	f000 fad2 	bl	80096c4 <_realloc_r>
 8009120:	4606      	mov	r6, r0
 8009122:	2800      	cmp	r0, #0
 8009124:	d1e0      	bne.n	80090e8 <__ssputs_r+0x5c>
 8009126:	6921      	ldr	r1, [r4, #16]
 8009128:	4650      	mov	r0, sl
 800912a:	f7ff feb7 	bl	8008e9c <_free_r>
 800912e:	230c      	movs	r3, #12
 8009130:	f8ca 3000 	str.w	r3, [sl]
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009140:	e7e9      	b.n	8009116 <__ssputs_r+0x8a>
	...

08009144 <_svfiprintf_r>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	4698      	mov	r8, r3
 800914a:	898b      	ldrh	r3, [r1, #12]
 800914c:	061b      	lsls	r3, r3, #24
 800914e:	b09d      	sub	sp, #116	@ 0x74
 8009150:	4607      	mov	r7, r0
 8009152:	460d      	mov	r5, r1
 8009154:	4614      	mov	r4, r2
 8009156:	d510      	bpl.n	800917a <_svfiprintf_r+0x36>
 8009158:	690b      	ldr	r3, [r1, #16]
 800915a:	b973      	cbnz	r3, 800917a <_svfiprintf_r+0x36>
 800915c:	2140      	movs	r1, #64	@ 0x40
 800915e:	f7ff ff09 	bl	8008f74 <_malloc_r>
 8009162:	6028      	str	r0, [r5, #0]
 8009164:	6128      	str	r0, [r5, #16]
 8009166:	b930      	cbnz	r0, 8009176 <_svfiprintf_r+0x32>
 8009168:	230c      	movs	r3, #12
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009170:	b01d      	add	sp, #116	@ 0x74
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	2340      	movs	r3, #64	@ 0x40
 8009178:	616b      	str	r3, [r5, #20]
 800917a:	2300      	movs	r3, #0
 800917c:	9309      	str	r3, [sp, #36]	@ 0x24
 800917e:	2320      	movs	r3, #32
 8009180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009184:	f8cd 800c 	str.w	r8, [sp, #12]
 8009188:	2330      	movs	r3, #48	@ 0x30
 800918a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009328 <_svfiprintf_r+0x1e4>
 800918e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009192:	f04f 0901 	mov.w	r9, #1
 8009196:	4623      	mov	r3, r4
 8009198:	469a      	mov	sl, r3
 800919a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800919e:	b10a      	cbz	r2, 80091a4 <_svfiprintf_r+0x60>
 80091a0:	2a25      	cmp	r2, #37	@ 0x25
 80091a2:	d1f9      	bne.n	8009198 <_svfiprintf_r+0x54>
 80091a4:	ebba 0b04 	subs.w	fp, sl, r4
 80091a8:	d00b      	beq.n	80091c2 <_svfiprintf_r+0x7e>
 80091aa:	465b      	mov	r3, fp
 80091ac:	4622      	mov	r2, r4
 80091ae:	4629      	mov	r1, r5
 80091b0:	4638      	mov	r0, r7
 80091b2:	f7ff ff6b 	bl	800908c <__ssputs_r>
 80091b6:	3001      	adds	r0, #1
 80091b8:	f000 80a7 	beq.w	800930a <_svfiprintf_r+0x1c6>
 80091bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091be:	445a      	add	r2, fp
 80091c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80091c2:	f89a 3000 	ldrb.w	r3, [sl]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 809f 	beq.w	800930a <_svfiprintf_r+0x1c6>
 80091cc:	2300      	movs	r3, #0
 80091ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d6:	f10a 0a01 	add.w	sl, sl, #1
 80091da:	9304      	str	r3, [sp, #16]
 80091dc:	9307      	str	r3, [sp, #28]
 80091de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091e4:	4654      	mov	r4, sl
 80091e6:	2205      	movs	r2, #5
 80091e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ec:	484e      	ldr	r0, [pc, #312]	@ (8009328 <_svfiprintf_r+0x1e4>)
 80091ee:	f7f6 fff7 	bl	80001e0 <memchr>
 80091f2:	9a04      	ldr	r2, [sp, #16]
 80091f4:	b9d8      	cbnz	r0, 800922e <_svfiprintf_r+0xea>
 80091f6:	06d0      	lsls	r0, r2, #27
 80091f8:	bf44      	itt	mi
 80091fa:	2320      	movmi	r3, #32
 80091fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009200:	0711      	lsls	r1, r2, #28
 8009202:	bf44      	itt	mi
 8009204:	232b      	movmi	r3, #43	@ 0x2b
 8009206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800920a:	f89a 3000 	ldrb.w	r3, [sl]
 800920e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009210:	d015      	beq.n	800923e <_svfiprintf_r+0xfa>
 8009212:	9a07      	ldr	r2, [sp, #28]
 8009214:	4654      	mov	r4, sl
 8009216:	2000      	movs	r0, #0
 8009218:	f04f 0c0a 	mov.w	ip, #10
 800921c:	4621      	mov	r1, r4
 800921e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009222:	3b30      	subs	r3, #48	@ 0x30
 8009224:	2b09      	cmp	r3, #9
 8009226:	d94b      	bls.n	80092c0 <_svfiprintf_r+0x17c>
 8009228:	b1b0      	cbz	r0, 8009258 <_svfiprintf_r+0x114>
 800922a:	9207      	str	r2, [sp, #28]
 800922c:	e014      	b.n	8009258 <_svfiprintf_r+0x114>
 800922e:	eba0 0308 	sub.w	r3, r0, r8
 8009232:	fa09 f303 	lsl.w	r3, r9, r3
 8009236:	4313      	orrs	r3, r2
 8009238:	9304      	str	r3, [sp, #16]
 800923a:	46a2      	mov	sl, r4
 800923c:	e7d2      	b.n	80091e4 <_svfiprintf_r+0xa0>
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	1d19      	adds	r1, r3, #4
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	9103      	str	r1, [sp, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	bfbb      	ittet	lt
 800924a:	425b      	neglt	r3, r3
 800924c:	f042 0202 	orrlt.w	r2, r2, #2
 8009250:	9307      	strge	r3, [sp, #28]
 8009252:	9307      	strlt	r3, [sp, #28]
 8009254:	bfb8      	it	lt
 8009256:	9204      	strlt	r2, [sp, #16]
 8009258:	7823      	ldrb	r3, [r4, #0]
 800925a:	2b2e      	cmp	r3, #46	@ 0x2e
 800925c:	d10a      	bne.n	8009274 <_svfiprintf_r+0x130>
 800925e:	7863      	ldrb	r3, [r4, #1]
 8009260:	2b2a      	cmp	r3, #42	@ 0x2a
 8009262:	d132      	bne.n	80092ca <_svfiprintf_r+0x186>
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	1d1a      	adds	r2, r3, #4
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	9203      	str	r2, [sp, #12]
 800926c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009270:	3402      	adds	r4, #2
 8009272:	9305      	str	r3, [sp, #20]
 8009274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009338 <_svfiprintf_r+0x1f4>
 8009278:	7821      	ldrb	r1, [r4, #0]
 800927a:	2203      	movs	r2, #3
 800927c:	4650      	mov	r0, sl
 800927e:	f7f6 ffaf 	bl	80001e0 <memchr>
 8009282:	b138      	cbz	r0, 8009294 <_svfiprintf_r+0x150>
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	eba0 000a 	sub.w	r0, r0, sl
 800928a:	2240      	movs	r2, #64	@ 0x40
 800928c:	4082      	lsls	r2, r0
 800928e:	4313      	orrs	r3, r2
 8009290:	3401      	adds	r4, #1
 8009292:	9304      	str	r3, [sp, #16]
 8009294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009298:	4824      	ldr	r0, [pc, #144]	@ (800932c <_svfiprintf_r+0x1e8>)
 800929a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800929e:	2206      	movs	r2, #6
 80092a0:	f7f6 ff9e 	bl	80001e0 <memchr>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d036      	beq.n	8009316 <_svfiprintf_r+0x1d2>
 80092a8:	4b21      	ldr	r3, [pc, #132]	@ (8009330 <_svfiprintf_r+0x1ec>)
 80092aa:	bb1b      	cbnz	r3, 80092f4 <_svfiprintf_r+0x1b0>
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	3307      	adds	r3, #7
 80092b0:	f023 0307 	bic.w	r3, r3, #7
 80092b4:	3308      	adds	r3, #8
 80092b6:	9303      	str	r3, [sp, #12]
 80092b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ba:	4433      	add	r3, r6
 80092bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092be:	e76a      	b.n	8009196 <_svfiprintf_r+0x52>
 80092c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80092c4:	460c      	mov	r4, r1
 80092c6:	2001      	movs	r0, #1
 80092c8:	e7a8      	b.n	800921c <_svfiprintf_r+0xd8>
 80092ca:	2300      	movs	r3, #0
 80092cc:	3401      	adds	r4, #1
 80092ce:	9305      	str	r3, [sp, #20]
 80092d0:	4619      	mov	r1, r3
 80092d2:	f04f 0c0a 	mov.w	ip, #10
 80092d6:	4620      	mov	r0, r4
 80092d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092dc:	3a30      	subs	r2, #48	@ 0x30
 80092de:	2a09      	cmp	r2, #9
 80092e0:	d903      	bls.n	80092ea <_svfiprintf_r+0x1a6>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0c6      	beq.n	8009274 <_svfiprintf_r+0x130>
 80092e6:	9105      	str	r1, [sp, #20]
 80092e8:	e7c4      	b.n	8009274 <_svfiprintf_r+0x130>
 80092ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ee:	4604      	mov	r4, r0
 80092f0:	2301      	movs	r3, #1
 80092f2:	e7f0      	b.n	80092d6 <_svfiprintf_r+0x192>
 80092f4:	ab03      	add	r3, sp, #12
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	462a      	mov	r2, r5
 80092fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009334 <_svfiprintf_r+0x1f0>)
 80092fc:	a904      	add	r1, sp, #16
 80092fe:	4638      	mov	r0, r7
 8009300:	f3af 8000 	nop.w
 8009304:	1c42      	adds	r2, r0, #1
 8009306:	4606      	mov	r6, r0
 8009308:	d1d6      	bne.n	80092b8 <_svfiprintf_r+0x174>
 800930a:	89ab      	ldrh	r3, [r5, #12]
 800930c:	065b      	lsls	r3, r3, #25
 800930e:	f53f af2d 	bmi.w	800916c <_svfiprintf_r+0x28>
 8009312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009314:	e72c      	b.n	8009170 <_svfiprintf_r+0x2c>
 8009316:	ab03      	add	r3, sp, #12
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	462a      	mov	r2, r5
 800931c:	4b05      	ldr	r3, [pc, #20]	@ (8009334 <_svfiprintf_r+0x1f0>)
 800931e:	a904      	add	r1, sp, #16
 8009320:	4638      	mov	r0, r7
 8009322:	f000 f879 	bl	8009418 <_printf_i>
 8009326:	e7ed      	b.n	8009304 <_svfiprintf_r+0x1c0>
 8009328:	08009964 	.word	0x08009964
 800932c:	0800996e 	.word	0x0800996e
 8009330:	00000000 	.word	0x00000000
 8009334:	0800908d 	.word	0x0800908d
 8009338:	0800996a 	.word	0x0800996a

0800933c <_printf_common>:
 800933c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009340:	4616      	mov	r6, r2
 8009342:	4698      	mov	r8, r3
 8009344:	688a      	ldr	r2, [r1, #8]
 8009346:	690b      	ldr	r3, [r1, #16]
 8009348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800934c:	4293      	cmp	r3, r2
 800934e:	bfb8      	it	lt
 8009350:	4613      	movlt	r3, r2
 8009352:	6033      	str	r3, [r6, #0]
 8009354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009358:	4607      	mov	r7, r0
 800935a:	460c      	mov	r4, r1
 800935c:	b10a      	cbz	r2, 8009362 <_printf_common+0x26>
 800935e:	3301      	adds	r3, #1
 8009360:	6033      	str	r3, [r6, #0]
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	0699      	lsls	r1, r3, #26
 8009366:	bf42      	ittt	mi
 8009368:	6833      	ldrmi	r3, [r6, #0]
 800936a:	3302      	addmi	r3, #2
 800936c:	6033      	strmi	r3, [r6, #0]
 800936e:	6825      	ldr	r5, [r4, #0]
 8009370:	f015 0506 	ands.w	r5, r5, #6
 8009374:	d106      	bne.n	8009384 <_printf_common+0x48>
 8009376:	f104 0a19 	add.w	sl, r4, #25
 800937a:	68e3      	ldr	r3, [r4, #12]
 800937c:	6832      	ldr	r2, [r6, #0]
 800937e:	1a9b      	subs	r3, r3, r2
 8009380:	42ab      	cmp	r3, r5
 8009382:	dc26      	bgt.n	80093d2 <_printf_common+0x96>
 8009384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009388:	6822      	ldr	r2, [r4, #0]
 800938a:	3b00      	subs	r3, #0
 800938c:	bf18      	it	ne
 800938e:	2301      	movne	r3, #1
 8009390:	0692      	lsls	r2, r2, #26
 8009392:	d42b      	bmi.n	80093ec <_printf_common+0xb0>
 8009394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009398:	4641      	mov	r1, r8
 800939a:	4638      	mov	r0, r7
 800939c:	47c8      	blx	r9
 800939e:	3001      	adds	r0, #1
 80093a0:	d01e      	beq.n	80093e0 <_printf_common+0xa4>
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	6922      	ldr	r2, [r4, #16]
 80093a6:	f003 0306 	and.w	r3, r3, #6
 80093aa:	2b04      	cmp	r3, #4
 80093ac:	bf02      	ittt	eq
 80093ae:	68e5      	ldreq	r5, [r4, #12]
 80093b0:	6833      	ldreq	r3, [r6, #0]
 80093b2:	1aed      	subeq	r5, r5, r3
 80093b4:	68a3      	ldr	r3, [r4, #8]
 80093b6:	bf0c      	ite	eq
 80093b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093bc:	2500      	movne	r5, #0
 80093be:	4293      	cmp	r3, r2
 80093c0:	bfc4      	itt	gt
 80093c2:	1a9b      	subgt	r3, r3, r2
 80093c4:	18ed      	addgt	r5, r5, r3
 80093c6:	2600      	movs	r6, #0
 80093c8:	341a      	adds	r4, #26
 80093ca:	42b5      	cmp	r5, r6
 80093cc:	d11a      	bne.n	8009404 <_printf_common+0xc8>
 80093ce:	2000      	movs	r0, #0
 80093d0:	e008      	b.n	80093e4 <_printf_common+0xa8>
 80093d2:	2301      	movs	r3, #1
 80093d4:	4652      	mov	r2, sl
 80093d6:	4641      	mov	r1, r8
 80093d8:	4638      	mov	r0, r7
 80093da:	47c8      	blx	r9
 80093dc:	3001      	adds	r0, #1
 80093de:	d103      	bne.n	80093e8 <_printf_common+0xac>
 80093e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e8:	3501      	adds	r5, #1
 80093ea:	e7c6      	b.n	800937a <_printf_common+0x3e>
 80093ec:	18e1      	adds	r1, r4, r3
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	2030      	movs	r0, #48	@ 0x30
 80093f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093f6:	4422      	add	r2, r4
 80093f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009400:	3302      	adds	r3, #2
 8009402:	e7c7      	b.n	8009394 <_printf_common+0x58>
 8009404:	2301      	movs	r3, #1
 8009406:	4622      	mov	r2, r4
 8009408:	4641      	mov	r1, r8
 800940a:	4638      	mov	r0, r7
 800940c:	47c8      	blx	r9
 800940e:	3001      	adds	r0, #1
 8009410:	d0e6      	beq.n	80093e0 <_printf_common+0xa4>
 8009412:	3601      	adds	r6, #1
 8009414:	e7d9      	b.n	80093ca <_printf_common+0x8e>
	...

08009418 <_printf_i>:
 8009418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800941c:	7e0f      	ldrb	r7, [r1, #24]
 800941e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009420:	2f78      	cmp	r7, #120	@ 0x78
 8009422:	4691      	mov	r9, r2
 8009424:	4680      	mov	r8, r0
 8009426:	460c      	mov	r4, r1
 8009428:	469a      	mov	sl, r3
 800942a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800942e:	d807      	bhi.n	8009440 <_printf_i+0x28>
 8009430:	2f62      	cmp	r7, #98	@ 0x62
 8009432:	d80a      	bhi.n	800944a <_printf_i+0x32>
 8009434:	2f00      	cmp	r7, #0
 8009436:	f000 80d1 	beq.w	80095dc <_printf_i+0x1c4>
 800943a:	2f58      	cmp	r7, #88	@ 0x58
 800943c:	f000 80b8 	beq.w	80095b0 <_printf_i+0x198>
 8009440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009448:	e03a      	b.n	80094c0 <_printf_i+0xa8>
 800944a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800944e:	2b15      	cmp	r3, #21
 8009450:	d8f6      	bhi.n	8009440 <_printf_i+0x28>
 8009452:	a101      	add	r1, pc, #4	@ (adr r1, 8009458 <_printf_i+0x40>)
 8009454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009458:	080094b1 	.word	0x080094b1
 800945c:	080094c5 	.word	0x080094c5
 8009460:	08009441 	.word	0x08009441
 8009464:	08009441 	.word	0x08009441
 8009468:	08009441 	.word	0x08009441
 800946c:	08009441 	.word	0x08009441
 8009470:	080094c5 	.word	0x080094c5
 8009474:	08009441 	.word	0x08009441
 8009478:	08009441 	.word	0x08009441
 800947c:	08009441 	.word	0x08009441
 8009480:	08009441 	.word	0x08009441
 8009484:	080095c3 	.word	0x080095c3
 8009488:	080094ef 	.word	0x080094ef
 800948c:	0800957d 	.word	0x0800957d
 8009490:	08009441 	.word	0x08009441
 8009494:	08009441 	.word	0x08009441
 8009498:	080095e5 	.word	0x080095e5
 800949c:	08009441 	.word	0x08009441
 80094a0:	080094ef 	.word	0x080094ef
 80094a4:	08009441 	.word	0x08009441
 80094a8:	08009441 	.word	0x08009441
 80094ac:	08009585 	.word	0x08009585
 80094b0:	6833      	ldr	r3, [r6, #0]
 80094b2:	1d1a      	adds	r2, r3, #4
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6032      	str	r2, [r6, #0]
 80094b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094c0:	2301      	movs	r3, #1
 80094c2:	e09c      	b.n	80095fe <_printf_i+0x1e6>
 80094c4:	6833      	ldr	r3, [r6, #0]
 80094c6:	6820      	ldr	r0, [r4, #0]
 80094c8:	1d19      	adds	r1, r3, #4
 80094ca:	6031      	str	r1, [r6, #0]
 80094cc:	0606      	lsls	r6, r0, #24
 80094ce:	d501      	bpl.n	80094d4 <_printf_i+0xbc>
 80094d0:	681d      	ldr	r5, [r3, #0]
 80094d2:	e003      	b.n	80094dc <_printf_i+0xc4>
 80094d4:	0645      	lsls	r5, r0, #25
 80094d6:	d5fb      	bpl.n	80094d0 <_printf_i+0xb8>
 80094d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094dc:	2d00      	cmp	r5, #0
 80094de:	da03      	bge.n	80094e8 <_printf_i+0xd0>
 80094e0:	232d      	movs	r3, #45	@ 0x2d
 80094e2:	426d      	negs	r5, r5
 80094e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094e8:	4858      	ldr	r0, [pc, #352]	@ (800964c <_printf_i+0x234>)
 80094ea:	230a      	movs	r3, #10
 80094ec:	e011      	b.n	8009512 <_printf_i+0xfa>
 80094ee:	6821      	ldr	r1, [r4, #0]
 80094f0:	6833      	ldr	r3, [r6, #0]
 80094f2:	0608      	lsls	r0, r1, #24
 80094f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80094f8:	d402      	bmi.n	8009500 <_printf_i+0xe8>
 80094fa:	0649      	lsls	r1, r1, #25
 80094fc:	bf48      	it	mi
 80094fe:	b2ad      	uxthmi	r5, r5
 8009500:	2f6f      	cmp	r7, #111	@ 0x6f
 8009502:	4852      	ldr	r0, [pc, #328]	@ (800964c <_printf_i+0x234>)
 8009504:	6033      	str	r3, [r6, #0]
 8009506:	bf14      	ite	ne
 8009508:	230a      	movne	r3, #10
 800950a:	2308      	moveq	r3, #8
 800950c:	2100      	movs	r1, #0
 800950e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009512:	6866      	ldr	r6, [r4, #4]
 8009514:	60a6      	str	r6, [r4, #8]
 8009516:	2e00      	cmp	r6, #0
 8009518:	db05      	blt.n	8009526 <_printf_i+0x10e>
 800951a:	6821      	ldr	r1, [r4, #0]
 800951c:	432e      	orrs	r6, r5
 800951e:	f021 0104 	bic.w	r1, r1, #4
 8009522:	6021      	str	r1, [r4, #0]
 8009524:	d04b      	beq.n	80095be <_printf_i+0x1a6>
 8009526:	4616      	mov	r6, r2
 8009528:	fbb5 f1f3 	udiv	r1, r5, r3
 800952c:	fb03 5711 	mls	r7, r3, r1, r5
 8009530:	5dc7      	ldrb	r7, [r0, r7]
 8009532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009536:	462f      	mov	r7, r5
 8009538:	42bb      	cmp	r3, r7
 800953a:	460d      	mov	r5, r1
 800953c:	d9f4      	bls.n	8009528 <_printf_i+0x110>
 800953e:	2b08      	cmp	r3, #8
 8009540:	d10b      	bne.n	800955a <_printf_i+0x142>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	07df      	lsls	r7, r3, #31
 8009546:	d508      	bpl.n	800955a <_printf_i+0x142>
 8009548:	6923      	ldr	r3, [r4, #16]
 800954a:	6861      	ldr	r1, [r4, #4]
 800954c:	4299      	cmp	r1, r3
 800954e:	bfde      	ittt	le
 8009550:	2330      	movle	r3, #48	@ 0x30
 8009552:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009556:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800955a:	1b92      	subs	r2, r2, r6
 800955c:	6122      	str	r2, [r4, #16]
 800955e:	f8cd a000 	str.w	sl, [sp]
 8009562:	464b      	mov	r3, r9
 8009564:	aa03      	add	r2, sp, #12
 8009566:	4621      	mov	r1, r4
 8009568:	4640      	mov	r0, r8
 800956a:	f7ff fee7 	bl	800933c <_printf_common>
 800956e:	3001      	adds	r0, #1
 8009570:	d14a      	bne.n	8009608 <_printf_i+0x1f0>
 8009572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009576:	b004      	add	sp, #16
 8009578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	f043 0320 	orr.w	r3, r3, #32
 8009582:	6023      	str	r3, [r4, #0]
 8009584:	4832      	ldr	r0, [pc, #200]	@ (8009650 <_printf_i+0x238>)
 8009586:	2778      	movs	r7, #120	@ 0x78
 8009588:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	6831      	ldr	r1, [r6, #0]
 8009590:	061f      	lsls	r7, r3, #24
 8009592:	f851 5b04 	ldr.w	r5, [r1], #4
 8009596:	d402      	bmi.n	800959e <_printf_i+0x186>
 8009598:	065f      	lsls	r7, r3, #25
 800959a:	bf48      	it	mi
 800959c:	b2ad      	uxthmi	r5, r5
 800959e:	6031      	str	r1, [r6, #0]
 80095a0:	07d9      	lsls	r1, r3, #31
 80095a2:	bf44      	itt	mi
 80095a4:	f043 0320 	orrmi.w	r3, r3, #32
 80095a8:	6023      	strmi	r3, [r4, #0]
 80095aa:	b11d      	cbz	r5, 80095b4 <_printf_i+0x19c>
 80095ac:	2310      	movs	r3, #16
 80095ae:	e7ad      	b.n	800950c <_printf_i+0xf4>
 80095b0:	4826      	ldr	r0, [pc, #152]	@ (800964c <_printf_i+0x234>)
 80095b2:	e7e9      	b.n	8009588 <_printf_i+0x170>
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	f023 0320 	bic.w	r3, r3, #32
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	e7f6      	b.n	80095ac <_printf_i+0x194>
 80095be:	4616      	mov	r6, r2
 80095c0:	e7bd      	b.n	800953e <_printf_i+0x126>
 80095c2:	6833      	ldr	r3, [r6, #0]
 80095c4:	6825      	ldr	r5, [r4, #0]
 80095c6:	6961      	ldr	r1, [r4, #20]
 80095c8:	1d18      	adds	r0, r3, #4
 80095ca:	6030      	str	r0, [r6, #0]
 80095cc:	062e      	lsls	r6, r5, #24
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	d501      	bpl.n	80095d6 <_printf_i+0x1be>
 80095d2:	6019      	str	r1, [r3, #0]
 80095d4:	e002      	b.n	80095dc <_printf_i+0x1c4>
 80095d6:	0668      	lsls	r0, r5, #25
 80095d8:	d5fb      	bpl.n	80095d2 <_printf_i+0x1ba>
 80095da:	8019      	strh	r1, [r3, #0]
 80095dc:	2300      	movs	r3, #0
 80095de:	6123      	str	r3, [r4, #16]
 80095e0:	4616      	mov	r6, r2
 80095e2:	e7bc      	b.n	800955e <_printf_i+0x146>
 80095e4:	6833      	ldr	r3, [r6, #0]
 80095e6:	1d1a      	adds	r2, r3, #4
 80095e8:	6032      	str	r2, [r6, #0]
 80095ea:	681e      	ldr	r6, [r3, #0]
 80095ec:	6862      	ldr	r2, [r4, #4]
 80095ee:	2100      	movs	r1, #0
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7f6 fdf5 	bl	80001e0 <memchr>
 80095f6:	b108      	cbz	r0, 80095fc <_printf_i+0x1e4>
 80095f8:	1b80      	subs	r0, r0, r6
 80095fa:	6060      	str	r0, [r4, #4]
 80095fc:	6863      	ldr	r3, [r4, #4]
 80095fe:	6123      	str	r3, [r4, #16]
 8009600:	2300      	movs	r3, #0
 8009602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009606:	e7aa      	b.n	800955e <_printf_i+0x146>
 8009608:	6923      	ldr	r3, [r4, #16]
 800960a:	4632      	mov	r2, r6
 800960c:	4649      	mov	r1, r9
 800960e:	4640      	mov	r0, r8
 8009610:	47d0      	blx	sl
 8009612:	3001      	adds	r0, #1
 8009614:	d0ad      	beq.n	8009572 <_printf_i+0x15a>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	079b      	lsls	r3, r3, #30
 800961a:	d413      	bmi.n	8009644 <_printf_i+0x22c>
 800961c:	68e0      	ldr	r0, [r4, #12]
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	4298      	cmp	r0, r3
 8009622:	bfb8      	it	lt
 8009624:	4618      	movlt	r0, r3
 8009626:	e7a6      	b.n	8009576 <_printf_i+0x15e>
 8009628:	2301      	movs	r3, #1
 800962a:	4632      	mov	r2, r6
 800962c:	4649      	mov	r1, r9
 800962e:	4640      	mov	r0, r8
 8009630:	47d0      	blx	sl
 8009632:	3001      	adds	r0, #1
 8009634:	d09d      	beq.n	8009572 <_printf_i+0x15a>
 8009636:	3501      	adds	r5, #1
 8009638:	68e3      	ldr	r3, [r4, #12]
 800963a:	9903      	ldr	r1, [sp, #12]
 800963c:	1a5b      	subs	r3, r3, r1
 800963e:	42ab      	cmp	r3, r5
 8009640:	dcf2      	bgt.n	8009628 <_printf_i+0x210>
 8009642:	e7eb      	b.n	800961c <_printf_i+0x204>
 8009644:	2500      	movs	r5, #0
 8009646:	f104 0619 	add.w	r6, r4, #25
 800964a:	e7f5      	b.n	8009638 <_printf_i+0x220>
 800964c:	08009975 	.word	0x08009975
 8009650:	08009986 	.word	0x08009986

08009654 <memmove>:
 8009654:	4288      	cmp	r0, r1
 8009656:	b510      	push	{r4, lr}
 8009658:	eb01 0402 	add.w	r4, r1, r2
 800965c:	d902      	bls.n	8009664 <memmove+0x10>
 800965e:	4284      	cmp	r4, r0
 8009660:	4623      	mov	r3, r4
 8009662:	d807      	bhi.n	8009674 <memmove+0x20>
 8009664:	1e43      	subs	r3, r0, #1
 8009666:	42a1      	cmp	r1, r4
 8009668:	d008      	beq.n	800967c <memmove+0x28>
 800966a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800966e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009672:	e7f8      	b.n	8009666 <memmove+0x12>
 8009674:	4402      	add	r2, r0
 8009676:	4601      	mov	r1, r0
 8009678:	428a      	cmp	r2, r1
 800967a:	d100      	bne.n	800967e <memmove+0x2a>
 800967c:	bd10      	pop	{r4, pc}
 800967e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009686:	e7f7      	b.n	8009678 <memmove+0x24>

08009688 <_sbrk_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	4d06      	ldr	r5, [pc, #24]	@ (80096a4 <_sbrk_r+0x1c>)
 800968c:	2300      	movs	r3, #0
 800968e:	4604      	mov	r4, r0
 8009690:	4608      	mov	r0, r1
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	f7f8 ff0e 	bl	80024b4 <_sbrk>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d102      	bne.n	80096a2 <_sbrk_r+0x1a>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	b103      	cbz	r3, 80096a2 <_sbrk_r+0x1a>
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	20002060 	.word	0x20002060

080096a8 <memcpy>:
 80096a8:	440a      	add	r2, r1
 80096aa:	4291      	cmp	r1, r2
 80096ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80096b0:	d100      	bne.n	80096b4 <memcpy+0xc>
 80096b2:	4770      	bx	lr
 80096b4:	b510      	push	{r4, lr}
 80096b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096be:	4291      	cmp	r1, r2
 80096c0:	d1f9      	bne.n	80096b6 <memcpy+0xe>
 80096c2:	bd10      	pop	{r4, pc}

080096c4 <_realloc_r>:
 80096c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c8:	4607      	mov	r7, r0
 80096ca:	4614      	mov	r4, r2
 80096cc:	460d      	mov	r5, r1
 80096ce:	b921      	cbnz	r1, 80096da <_realloc_r+0x16>
 80096d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096d4:	4611      	mov	r1, r2
 80096d6:	f7ff bc4d 	b.w	8008f74 <_malloc_r>
 80096da:	b92a      	cbnz	r2, 80096e8 <_realloc_r+0x24>
 80096dc:	f7ff fbde 	bl	8008e9c <_free_r>
 80096e0:	4625      	mov	r5, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e8:	f000 f81a 	bl	8009720 <_malloc_usable_size_r>
 80096ec:	4284      	cmp	r4, r0
 80096ee:	4606      	mov	r6, r0
 80096f0:	d802      	bhi.n	80096f8 <_realloc_r+0x34>
 80096f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096f6:	d8f4      	bhi.n	80096e2 <_realloc_r+0x1e>
 80096f8:	4621      	mov	r1, r4
 80096fa:	4638      	mov	r0, r7
 80096fc:	f7ff fc3a 	bl	8008f74 <_malloc_r>
 8009700:	4680      	mov	r8, r0
 8009702:	b908      	cbnz	r0, 8009708 <_realloc_r+0x44>
 8009704:	4645      	mov	r5, r8
 8009706:	e7ec      	b.n	80096e2 <_realloc_r+0x1e>
 8009708:	42b4      	cmp	r4, r6
 800970a:	4622      	mov	r2, r4
 800970c:	4629      	mov	r1, r5
 800970e:	bf28      	it	cs
 8009710:	4632      	movcs	r2, r6
 8009712:	f7ff ffc9 	bl	80096a8 <memcpy>
 8009716:	4629      	mov	r1, r5
 8009718:	4638      	mov	r0, r7
 800971a:	f7ff fbbf 	bl	8008e9c <_free_r>
 800971e:	e7f1      	b.n	8009704 <_realloc_r+0x40>

08009720 <_malloc_usable_size_r>:
 8009720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009724:	1f18      	subs	r0, r3, #4
 8009726:	2b00      	cmp	r3, #0
 8009728:	bfbc      	itt	lt
 800972a:	580b      	ldrlt	r3, [r1, r0]
 800972c:	18c0      	addlt	r0, r0, r3
 800972e:	4770      	bx	lr

08009730 <_init>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	bf00      	nop
 8009734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009736:	bc08      	pop	{r3}
 8009738:	469e      	mov	lr, r3
 800973a:	4770      	bx	lr

0800973c <_fini>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	bf00      	nop
 8009740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009742:	bc08      	pop	{r3}
 8009744:	469e      	mov	lr, r3
 8009746:	4770      	bx	lr
