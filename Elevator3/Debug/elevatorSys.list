
elevatorSys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b58  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08009ce8  08009ce8  0000ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0ac  0800a0ac  0000c154  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a0ac  0800a0ac  0000b0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b4  0800a0b4  0000c154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b4  0800a0b4  0000b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0b8  0800a0b8  0000b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  0800a0bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c154  2**0
                  CONTENTS
 10 .bss          00001f48  20000154  20000154  0000c154  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000209c  2000209c  0000c154  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c154  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e1b  00000000  00000000  0000c184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000477b  00000000  00000000  0001ff9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00024720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bce  00000000  00000000  00025730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e79  00000000  00000000  000262fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152f8  00000000  00000000  0004b177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c86f4  00000000  00000000  0006046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00128b63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041f4  00000000  00000000  00128ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0012cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000154 	.word	0x20000154
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cd0 	.word	0x08009cd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000158 	.word	0x20000158
 80001cc:	08009cd0 	.word	0x08009cd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <QF_int_disable_>:
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function, which means that
// this interrupt management policy CANNOT nest.
__attribute__ ((naked, weak))
void QF_int_disable_(void) {
__asm volatile (
 80005ac:	f3ef 8011 	mrs	r0, BASEPRI
 80005b0:	213f      	movs	r1, #63	@ 0x3f
 80005b2:	f381 8811 	msr	BASEPRI, r1
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d100      	bne.n	80005bc <QF_int_disable_error>
 80005ba:	4770      	bx	lr

080005bc <QF_int_disable_error>:
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <QF_int_disable_error+0xc>)
 80005be:	2164      	movs	r1, #100	@ 0x64
 80005c0:	4a02      	ldr	r2, [pc, #8]	@ (80005cc <QF_int_disable_error+0x10>)
 80005c2:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#100          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80005c4:	bf00      	nop
 80005c6:	0000      	.short	0x0000
 80005c8:	08009fa8 	.word	0x08009fa8
 80005cc:	08000d61 	.word	0x08000d61

080005d0 <QF_int_enable_>:
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function, which means that
// this interrupt management policy CANNOT nest.
__attribute__ ((naked, weak))
void QF_int_enable_(void) {
__asm volatile (
 80005d0:	f3ef 8011 	mrs	r0, BASEPRI
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d003      	beq.n	80005e0 <QF_int_enable_error>
 80005d8:	2100      	movs	r1, #0
 80005da:	f381 8811 	msr	BASEPRI, r1
 80005de:	4770      	bx	lr

080005e0 <QF_int_enable_error>:
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <QF_int_enable_error+0xc>)
 80005e2:	2165      	movs	r1, #101	@ 0x65
 80005e4:	4a02      	ldr	r2, [pc, #8]	@ (80005f0 <QF_int_enable_error+0x10>)
 80005e6:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#101          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80005e8:	bf00      	nop
 80005ea:	0000      	.short	0x0000
 80005ec:	08009fa8 	.word	0x08009fa8
 80005f0:	08000d61 	.word	0x08000d61

080005f4 <QF_crit_entry_>:
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function, which means that
// this critical section CANNOT nest.
__attribute__ ((naked, weak))
void QF_crit_entry_(void) {
__asm volatile (
 80005f4:	f3ef 8011 	mrs	r0, BASEPRI
 80005f8:	213f      	movs	r1, #63	@ 0x3f
 80005fa:	f381 8811 	msr	BASEPRI, r1
 80005fe:	2800      	cmp	r0, #0
 8000600:	d100      	bne.n	8000604 <QF_crit_entry_error>
 8000602:	4770      	bx	lr

08000604 <QF_crit_entry_error>:
 8000604:	4802      	ldr	r0, [pc, #8]	@ (8000610 <QF_crit_entry_error+0xc>)
 8000606:	216e      	movs	r1, #110	@ 0x6e
 8000608:	4a02      	ldr	r2, [pc, #8]	@ (8000614 <QF_crit_entry_error+0x10>)
 800060a:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#110          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 800060c:	bf00      	nop
 800060e:	0000      	.short	0x0000
 8000610:	08009fa8 	.word	0x08009fa8
 8000614:	08000d61 	.word	0x08000d61

08000618 <QF_crit_exit_>:
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function, which means that
// this critical section CANNOT nest.
__attribute__ ((naked, weak))
void QF_crit_exit_(void) {
__asm volatile (
 8000618:	f3ef 8011 	mrs	r0, BASEPRI
 800061c:	2800      	cmp	r0, #0
 800061e:	d003      	beq.n	8000628 <QF_crit_exit_error>
 8000620:	2100      	movs	r1, #0
 8000622:	f381 8811 	msr	BASEPRI, r1
 8000626:	4770      	bx	lr

08000628 <QF_crit_exit_error>:
 8000628:	4802      	ldr	r0, [pc, #8]	@ (8000634 <QF_crit_exit_error+0xc>)
 800062a:	216f      	movs	r1, #111	@ 0x6f
 800062c:	4a02      	ldr	r2, [pc, #8]	@ (8000638 <QF_crit_exit_error+0x10>)
 800062e:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#111          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8000630:	bf00      	nop
 8000632:	0000      	.short	0x0000
 8000634:	08009fa8 	.word	0x08009fa8
 8000638:	08000d61 	.word	0x08000d61

0800063c <QV_init>:
// application programmer forgets to explicitly set priorities of all
// "kernel aware" interrupts.
//
// NOTE: The IRQ priorities established in QV_init() can be later changed
// by the application-level code.
void QV_init(void) {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0

#ifdef QF_USE_BASEPRI   //--------- use BASEPRI for critical section?

    // SCB_SYSPRI[2]:  SysTick
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_USE_BASEPRI << 24U));
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <QV_init+0x5c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <QV_init+0x5c>)
 8000648:	f043 537c 	orr.w	r3, r3, #1056964608	@ 0x3f000000
 800064c:	6013      	str	r3, [r2, #0]

    // set all 240 possible IRQ priories to QF_USE_BASEPRI...
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	e00b      	b.n	800066c <QV_init+0x30>
        NVIC_IP[n] = (QF_USE_BASEPRI << 24U) | (QF_USE_BASEPRI << 16U)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800065c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000660:	f04f 323f 	mov.w	r2, #1061109567	@ 0x3f3f3f3f
 8000664:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000670:	d9f0      	bls.n	8000654 <QV_init+0x18>

#endif                  //--------- use BASEPRI for critical section

#ifdef __ARM_FP         //--------- if VFP available...
    // make sure that the FPU is enabled by setting CP10 & CP11 Full Access
    SCB_CPACR = (SCB_CPACR | ((3UL << 20U) | (3UL << 22U)));
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <QV_init+0x60>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a09      	ldr	r2, [pc, #36]	@ (800069c <QV_init+0x60>)
 8000678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800067c:	6013      	str	r3, [r2, #0]

    // FPU automatic state preservation (ASPEN) lazy stacking (LSPEN)
    FPU_FPCCR = (FPU_FPCCR | (1U << 30U) | (1U << 31U));
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <QV_init+0x64>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <QV_init+0x64>)
 8000684:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8000688:	6013      	str	r3, [r2, #0]
#endif                  //--------- VFP available
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed20 	.word	0xe000ed20
 800069c:	e000ed88 	.word	0xe000ed88
 80006a0:	e000ef34 	.word	0xe000ef34

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db0a      	blt.n	8000716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	490c      	ldr	r1, [pc, #48]	@ (8000738 <__NVIC_SetPriority+0x4c>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	0112      	lsls	r2, r2, #4
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	440b      	add	r3, r1
 8000710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000714:	e00a      	b.n	800072c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4908      	ldr	r1, [pc, #32]	@ (800073c <__NVIC_SetPriority+0x50>)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	3b04      	subs	r3, #4
 8000724:	0112      	lsls	r2, r2, #4
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	440b      	add	r3, r1
 800072a:	761a      	strb	r2, [r3, #24]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000e100 	.word	0xe000e100
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	210f      	movs	r1, #15
 8000760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000764:	f7ff ffc2 	bl	80006ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <orangeOn>:

//============================================================================


//............................................................................
void orangeOn()  { HAL_GPIO_WritePin(LED_GPIO_PORT, ORANGE_PIN, GPIO_PIN_SET); }
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800078e:	4802      	ldr	r0, [pc, #8]	@ (8000798 <orangeOn+0x14>)
 8000790:	f002 fe54 	bl	800343c <HAL_GPIO_WritePin>
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40020c00 	.word	0x40020c00

0800079c <orangeOff>:
void orangeOff() { HAL_GPIO_WritePin(LED_GPIO_PORT, ORANGE_PIN, GPIO_PIN_RESET); }
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a6:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <orangeOff+0x14>)
 80007a8:	f002 fe48 	bl	800343c <HAL_GPIO_WritePin>
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40020c00 	.word	0x40020c00

080007b4 <greenOn>:

void greenOn()   { HAL_GPIO_WritePin(LED_GPIO_PORT, GREEN_PIN, GPIO_PIN_SET); }
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007be:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <greenOn+0x14>)
 80007c0:	f002 fe3c 	bl	800343c <HAL_GPIO_WritePin>
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40020c00 	.word	0x40020c00

080007cc <greenOff>:
void greenOff()  { HAL_GPIO_WritePin(LED_GPIO_PORT, GREEN_PIN, GPIO_PIN_RESET); }
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007d6:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <greenOff+0x14>)
 80007d8:	f002 fe30 	bl	800343c <HAL_GPIO_WritePin>
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020c00 	.word	0x40020c00

080007e4 <redOn>:

void redOn()     { HAL_GPIO_WritePin(LED_GPIO_PORT, RED_PIN, GPIO_PIN_SET); }
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ee:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <redOn+0x14>)
 80007f0:	f002 fe24 	bl	800343c <HAL_GPIO_WritePin>
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40020c00 	.word	0x40020c00

080007fc <redOff>:
void redOff()    { HAL_GPIO_WritePin(LED_GPIO_PORT, RED_PIN, GPIO_PIN_RESET); }
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000806:	4802      	ldr	r0, [pc, #8]	@ (8000810 <redOff+0x14>)
 8000808:	f002 fe18 	bl	800343c <HAL_GPIO_WritePin>
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40020c00 	.word	0x40020c00

08000814 <blueOn>:

void blueOn()    { HAL_GPIO_WritePin(LED_GPIO_PORT, BLUE_PIN, GPIO_PIN_SET); }
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800081e:	4802      	ldr	r0, [pc, #8]	@ (8000828 <blueOn+0x14>)
 8000820:	f002 fe0c 	bl	800343c <HAL_GPIO_WritePin>
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40020c00 	.word	0x40020c00

0800082c <blueOff>:
void blueOff()   { HAL_GPIO_WritePin(LED_GPIO_PORT, BLUE_PIN, GPIO_PIN_RESET); }
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000836:	4802      	ldr	r0, [pc, #8]	@ (8000840 <blueOff+0x14>)
 8000838:	f002 fe00 	bl	800343c <HAL_GPIO_WritePin>
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40020c00 	.word	0x40020c00

08000844 <already_requested>:

//.........................................................................
uint16_t already_requested(uint16_t level){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	80fb      	strh	r3, [r7, #6]
    QF_CRIT_STAT;
    QF_CRIT_ENTRY(); // lock the interrupts
 800084e:	f7ff fed1 	bl	80005f4 <QF_crit_entry_>
    uint16_t ret = (requests & (1U<<level));
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	2201      	movs	r2, #1
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	b29a      	uxth	r2, r3
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <already_requested+0x30>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	b29b      	uxth	r3, r3
 8000862:	4013      	ands	r3, r2
 8000864:	81fb      	strh	r3, [r7, #14]
    QF_CRIT_EXIT(); // unlock the interrupts
 8000866:	f7ff fed7 	bl	8000618 <QF_crit_exit_>
    return ret;
 800086a:	89fb      	ldrh	r3, [r7, #14]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000280 	.word	0x20000280

08000878 <register_request>:
//.........................................................................
void register_request(uint16_t level){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
    static const QEvt ResumeEvt = QEVT_INITIALIZER(RESUME_SIG);
    if (registry_Empyt()){
 8000882:	f000 f855 	bl	8000930 <registry_Empyt>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d007      	beq.n	800089c <register_request+0x24>
        QACTIVE_POST(AOElevator, &ResumeEvt, (void)0U );
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <register_request+0x4c>)
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	2300      	movs	r3, #0
 8000892:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000896:	490c      	ldr	r1, [pc, #48]	@ (80008c8 <register_request+0x50>)
 8000898:	f001 fa9c 	bl	8001dd4 <QActive_post_>
    }
    QF_CRIT_STAT;
    QF_CRIT_ENTRY(); // lock the interrupts
 800089c:	f7ff feaa 	bl	80005f4 <QF_crit_entry_>
    requests |= (1U<<level);
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	2201      	movs	r2, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <register_request+0x54>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <register_request+0x54>)
 80008b6:	801a      	strh	r2, [r3, #0]
    QF_CRIT_EXIT(); // unlock the interrupts
 80008b8:	f7ff feae 	bl	8000618 <QF_crit_exit_>


}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000004 	.word	0x20000004
 80008c8:	08009fd0 	.word	0x08009fd0
 80008cc:	20000280 	.word	0x20000280

080008d0 <unregister_request>:
//.........................................................................
void unregister_request(uint16_t level){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
    uint16_t assetion = already_requested(level);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ffb1 	bl	8000844 <already_requested>
 80008e2:	4603      	mov	r3, r0
 80008e4:	81fb      	strh	r3, [r7, #14]
    Q_ASSERT(assetion);
 80008e6:	f7ff fe85 	bl	80005f4 <QF_crit_entry_>
 80008ea:	89fb      	ldrh	r3, [r7, #14]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d103      	bne.n	80008f8 <unregister_request+0x28>
 80008f0:	217b      	movs	r1, #123	@ 0x7b
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <unregister_request+0x58>)
 80008f4:	f000 fa34 	bl	8000d60 <Q_onError>
 80008f8:	f7ff fe8e 	bl	8000618 <QF_crit_exit_>
    QF_CRIT_STAT;
    QF_CRIT_ENTRY(); // lock the interrupts
 80008fc:	f7ff fe7a 	bl	80005f4 <QF_crit_entry_>
    requests &= ~(1U<<level);
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	2201      	movs	r2, #1
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	b29b      	uxth	r3, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <unregister_request+0x5c>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	b29b      	uxth	r3, r3
 8000914:	4013      	ands	r3, r2
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b04      	ldr	r3, [pc, #16]	@ (800092c <unregister_request+0x5c>)
 800091a:	801a      	strh	r2, [r3, #0]
    QF_CRIT_EXIT(); // unlock the interrupts
 800091c:	f7ff fe7c 	bl	8000618 <QF_crit_exit_>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	08009fb0 	.word	0x08009fb0
 800092c:	20000280 	.word	0x20000280

08000930 <registry_Empyt>:
//.........................................................................
uint16_t registry_Empyt(){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
    QF_CRIT_STAT;
    QF_CRIT_ENTRY(); // lock the interrupts
 8000936:	f7ff fe5d 	bl	80005f4 <QF_crit_entry_>
    uint16_t ret = (requests == 0U);
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <registry_Empyt+0x2c>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	b29b      	uxth	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	bf0c      	ite	eq
 8000944:	2301      	moveq	r3, #1
 8000946:	2300      	movne	r3, #0
 8000948:	b2db      	uxtb	r3, r3
 800094a:	80fb      	strh	r3, [r7, #6]
    QF_CRIT_EXIT(); // unlock the interrupts
 800094c:	f7ff fe64 	bl	8000618 <QF_crit_exit_>
    return ret;
 8000950:	88fb      	ldrh	r3, [r7, #6]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000280 	.word	0x20000280

08000960 <getLowestRequest>:

//..........................................................................
uint16_t getLowestRequest(uint16_t base){
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
    QF_CRIT_STAT;
    QF_CRIT_ENTRY(); // lock the interrupts
 800096a:	f7ff fe43 	bl	80005f4 <QF_crit_entry_>
    uint16_t ret = 0U;
 800096e:	2300      	movs	r3, #0
 8000970:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = base; i <= MAX_LEVELS; ++i){
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	81bb      	strh	r3, [r7, #12]
 8000976:	e010      	b.n	800099a <getLowestRequest+0x3a>
        if (requests & (1U<<i)){
 8000978:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <getLowestRequest+0x50>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b29b      	uxth	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	89bb      	ldrh	r3, [r7, #12]
 8000982:	fa22 f303 	lsr.w	r3, r2, r3
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <getLowestRequest+0x34>
            ret = i;
 800098e:	89bb      	ldrh	r3, [r7, #12]
 8000990:	81fb      	strh	r3, [r7, #14]
            break;
 8000992:	e005      	b.n	80009a0 <getLowestRequest+0x40>
    for (uint16_t i = base; i <= MAX_LEVELS; ++i){
 8000994:	89bb      	ldrh	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	81bb      	strh	r3, [r7, #12]
 800099a:	89bb      	ldrh	r3, [r7, #12]
 800099c:	2b09      	cmp	r3, #9
 800099e:	d9eb      	bls.n	8000978 <getLowestRequest+0x18>
        }
    }

    QF_CRIT_EXIT(); // unlock the interrupts
 80009a0:	f7ff fe3a 	bl	8000618 <QF_crit_exit_>
    return ret;
 80009a4:	89fb      	ldrh	r3, [r7, #14]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000280 	.word	0x20000280

080009b4 <getHighestRequest>:

//.........................................................................

uint16_t getHighestRequest(uint16_t base){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
    QF_CRIT_STAT;
    QF_CRIT_ENTRY(); // lock the interrupts
 80009be:	f7ff fe19 	bl	80005f4 <QF_crit_entry_>
    uint16_t ret = MAX_LEVELS;
 80009c2:	2309      	movs	r3, #9
 80009c4:	81bb      	strh	r3, [r7, #12]
    for (uint16_t i = base; i >= 0U; --i){
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	81fb      	strh	r3, [r7, #14]
        if (requests & (1U<<i)){
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <getHighestRequest+0x48>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	461a      	mov	r2, r3
 80009d2:	89fb      	ldrh	r3, [r7, #14]
 80009d4:	fa22 f303 	lsr.w	r3, r2, r3
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <getHighestRequest+0x32>
            ret = i;
 80009e0:	89fb      	ldrh	r3, [r7, #14]
 80009e2:	81bb      	strh	r3, [r7, #12]
            break;
 80009e4:	e003      	b.n	80009ee <getHighestRequest+0x3a>
    for (uint16_t i = base; i >= 0U; --i){
 80009e6:	89fb      	ldrh	r3, [r7, #14]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	81fb      	strh	r3, [r7, #14]
        if (requests & (1U<<i)){
 80009ec:	e7ed      	b.n	80009ca <getHighestRequest+0x16>
        }
    }

    QF_CRIT_EXIT(); // unlock the interrupts
 80009ee:	f7ff fe13 	bl	8000618 <QF_crit_exit_>
    return ret;
 80009f2:	89bb      	ldrh	r3, [r7, #12]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000280 	.word	0x20000280

08000a00 <EXTI0_IRQHandler>:


//..........................................................................

void EXTI0_IRQHandler(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BTN_B1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f002 fd33 	bl	8003470 <HAL_GPIO_EXTI_IRQHandler>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_GPIO_EXTI_Callback>:

// 5. Callback for button press
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BTN_B1) {
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d107      	bne.n	8000a30 <HAL_GPIO_EXTI_Callback+0x20>
        static QEvt display = QEVT_INITIALIZER(PRINT_SIG);
        QACTIVE_POST(AOElevator,&display, (void)0U);
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_GPIO_EXTI_Callback+0x28>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	2300      	movs	r3, #0
 8000a26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a2a:	4904      	ldr	r1, [pc, #16]	@ (8000a3c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a2c:	f001 f9d2 	bl	8001dd4 <QActive_post_>
    }
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000004 	.word	0x20000004
 8000a3c:	20000000 	.word	0x20000000

08000a40 <SysTick_Handler>:



// ISRs used in the application ==========================================
void SysTick_Handler(void); // prototype
void SysTick_Handler(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000a46:	f002 fa2b 	bl	8002ea0 <HAL_IncTick>

    QTIMEEVT_TICK_X(0U, &l_SysTick_Handler); // time events at rate 0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f001 fefb 	bl	8002848 <QTimeEvt_tick_>
        uint32_t pre_previous;
    } buttons = { 0U, 0U ,0U};



    uint32_t current = GPIOA->IDR; // active-low logic
 8000a52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <SysTick_Handler+0x80>)
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	607b      	str	r3, [r7, #4]
    uint32_t tmp = buttons.depressed;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	603b      	str	r3, [r7, #0]

    buttons.depressed |= (buttons.pre_previous & buttons.previous & current);
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a64:	6899      	ldr	r1, [r3, #8]
 8000a66:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	4019      	ands	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
 8000a70:	4313      	orrs	r3, r2
 8000a72:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a74:	6013      	str	r3, [r2, #0]
    buttons.depressed &= (buttons.pre_previous | buttons.previous | current);
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a7c:	6899      	ldr	r1, [r3, #8]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	4319      	orrs	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	430b      	orrs	r3, r1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a8c:	6013      	str	r3, [r2, #0]

    buttons.pre_previous = buttons.previous;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a94:	6093      	str	r3, [r2, #8]
    buttons.previous = current;
 8000a96:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6053      	str	r3, [r2, #4]

    tmp ^= buttons.depressed;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	4053      	eors	r3, r2
 8000aa4:	603b      	str	r3, [r7, #0]
    current = buttons.depressed;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <SysTick_Handler+0x84>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	607b      	str	r3, [r7, #4]

    if ((tmp & (1U << BTN_B1)) != 0U) {
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	2b00      	cmp	r3, #0
        if ((current & (1U << BTN_B1)) != 0U) {
        	static QEvt display = QEVT_INITIALIZER(PRINT_SIG);
//        	QACTIVE_POST(AOElevator,&display, (void)0U);
}
    }
    QV_ARM_ERRATUM_838869();
 8000ab4:	f3bf 8f4f 	dsb	sy
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	20000170 	.word	0x20000170

08000ac8 <BSP_init>:
//============================================================================
// BSP functions...
//............................................................................

//............................................................................
void BSP_init(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	@ 0x30
 8000acc:	af00      	add	r7, sp, #0
    Q_ASSERT(MAX_LEVELS <= 16U);
 8000ace:	f7ff fd91 	bl	80005f4 <QF_crit_entry_>
 8000ad2:	f7ff fda1 	bl	8000618 <QF_crit_exit_>

    // Configure the MPU to prevent NULL-pointer dereferencing ...
    MPU->RBAR = 0x0U                          // base address (NULL)
 8000ad6:	4b31      	ldr	r3, [pc, #196]	@ (8000b9c <BSP_init+0xd4>)
 8000ad8:	2217      	movs	r2, #23
 8000ada:	60da      	str	r2, [r3, #12]
                | MPU_RBAR_VALID_Msk          // valid region
                | (MPU_RBAR_REGION_Msk & 7U); // region #7
    MPU->RASR = (7U << MPU_RASR_SIZE_Pos)     // 2^(7+1) region
 8000adc:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <BSP_init+0xd4>)
 8000ade:	220f      	movs	r2, #15
 8000ae0:	611a      	str	r2, [r3, #16]
                | (0x0U << MPU_RASR_AP_Pos)   // no-access region
                | MPU_RASR_ENABLE_Msk;        // region enable
    MPU->CTRL = MPU_CTRL_PRIVDEFENA_Msk       // enable background region
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <BSP_init+0xd4>)
 8000ae4:	2205      	movs	r2, #5
 8000ae6:	605a      	str	r2, [r3, #4]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000ae8:	f3bf 8f6f 	isb	sy
}
 8000aec:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000aee:	f3bf 8f4f 	dsb	sy
}
 8000af2:	bf00      	nop
    __ISB();
    __DSB();

    // NOTE: SystemInit() has been already called from the startup code
    // but SystemCoreClock needs to be updated
    HAL_Init();
 8000af4:	f002 f982 	bl	8002dfc <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config(); 
 8000af8:	f000 f858 	bl	8000bac <SystemClock_Config>
    //configure the system clock update
    // SystemCoreClockUpdate();

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000afc:	f000 f8c0 	bl	8000c80 <MX_GPIO_Init>
    MX_USB_DEVICE_Init();
 8000b00:	f007 feaa 	bl	8008858 <MX_USB_DEVICE_Init>

    // Initialize thr port for the LEDs
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <BSP_init+0xd8>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	4a24      	ldr	r2, [pc, #144]	@ (8000ba0 <BSP_init+0xd8>)
 8000b0e:	f043 0308 	orr.w	r3, r3, #8
 8000b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b14:	4b22      	ldr	r3, [pc, #136]	@ (8000ba0 <BSP_init+0xd8>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = ORANGE_PIN | GREEN_PIN | RED_PIN | BLUE_PIN;
 8000b30:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4816      	ldr	r0, [pc, #88]	@ (8000ba4 <BSP_init+0xdc>)
 8000b4a:	f002 fadb 	bl	8003104 <HAL_GPIO_Init>

    //...................................................................
    //Initiallize user button for current state and welcom message sending

    //Enable clock for GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <BSP_init+0xd8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <BSP_init+0xd8>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <BSP_init+0xd8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct = (GPIO_InitTypeDef){0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
    	// Configure PA0 as input with interrupt on rising edge
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;  // or IT_RISING if using EXTI
 8000b7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;      // Button is active-low on STM32F4-Disc1
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <BSP_init+0xe0>)
 8000b90:	f002 fab8 	bl	8003104 <HAL_GPIO_Init>
    QS_ONLY(produce_sig_dict());

    // setup the QS filters...
    QS_GLB_FILTER(QS_ALL_RECORDS);   // all records
    QS_GLB_FILTER(-QS_QF_TICK);      // exclude the clock tick
}
 8000b94:	bf00      	nop
 8000b96:	3730      	adds	r7, #48	@ 0x30
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	e000ed90 	.word	0xe000ed90
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40020000 	.word	0x40020000

08000bac <SystemClock_Config>:
    /**
     * @brief System Clock Configuration
     * @retval None
     */
    void SystemClock_Config(void)
    {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	@ 0x50
 8000bb0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2230      	movs	r2, #48	@ 0x30
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f008 fc0a 	bl	80093d4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
    
    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	4b28      	ldr	r3, [pc, #160]	@ (8000c78 <SystemClock_Config+0xcc>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	4a27      	ldr	r2, [pc, #156]	@ (8000c78 <SystemClock_Config+0xcc>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be0:	4b25      	ldr	r3, [pc, #148]	@ (8000c78 <SystemClock_Config+0xcc>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <SystemClock_Config+0xd0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a21      	ldr	r2, [pc, #132]	@ (8000c7c <SystemClock_Config+0xd0>)
 8000bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <SystemClock_Config+0xd0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
    
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000c20:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c24:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fe86 	bl	8004944 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x96>
    {
        Error_Handler();
 8000c3e:	f000 f897 	bl	8000d70 <Error_Handler>
    }
    
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	230f      	movs	r3, #15
 8000c44:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c46:	2302      	movs	r3, #2
 8000c48:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c4e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c52:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c58:	61fb      	str	r3, [r7, #28]
    
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	2105      	movs	r1, #5
 8000c60:	4618      	mov	r0, r3
 8000c62:	f004 f8e7 	bl	8004e34 <HAL_RCC_ClockConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0xc4>
    {
        Error_Handler();
 8000c6c:	f000 f880 	bl	8000d70 <Error_Handler>
    }
    }
 8000c70:	bf00      	nop
 8000c72:	3750      	adds	r7, #80	@ 0x50
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40007000 	.word	0x40007000

08000c80 <MX_GPIO_Init>:
     * @brief GPIO Initialization Function
     * @param None
     * @retval None
     */
    void MX_GPIO_Init(void)
    {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    
    /* USER CODE END MX_GPIO_Init_1 */
    
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <MX_GPIO_Init+0x98>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d18 <MX_GPIO_Init+0x98>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <MX_GPIO_Init+0x98>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <MX_GPIO_Init+0x98>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a17      	ldr	r2, [pc, #92]	@ (8000d18 <MX_GPIO_Init+0x98>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <MX_GPIO_Init+0x98>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <MX_GPIO_Init+0x98>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a10      	ldr	r2, [pc, #64]	@ (8000d18 <MX_GPIO_Init+0x98>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <MX_GPIO_Init+0x98>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
    
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2101      	movs	r1, #1
 8000cee:	480b      	ldr	r0, [pc, #44]	@ (8000d1c <MX_GPIO_Init+0x9c>)
 8000cf0:	f002 fba4 	bl	800343c <HAL_GPIO_WritePin>
    
    /*Configure GPIO pin : PC0 */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <MX_GPIO_Init+0x9c>)
 8000d0c:	f002 f9fa 	bl	8003104 <HAL_GPIO_Init>
    
    /* USER CODE BEGIN MX_GPIO_Init_2 */
    
    /* USER CODE END MX_GPIO_Init_2 */
    }
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020800 	.word	0x40020800

08000d20 <BSP_start>:
  

//............................................................................
void BSP_start(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af04      	add	r7, sp, #16
    // initialize event pools
    // HAL_ResumeTick(); // resume the SysTick interrupt
    static QF_MPOOL_EL(requestEvt) smlPoolSto[MAX_LEVELS];
    QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
 8000d26:	220c      	movs	r2, #12
 8000d28:	216c      	movs	r1, #108	@ 0x6c
 8000d2a:	480a      	ldr	r0, [pc, #40]	@ (8000d54 <BSP_start+0x34>)
 8000d2c:	f001 f9be 	bl	80020ac <QF_poolInit>

    // static QF_MPOOL_EL(printDataEvt) mediumlPoolSto[MAX_LEVELS];
    // QF_poolInit(mediumlPoolSto, sizeof(mediumlPoolSto), sizeof(mediumlPoolSto[0]));
        static QEvtPtr elevatorQueueSto[MAX_LEVELS];
    Elevator_Ctor();
 8000d30:	f000 fc72 	bl	8001618 <Elevator_Ctor>
    QActive_start(AOElevator,
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <BSP_start+0x38>)
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2309      	movs	r3, #9
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <BSP_start+0x3c>)
 8000d48:	2104      	movs	r1, #4
 8000d4a:	f001 fed1 	bl	8002af0 <QActive_start>
        4U,                // QP prio. of the Elevator I dont know why we skip the first 2
        elevatorQueueSto,               // event queue storage
        Q_DIM(elevatorQueueSto),        // queue length [events]
        (void *)0, 0U,               // no stack storage
        (void *)0);                  // no initialization param
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2000017c 	.word	0x2000017c
 8000d58:	20000004 	.word	0x20000004
 8000d5c:	200001e8 	.word	0x200001e8

08000d60 <Q_onError>:

// Error handler and ISRs...

Q_NORETURN Q_onError(char const * const module, int_t const id) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(id);
    QS_ASSERTION(module, id, 10000U);

#ifndef NDEBUG
    // for debugging, hang on in an endless loop...
    for (;;) {
 8000d6a:	bf00      	nop
 8000d6c:	e7fd      	b.n	8000d6a <Q_onError+0xa>
	...

08000d70 <Error_Handler>:
void assert_failed(char const * const module, int_t const id) {
    Q_onError(module, id);
}

//.............................................................................
void Error_Handler(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
    // NOTE: this implementation of the error handler is intended only
    // for debugging and MUST be changed for deployment of the application
    // (assuming that you ship your production code with assertions enabled).
    Q_onError("Error_Handler", 10000);
 8000d74:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d78:	4801      	ldr	r0, [pc, #4]	@ (8000d80 <Error_Handler+0x10>)
 8000d7a:	f7ff fff1 	bl	8000d60 <Q_onError>
 8000d7e:	bf00      	nop
 8000d80:	08009ce8 	.word	0x08009ce8

08000d84 <QF_onStartup>:
}
//.............................................................................
// QF callbacks...
void QF_onStartup(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000d88:	b662      	cpsie	i
}
 8000d8a:	bf00      	nop
    // set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate
    __enable_irq(); 
    SystemCoreClockUpdate();
 8000d8c:	f001 ff8c 	bl	8002ca8 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <QF_onStartup+0x5c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a13      	ldr	r2, [pc, #76]	@ (8000de4 <QF_onStartup+0x60>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fccf 	bl	8000740 <SysTick_Config>

    // assign all priority bits for preemption-prio. and none to sub-prio.
    NVIC_SetPriorityGrouping(0U);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fc7e 	bl	80006a4 <__NVIC_SetPriorityGrouping>

    // set priorities of ALL ISRs used in the system, see NOTE1
    // HAL_NVIC_SetPriority(USART2_IRQn, QF_AWARE_ISR_CMSIS_PRI+1U , 0); 

    HAL_NVIC_SetPriority(OTG_FS_IRQn, QF_AWARE_ISR_CMSIS_PRI + 1U, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2104      	movs	r1, #4
 8000dac:	2043      	movs	r0, #67	@ 0x43
 8000dae:	f002 f972 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000db2:	2043      	movs	r0, #67	@ 0x43
 8000db4:	f002 f98b 	bl	80030ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(SysTick_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 2U, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2105      	movs	r1, #5
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dc0:	f002 f969 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SysTick_IRQn);
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dc8:	f002 f981 	bl	80030ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI0_IRQn, QF_AWARE_ISR_CMSIS_PRI+ 3U, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2106      	movs	r1, #6
 8000dd0:	2006      	movs	r0, #6
 8000dd2:	f002 f960 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dd6:	2006      	movs	r0, #6
 8000dd8:	f002 f979 	bl	80030ce <HAL_NVIC_EnableIRQ>

    // enable IRQs...
#ifdef Q_SPY
    NVIC_EnableIRQ(USART2_IRQn); // USART2 interrupt used for QS-RX
#endif
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000008 	.word	0x20000008
 8000de4:	51eb851f 	.word	0x51eb851f

08000de8 <QV_onIdle>:
//............................................................................
void QF_onCleanup(void) {
}
//............................................................................
void QV_onIdle(void) { // CATION: called with interrupts DISABLED, see NOTE0
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    // instead of your broken code. When done disconnect BOOT0, and start over.
    //
    QV_CPU_SLEEP(); // atomically go to sleep and enable interrupts
    QF_INT_ENABLE(); // for now, just enable interrupts
#else
    QF_INT_ENABLE(); // just enable interrupts
 8000dec:	f7ff fbf0 	bl	80005d0 <QF_int_enable_>
#endif
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <Elevator_initial>:
//$define${AOs::Elevator} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Elevator} ...........................................................

//${AOs::Elevator::SM} .......................................................
QState Elevator_initial(Elevator * const me, void const * const par) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
    //${AOs::Elevator::SM::initial}
    (void) par;

     const char* msg =
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <Elevator_initial+0x68>)
 8000e00:	60fb      	str	r3, [r7, #12]
         "\t\t\tThe Elevator Operation System.\n"
         "\tPress any of the digits (0-9) to send a request to the Operation System.\n"
         "\tPress \"I\" to interrupt at a closing operation.\n"
         "\tPress \"C\" to clear all requests.\n";

     while (CDC_Transmit_FS((uint8_t*)msg, strlen(msg)) != USBD_OK) {
 8000e02:	e002      	b.n	8000e0a <Elevator_initial+0x16>
         HAL_Delay(4);
 8000e04:	2004      	movs	r0, #4
 8000e06:	f000 fc98 	bl	800173a <HAL_Delay>
     while (CDC_Transmit_FS((uint8_t*)msg, strlen(msg)) != USBD_OK) {
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	f7ff f9e0 	bl	80001d0 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f007 fe4a 	bl	8008ab0 <CDC_Transmit_FS>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f0      	bne.n	8000e04 <Elevator_initial+0x10>
     }
    //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    strcpy(me->doorState, "Closed");
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3363      	adds	r3, #99	@ 0x63
 8000e26:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <Elevator_initial+0x6c>)
 8000e28:	6810      	ldr	r0, [r2, #0]
 8000e2a:	6018      	str	r0, [r3, #0]
 8000e2c:	8891      	ldrh	r1, [r2, #4]
 8000e2e:	7992      	ldrb	r2, [r2, #6]
 8000e30:	8099      	strh	r1, [r3, #4]
 8000e32:	719a      	strb	r2, [r3, #6]
    strcpy(me->dir, "STATIC");
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3358      	adds	r3, #88	@ 0x58
 8000e38:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <Elevator_initial+0x70>)
 8000e3a:	6810      	ldr	r0, [r2, #0]
 8000e3c:	6018      	str	r0, [r3, #0]
 8000e3e:	8891      	ldrh	r1, [r2, #4]
 8000e40:	7992      	ldrb	r2, [r2, #6]
 8000e42:	8099      	strh	r1, [r3, #4]
 8000e44:	719a      	strb	r2, [r3, #6]

    //'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    // state history attributes
    me->hist_motion = Q_STATE_CAST(&Elevator_upWards);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <Elevator_initial+0x74>)
 8000e4a:	671a      	str	r2, [r3, #112]	@ 0x70
    return Q_TRAN(&Elevator_operational);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <Elevator_initial+0x78>)
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	2307      	movs	r3, #7
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	08009cf8 	.word	0x08009cf8
 8000e60:	08009db8 	.word	0x08009db8
 8000e64:	08009dc0 	.word	0x08009dc0
 8000e68:	08001291 	.word	0x08001291
 8000e6c:	08000e71 	.word	0x08000e71

08000e70 <Elevator_operational>:

//${AOs::Elevator::SM::operational} ..........................................
QState Elevator_operational(Elevator * const me, QEvt const * const e) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0aa      	sub	sp, #168	@ 0xa8
 8000e74:	af06      	add	r7, sp, #24
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d002      	beq.n	8000e88 <Elevator_operational+0x18>
 8000e82:	2b0b      	cmp	r3, #11
 8000e84:	d007      	beq.n	8000e96 <Elevator_operational+0x26>
 8000e86:	e046      	b.n	8000f16 <Elevator_operational+0xa6>
        //${AOs::Elevator::SM::operational::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Elevator_Stationary);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a29      	ldr	r2, [pc, #164]	@ (8000f30 <Elevator_operational+0xc0>)
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	2307      	movs	r3, #7
 8000e90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            break;
 8000e94:	e046      	b.n	8000f24 <Elevator_operational+0xb4>
        }
        //${AOs::Elevator::SM::operational::PRINT}
        case PRINT_SIG: {
                 const char* msg =
 8000e96:	4b27      	ldr	r3, [pc, #156]	@ (8000f34 <Elevator_operational+0xc4>)
 8000e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                     "\n\n\n\t\t\tThe Elevator Operation System.\n"
                     "\tPress any of the digits (0-9) to send an Enter or Exit request to the Operation System.\n"
                     "\tPress \"I\" to interrupt at a closing operation.\n"
                     "\tPress \"C\" to clear all requests.\n";

                 while (CDC_Transmit_FS((uint8_t*)msg, strlen(msg)) != USBD_OK) {
 8000e9c:	e002      	b.n	8000ea4 <Elevator_operational+0x34>
                     HAL_Delay(4);
 8000e9e:	2004      	movs	r0, #4
 8000ea0:	f000 fc4b 	bl	800173a <HAL_Delay>
                 while (CDC_Transmit_FS((uint8_t*)msg, strlen(msg)) != USBD_OK) {
 8000ea4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000ea8:	f7ff f992 	bl	80001d0 <strlen>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000eb6:	f007 fdfb 	bl	8008ab0 <CDC_Transmit_FS>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1ee      	bne.n	8000e9e <Elevator_operational+0x2e>
                 }


                 char buffer[128];
                 snprintf(buffer, sizeof(buffer), "%-4s %-15s %-15s %-15s %-15s %-10s\n",
 8000ec0:	f107 0008 	add.w	r0, r7, #8
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <Elevator_operational+0xc8>)
 8000ec6:	9304      	str	r3, [sp, #16]
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <Elevator_operational+0xcc>)
 8000eca:	9303      	str	r3, [sp, #12]
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <Elevator_operational+0xd0>)
 8000ece:	9302      	str	r3, [sp, #8]
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <Elevator_operational+0xd4>)
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <Elevator_operational+0xd8>)
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <Elevator_operational+0xdc>)
 8000eda:	4a1d      	ldr	r2, [pc, #116]	@ (8000f50 <Elevator_operational+0xe0>)
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	f008 fa43 	bl	8009368 <sniprintf>
                          "ID", "Current-Level", "Next-Level", "Direction", "Door State", "REQUESTS");


                 while (CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer)) != USBD_OK) {
 8000ee2:	e002      	b.n	8000eea <Elevator_operational+0x7a>
                     HAL_Delay(4);
 8000ee4:	2004      	movs	r0, #4
 8000ee6:	f000 fc28 	bl	800173a <HAL_Delay>
                 while (CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer)) != USBD_OK) {
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f96e 	bl	80001d0 <strlen>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f007 fdd6 	bl	8008ab0 <CDC_Transmit_FS>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1ec      	bne.n	8000ee4 <Elevator_operational+0x74>
                 }

                 refreshFeed();
 8000f0a:	f000 fbab 	bl	8001664 <refreshFeed>
            status_ = Q_HANDLED();
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            break;
 8000f14:	e006      	b.n	8000f24 <Elevator_operational+0xb4>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a0e      	ldr	r2, [pc, #56]	@ (8000f54 <Elevator_operational+0xe4>)
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            break;
 8000f22:	bf00      	nop
        }
    }
    return status_;
 8000f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3790      	adds	r7, #144	@ 0x90
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08000f59 	.word	0x08000f59
 8000f34:	08009dc8 	.word	0x08009dc8
 8000f38:	08009ec4 	.word	0x08009ec4
 8000f3c:	08009ed0 	.word	0x08009ed0
 8000f40:	08009edc 	.word	0x08009edc
 8000f44:	08009ee8 	.word	0x08009ee8
 8000f48:	08009ef4 	.word	0x08009ef4
 8000f4c:	08009e9c 	.word	0x08009e9c
 8000f50:	08009ea0 	.word	0x08009ea0
 8000f54:	080019d9 	.word	0x080019d9

08000f58 <Elevator_Stationary>:

//${AOs::Elevator::SM::operational::Stationary} ..............................
QState Elevator_Stationary(Elevator * const me, QEvt const * const e) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d002      	beq.n	8000f70 <Elevator_Stationary+0x18>
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d00a      	beq.n	8000f84 <Elevator_Stationary+0x2c>
 8000f6e:	e00f      	b.n	8000f90 <Elevator_Stationary+0x38>
        //${AOs::Elevator::SM::operational::Stationary}
        case Q_EXIT_SIG: {
            QTimeEvt_disarm(&me->stationaryTEvt);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3328      	adds	r3, #40	@ 0x28
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fc1d 	bl	80027b4 <QTimeEvt_disarm>
            orangeOn();
 8000f7a:	f7ff fc03 	bl	8000784 <orangeOn>

            status_ = Q_HANDLED();
 8000f7e:	2302      	movs	r3, #2
 8000f80:	60fb      	str	r3, [r7, #12]
            break;
 8000f82:	e00b      	b.n	8000f9c <Elevator_Stationary+0x44>
        }
        //${AOs::Elevator::SM::operational::Stationary::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Elevator_closed);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <Elevator_Stationary+0x50>)
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	60fb      	str	r3, [r7, #12]
            break;
 8000f8e:	e005      	b.n	8000f9c <Elevator_Stationary+0x44>
        }
        default: {
            status_ = Q_SUPER(&Elevator_operational);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <Elevator_Stationary+0x54>)
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
            break;
 8000f9a:	bf00      	nop
        }
    }
    return status_;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	080011a5 	.word	0x080011a5
 8000fac:	08000e71 	.word	0x08000e71

08000fb0 <Elevator_Closing>:

//${AOs::Elevator::SM::operational::Stationary::Closing} .....................
QState Elevator_Closing(Elevator * const me, QEvt const * const e) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	2b09      	cmp	r3, #9
 8000fc0:	d038      	beq.n	8001034 <Elevator_Closing+0x84>
 8000fc2:	2b09      	cmp	r3, #9
 8000fc4:	dc53      	bgt.n	800106e <Elevator_Closing+0xbe>
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d002      	beq.n	8000fd0 <Elevator_Closing+0x20>
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	d00a      	beq.n	8000fe4 <Elevator_Closing+0x34>
 8000fce:	e04e      	b.n	800106e <Elevator_Closing+0xbe>
        //${AOs::Elevator::SM::operational::Stationary::Closing}
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->stationaryTEvt, CLOSING_TIME, 0U); /*<== one shot */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3328      	adds	r3, #40	@ 0x28
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	21c8      	movs	r1, #200	@ 0xc8
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fb99 	bl	8002710 <QTimeEvt_armX>

            status_ = Q_HANDLED();
 8000fde:	2302      	movs	r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
            break;
 8000fe2:	e04a      	b.n	800107a <Elevator_Closing+0xca>
        }
        //${AOs::Elevator::SM::operational::Stationary::Closing::sTIMEOUT}
        case sTIMEOUT_SIG: {
            strcpy(me->doorState, "Closed");
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3363      	adds	r3, #99	@ 0x63
 8000fe8:	4a26      	ldr	r2, [pc, #152]	@ (8001084 <Elevator_Closing+0xd4>)
 8000fea:	6810      	ldr	r0, [r2, #0]
 8000fec:	6018      	str	r0, [r3, #0]
 8000fee:	8891      	ldrh	r1, [r2, #4]
 8000ff0:	7992      	ldrb	r2, [r2, #6]
 8000ff2:	8099      	strh	r1, [r3, #4]
 8000ff4:	719a      	strb	r2, [r3, #6]
            refreshFeed();
 8000ff6:	f000 fb35 	bl	8001664 <refreshFeed>
            //${AOs::Elevator::SM::operational::Stationary::Closing::sTIMEOUT::[registry_Empyt()]}
            if (registry_Empyt()) {
 8000ffa:	f7ff fc99 	bl	8000930 <registry_Empyt>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <Elevator_Closing+0x60>
                status_ = Q_TRAN(&Elevator_closed);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a20      	ldr	r2, [pc, #128]	@ (8001088 <Elevator_Closing+0xd8>)
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	2307      	movs	r3, #7
 800100c:	60fb      	str	r3, [r7, #12]
            else {
                strcpy(me->doorState, "Closed");
                refreshFeed();
                status_ = Q_TRAN_HIST(me->hist_motion);
            }
            break;
 800100e:	e034      	b.n	800107a <Elevator_Closing+0xca>
                strcpy(me->doorState, "Closed");
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3363      	adds	r3, #99	@ 0x63
 8001014:	4a1b      	ldr	r2, [pc, #108]	@ (8001084 <Elevator_Closing+0xd4>)
 8001016:	6810      	ldr	r0, [r2, #0]
 8001018:	6018      	str	r0, [r3, #0]
 800101a:	8891      	ldrh	r1, [r2, #4]
 800101c:	7992      	ldrb	r2, [r2, #6]
 800101e:	8099      	strh	r1, [r3, #4]
 8001020:	719a      	strb	r2, [r3, #6]
                refreshFeed();
 8001022:	f000 fb1f 	bl	8001664 <refreshFeed>
                status_ = Q_TRAN_HIST(me->hist_motion);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	2309      	movs	r3, #9
 8001030:	60fb      	str	r3, [r7, #12]
            break;
 8001032:	e022      	b.n	800107a <Elevator_Closing+0xca>
        }
        //${AOs::Elevator::SM::operational::Stationary::Closing::CLOSE_INTERRUPT}
        case CLOSE_INTERRUPT_SIG: {
            QTimeEvt_disarm(&me->stationaryTEvt);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3328      	adds	r3, #40	@ 0x28
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fbbb 	bl	80027b4 <QTimeEvt_disarm>
            register_request(me->current);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fc17 	bl	8000878 <register_request>
            strcpy(me->doorState, "Openning");
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3363      	adds	r3, #99	@ 0x63
 800104e:	490f      	ldr	r1, [pc, #60]	@ (800108c <Elevator_Closing+0xdc>)
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	cb03      	ldmia	r3!, {r0, r1}
 8001056:	6010      	str	r0, [r2, #0]
 8001058:	6051      	str	r1, [r2, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	7213      	strb	r3, [r2, #8]
            refreshFeed();
 800105e:	f000 fb01 	bl	8001664 <refreshFeed>
            status_ = Q_TRAN(&Elevator_Openning);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <Elevator_Closing+0xe0>)
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	2307      	movs	r3, #7
 800106a:	60fb      	str	r3, [r7, #12]
            break;
 800106c:	e005      	b.n	800107a <Elevator_Closing+0xca>
        }
        default: {
            status_ = Q_SUPER(&Elevator_Stationary);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a08      	ldr	r2, [pc, #32]	@ (8001094 <Elevator_Closing+0xe4>)
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
            break;
 8001078:	bf00      	nop
        }
    }
    return status_;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	08009db8 	.word	0x08009db8
 8001088:	080011a5 	.word	0x080011a5
 800108c:	08009f04 	.word	0x08009f04
 8001090:	08001099 	.word	0x08001099
 8001094:	08000f59 	.word	0x08000f59

08001098 <Elevator_Openning>:

//${AOs::Elevator::SM::operational::Stationary::Openning} ....................
QState Elevator_Openning(Elevator * const me, QEvt const * const e) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d002      	beq.n	80010b0 <Elevator_Openning+0x18>
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d00c      	beq.n	80010c8 <Elevator_Openning+0x30>
 80010ae:	e01c      	b.n	80010ea <Elevator_Openning+0x52>
        //${AOs::Elevator::SM::operational::Stationary::Openning}
        case Q_ENTRY_SIG: {
            orangeOff();
 80010b0:	f7ff fb74 	bl	800079c <orangeOff>
            QTimeEvt_armX(&me->stationaryTEvt, OPENNING_TIME, 0U); /*<== one shot */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3328      	adds	r3, #40	@ 0x28
 80010b8:	2200      	movs	r2, #0
 80010ba:	21c8      	movs	r1, #200	@ 0xc8
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fb27 	bl	8002710 <QTimeEvt_armX>

            status_ = Q_HANDLED();
 80010c2:	2302      	movs	r3, #2
 80010c4:	60fb      	str	r3, [r7, #12]
            break;
 80010c6:	e016      	b.n	80010f6 <Elevator_Openning+0x5e>
        }
        //${AOs::Elevator::SM::operational::Stationary::Openning::sTIMEOUT}
        case sTIMEOUT_SIG: {
            strcpy(me->doorState, "Opened");
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3363      	adds	r3, #99	@ 0x63
 80010cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <Elevator_Openning+0x68>)
 80010ce:	6810      	ldr	r0, [r2, #0]
 80010d0:	6018      	str	r0, [r3, #0]
 80010d2:	8891      	ldrh	r1, [r2, #4]
 80010d4:	7992      	ldrb	r2, [r2, #6]
 80010d6:	8099      	strh	r1, [r3, #4]
 80010d8:	719a      	strb	r2, [r3, #6]
            refreshFeed();
 80010da:	f000 fac3 	bl	8001664 <refreshFeed>
            status_ = Q_TRAN(&Elevator_Opened);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <Elevator_Openning+0x6c>)
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	2307      	movs	r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]
            break;
 80010e8:	e005      	b.n	80010f6 <Elevator_Openning+0x5e>
        }
        default: {
            status_ = Q_SUPER(&Elevator_Stationary);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <Elevator_Openning+0x70>)
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
            break;
 80010f4:	bf00      	nop
        }
    }
    return status_;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	08009f10 	.word	0x08009f10
 8001104:	0800110d 	.word	0x0800110d
 8001108:	08000f59 	.word	0x08000f59

0800110c <Elevator_Opened>:

//${AOs::Elevator::SM::operational::Stationary::Opened} ......................
QState Elevator_Opened(Elevator * const me, QEvt const * const e) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	2b05      	cmp	r3, #5
 800111c:	d018      	beq.n	8001150 <Elevator_Opened+0x44>
 800111e:	2b05      	cmp	r3, #5
 8001120:	dc2e      	bgt.n	8001180 <Elevator_Opened+0x74>
 8001122:	2b01      	cmp	r3, #1
 8001124:	d002      	beq.n	800112c <Elevator_Opened+0x20>
 8001126:	2b02      	cmp	r3, #2
 8001128:	d00d      	beq.n	8001146 <Elevator_Opened+0x3a>
 800112a:	e029      	b.n	8001180 <Elevator_Opened+0x74>
        //${AOs::Elevator::SM::operational::Stationary::Opened}
        case Q_ENTRY_SIG: {
            redOn();
 800112c:	f7ff fb5a 	bl	80007e4 <redOn>

            QTimeEvt_armX(&me->stationaryTEvt, OPENED_WAIT_TIME, 0U); /*<== one shot */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3328      	adds	r3, #40	@ 0x28
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800113a:	4618      	mov	r0, r3
 800113c:	f001 fae8 	bl	8002710 <QTimeEvt_armX>
            status_ = Q_HANDLED();
 8001140:	2302      	movs	r3, #2
 8001142:	60fb      	str	r3, [r7, #12]
            break;
 8001144:	e022      	b.n	800118c <Elevator_Opened+0x80>
        }
        //${AOs::Elevator::SM::operational::Stationary::Opened}
        case Q_EXIT_SIG: {
            redOff();
 8001146:	f7ff fb59 	bl	80007fc <redOff>
            status_ = Q_HANDLED();
 800114a:	2302      	movs	r3, #2
 800114c:	60fb      	str	r3, [r7, #12]
            break;
 800114e:	e01d      	b.n	800118c <Elevator_Opened+0x80>
        }
        //${AOs::Elevator::SM::operational::Stationary::Opened::sTIMEOUT}
        case sTIMEOUT_SIG: {
            unregister_request(me->current);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fbba 	bl	80008d0 <unregister_request>
            strcpy(me->doorState, "Clossing");
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3363      	adds	r3, #99	@ 0x63
 8001160:	490d      	ldr	r1, [pc, #52]	@ (8001198 <Elevator_Opened+0x8c>)
 8001162:	461a      	mov	r2, r3
 8001164:	460b      	mov	r3, r1
 8001166:	cb03      	ldmia	r3!, {r0, r1}
 8001168:	6010      	str	r0, [r2, #0]
 800116a:	6051      	str	r1, [r2, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	7213      	strb	r3, [r2, #8]
            refreshFeed();
 8001170:	f000 fa78 	bl	8001664 <refreshFeed>
            status_ = Q_TRAN(&Elevator_Closing);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a09      	ldr	r2, [pc, #36]	@ (800119c <Elevator_Opened+0x90>)
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	2307      	movs	r3, #7
 800117c:	60fb      	str	r3, [r7, #12]
            break;
 800117e:	e005      	b.n	800118c <Elevator_Opened+0x80>
        }
        default: {
            status_ = Q_SUPER(&Elevator_Stationary);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <Elevator_Opened+0x94>)
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
            break;
 800118a:	bf00      	nop
        }
    }
    return status_;
 800118c:	68fb      	ldr	r3, [r7, #12]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	08009f18 	.word	0x08009f18
 800119c:	08000fb1 	.word	0x08000fb1
 80011a0:	08000f59 	.word	0x08000f59

080011a4 <Elevator_closed>:

//${AOs::Elevator::SM::operational::Stationary::closed} ......................
QState Elevator_closed(Elevator * const me, QEvt const * const e) {
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d002      	beq.n	80011bc <Elevator_closed+0x18>
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	d005      	beq.n	80011c6 <Elevator_closed+0x22>
 80011ba:	e02a      	b.n	8001212 <Elevator_closed+0x6e>
        //${AOs::Elevator::SM::operational::Stationary::closed}
        case Q_ENTRY_SIG: {
            orangeOn();
 80011bc:	f7ff fae2 	bl	8000784 <orangeOn>

            status_ = Q_HANDLED();
 80011c0:	2302      	movs	r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
            break;
 80011c4:	e02b      	b.n	800121e <Elevator_closed+0x7a>
        }
        //${AOs::Elevator::SM::operational::Stationary::closed::RESUME}
        case RESUME_SIG: {
            //${AOs::Elevator::SM::operational::Stationary::closed::RESUME::[me->current==getLowestRequest(m~}
            if (me->current == getLowestRequest(me->current)) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011cc:	461c      	mov	r4, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fbc3 	bl	8000960 <getLowestRequest>
 80011da:	4603      	mov	r3, r0
 80011dc:	429c      	cmp	r4, r3
 80011de:	d111      	bne.n	8001204 <Elevator_closed+0x60>
                strcpy(me->doorState, "Openning");
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3363      	adds	r3, #99	@ 0x63
 80011e4:	4910      	ldr	r1, [pc, #64]	@ (8001228 <Elevator_closed+0x84>)
 80011e6:	461a      	mov	r2, r3
 80011e8:	460b      	mov	r3, r1
 80011ea:	cb03      	ldmia	r3!, {r0, r1}
 80011ec:	6010      	str	r0, [r2, #0]
 80011ee:	6051      	str	r1, [r2, #4]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	7213      	strb	r3, [r2, #8]
                refreshFeed();
 80011f4:	f000 fa36 	bl	8001664 <refreshFeed>
                status_ = Q_TRAN(&Elevator_Openning);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a0c      	ldr	r2, [pc, #48]	@ (800122c <Elevator_closed+0x88>)
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	2307      	movs	r3, #7
 8001200:	60fb      	str	r3, [r7, #12]
            }
            //${AOs::Elevator::SM::operational::Stationary::closed::RESUME::[else]}
            else {
                status_ = Q_TRAN_HIST(me->hist_motion);
            }
            break;
 8001202:	e00c      	b.n	800121e <Elevator_closed+0x7a>
                status_ = Q_TRAN_HIST(me->hist_motion);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	2309      	movs	r3, #9
 800120e:	60fb      	str	r3, [r7, #12]
            break;
 8001210:	e005      	b.n	800121e <Elevator_closed+0x7a>
        }
        default: {
            status_ = Q_SUPER(&Elevator_Stationary);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <Elevator_closed+0x8c>)
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
            break;
 800121c:	bf00      	nop
        }
    }
    return status_;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	08009f04 	.word	0x08009f04
 800122c:	08001099 	.word	0x08001099
 8001230:	08000f59 	.word	0x08000f59

08001234 <Elevator_motion>:

//${AOs::Elevator::SM::operational::motion} ..................................
QState Elevator_motion(Elevator * const me, QEvt const * const e) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d002      	beq.n	800124c <Elevator_motion+0x18>
 8001246:	2b03      	cmp	r3, #3
 8001248:	d00a      	beq.n	8001260 <Elevator_motion+0x2c>
 800124a:	e00f      	b.n	800126c <Elevator_motion+0x38>
        //${AOs::Elevator::SM::operational::motion}
        case Q_EXIT_SIG: {
            // save shallow history
            me->hist_motion =
                QHsm_childState(Q_HSM_UPCAST(me),
 800124c:	490d      	ldr	r1, [pc, #52]	@ (8001284 <Elevator_motion+0x50>)
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 fbce 	bl	80019f0 <QHsm_childState>
 8001254:	4602      	mov	r2, r0
            me->hist_motion =
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	671a      	str	r2, [r3, #112]	@ 0x70
                                Q_STATE_CAST(&Elevator_motion));
            status_ = Q_HANDLED();
 800125a:	2302      	movs	r3, #2
 800125c:	60fb      	str	r3, [r7, #12]
            break;
 800125e:	e00b      	b.n	8001278 <Elevator_motion+0x44>
        }
        //${AOs::Elevator::SM::operational::motion::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Elevator_upWards);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a09      	ldr	r2, [pc, #36]	@ (8001288 <Elevator_motion+0x54>)
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	2307      	movs	r3, #7
 8001268:	60fb      	str	r3, [r7, #12]
            break;
 800126a:	e005      	b.n	8001278 <Elevator_motion+0x44>
        }
        default: {
            status_ = Q_SUPER(&Elevator_operational);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a07      	ldr	r2, [pc, #28]	@ (800128c <Elevator_motion+0x58>)
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
            break;
 8001276:	bf00      	nop
        }
    }
    return status_;
 8001278:	68fb      	ldr	r3, [r7, #12]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	08001235 	.word	0x08001235
 8001288:	08001291 	.word	0x08001291
 800128c:	08000e71 	.word	0x08000e71

08001290 <Elevator_upWards>:

//${AOs::Elevator::SM::operational::motion::upWards} .........................
QState Elevator_upWards(Elevator * const me, QEvt const * const e) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	3b01      	subs	r3, #1
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	f200 80ba 	bhi.w	800141a <Elevator_upWards+0x18a>
 80012a6:	a201      	add	r2, pc, #4	@ (adr r2, 80012ac <Elevator_upWards+0x1c>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	080012d5 	.word	0x080012d5
 80012b0:	08001339 	.word	0x08001339
 80012b4:	0800141b 	.word	0x0800141b
 80012b8:	0800134d 	.word	0x0800134d
 80012bc:	0800141b 	.word	0x0800141b
 80012c0:	0800141b 	.word	0x0800141b
 80012c4:	0800141b 	.word	0x0800141b
 80012c8:	0800140f 	.word	0x0800140f
 80012cc:	0800141b 	.word	0x0800141b
 80012d0:	080013b1 	.word	0x080013b1
        //${AOs::Elevator::SM::operational::motion::upWards}
        case Q_ENTRY_SIG: {
            greenOn();
 80012d4:	f7ff fa6e 	bl	80007b4 <greenOn>
            strcpy(me->dir, "upWards");
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3358      	adds	r3, #88	@ 0x58
 80012dc:	4954      	ldr	r1, [pc, #336]	@ (8001430 <Elevator_upWards+0x1a0>)
 80012de:	461a      	mov	r2, r3
 80012e0:	460b      	mov	r3, r1
 80012e2:	cb03      	ldmia	r3!, {r0, r1}
 80012e4:	6010      	str	r0, [r2, #0]
 80012e6:	6051      	str	r1, [r2, #4]


            me->next = getLowestRequest(me->current);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fb36 	bl	8000960 <getLowestRequest>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            //........................................................

            if(me->next < me->current ){
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800130a:	429a      	cmp	r2, r3
 800130c:	d206      	bcs.n	800131c <Elevator_upWards+0x8c>
                static const QEvt sitchEvt = QEVT_INITIALIZER(SWITCH_SIG);
                QACTIVE_POST_LIFO(AOElevator, &sitchEvt);
 800130e:	4b49      	ldr	r3, [pc, #292]	@ (8001434 <Elevator_upWards+0x1a4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4949      	ldr	r1, [pc, #292]	@ (8001438 <Elevator_upWards+0x1a8>)
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fdaf 	bl	8001e78 <QActive_postLIFO_>
 800131a:	e00a      	b.n	8001332 <Elevator_upWards+0xa2>
            }else {
                QTimeEvt_armX(&me->motionTEvt, TRANSITION_INTERVAL, TRANSITION_INTERVAL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3340      	adds	r3, #64	@ 0x40
 8001320:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001324:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f9f1 	bl	8002710 <QTimeEvt_armX>
                refreshFeed();
 800132e:	f000 f999 	bl	8001664 <refreshFeed>
            }

            //........................................................

            status_ = Q_HANDLED();
 8001332:	2302      	movs	r3, #2
 8001334:	60fb      	str	r3, [r7, #12]
            break;
 8001336:	e076      	b.n	8001426 <Elevator_upWards+0x196>
        }
        //${AOs::Elevator::SM::operational::motion::upWards}
        case Q_EXIT_SIG: {
            greenOff();
 8001338:	f7ff fa48 	bl	80007cc <greenOff>
            QTimeEvt_disarm(&me->motionTEvt);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3340      	adds	r3, #64	@ 0x40
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fa37 	bl	80027b4 <QTimeEvt_disarm>
            status_ = Q_HANDLED();
 8001346:	2302      	movs	r3, #2
 8001348:	60fb      	str	r3, [r7, #12]
            break;
 800134a:	e06c      	b.n	8001426 <Elevator_upWards+0x196>
        }
        //${AOs::Elevator::SM::operational::motion::upWards::mTIMEOUT}
        case mTIMEOUT_SIG: {
            me->current++;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001352:	3301      	adds	r3, #1
 8001354:	b2da      	uxtb	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            //${AOs::Elevator::SM::operational::motion::upWards::mTIMEOUT::[me->current==me->next]}
            if (me->current == me->next) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001368:	429a      	cmp	r2, r3
 800136a:	d11c      	bne.n	80013a6 <Elevator_upWards+0x116>
                strcpy(me->dir, "STATIC");
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3358      	adds	r3, #88	@ 0x58
 8001370:	4a32      	ldr	r2, [pc, #200]	@ (800143c <Elevator_upWards+0x1ac>)
 8001372:	6810      	ldr	r0, [r2, #0]
 8001374:	6018      	str	r0, [r3, #0]
 8001376:	8891      	ldrh	r1, [r2, #4]
 8001378:	7992      	ldrb	r2, [r2, #6]
 800137a:	8099      	strh	r1, [r3, #4]
 800137c:	719a      	strb	r2, [r3, #6]
                refreshFeed();
 800137e:	f000 f971 	bl	8001664 <refreshFeed>
                strcpy(me->doorState, "Openning");
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3363      	adds	r3, #99	@ 0x63
 8001386:	492e      	ldr	r1, [pc, #184]	@ (8001440 <Elevator_upWards+0x1b0>)
 8001388:	461a      	mov	r2, r3
 800138a:	460b      	mov	r3, r1
 800138c:	cb03      	ldmia	r3!, {r0, r1}
 800138e:	6010      	str	r0, [r2, #0]
 8001390:	6051      	str	r1, [r2, #4]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	7213      	strb	r3, [r2, #8]
                refreshFeed();
 8001396:	f000 f965 	bl	8001664 <refreshFeed>

                status_ = Q_TRAN(&Elevator_Openning);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a29      	ldr	r2, [pc, #164]	@ (8001444 <Elevator_upWards+0x1b4>)
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	2307      	movs	r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]
            //${AOs::Elevator::SM::operational::motion::upWards::mTIMEOUT::[else]}
            else {
                refreshFeed();
                status_ = Q_HANDLED();
            }
            break;
 80013a4:	e03f      	b.n	8001426 <Elevator_upWards+0x196>
                refreshFeed();
 80013a6:	f000 f95d 	bl	8001664 <refreshFeed>
                status_ = Q_HANDLED();
 80013aa:	2302      	movs	r3, #2
 80013ac:	60fb      	str	r3, [r7, #12]
            break;
 80013ae:	e03a      	b.n	8001426 <Elevator_upWards+0x196>
        }
        //${AOs::Elevator::SM::operational::motion::upWards::REQUEST}
        case REQUEST_SIG: {
            //${AOs::Elevator::SM::operational::motion::upWards::REQUEST::[closerThanNext]}
            if (me->next > Q_EVT_CAST(requestEvt)->level && Q_EVT_CAST(requestEvt)->level > me->current
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	791b      	ldrb	r3, [r3, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d924      	bls.n	8001408 <Elevator_upWards+0x178>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	791a      	ldrb	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d91d      	bls.n	8001408 <Elevator_upWards+0x178>
)
            {
                uint8_t assetion = already_requested( Q_EVT_CAST(requestEvt)->level);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	791b      	ldrb	r3, [r3, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fa37 	bl	8000844 <already_requested>
 80013d6:	4603      	mov	r3, r0
 80013d8:	72fb      	strb	r3, [r7, #11]
                Q_ASSERT(assetion);
 80013da:	f7ff f90b 	bl	80005f4 <QF_crit_entry_>
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d104      	bne.n	80013ee <Elevator_upWards+0x15e>
 80013e4:	f240 1177 	movw	r1, #375	@ 0x177
 80013e8:	4817      	ldr	r0, [pc, #92]	@ (8001448 <Elevator_upWards+0x1b8>)
 80013ea:	f7ff fcb9 	bl	8000d60 <Q_onError>
 80013ee:	f7ff f913 	bl	8000618 <QF_crit_exit_>
                me->next = Q_EVT_CAST(requestEvt)->level;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	791a      	ldrb	r2, [r3, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                refreshFeed();
 80013fc:	f000 f932 	bl	8001664 <refreshFeed>
                status_ = Q_HANDLED();
 8001400:	2302      	movs	r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
            {
 8001404:	bf00      	nop
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8001406:	e00e      	b.n	8001426 <Elevator_upWards+0x196>
                status_ = Q_UNHANDLED();
 8001408:	2301      	movs	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
            break;
 800140c:	e00b      	b.n	8001426 <Elevator_upWards+0x196>
        }
        //${AOs::Elevator::SM::operational::motion::upWards::SWITCH}
        case SWITCH_SIG: {
            status_ = Q_TRAN(&Elevator_downWards);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a0e      	ldr	r2, [pc, #56]	@ (800144c <Elevator_upWards+0x1bc>)
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	2307      	movs	r3, #7
 8001416:	60fb      	str	r3, [r7, #12]
            break;
 8001418:	e005      	b.n	8001426 <Elevator_upWards+0x196>
        }
        default: {
            status_ = Q_SUPER(&Elevator_motion);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a0c      	ldr	r2, [pc, #48]	@ (8001450 <Elevator_upWards+0x1c0>)
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
            break;
 8001424:	bf00      	nop
        }
    }
    return status_;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	08009f24 	.word	0x08009f24
 8001434:	20000004 	.word	0x20000004
 8001438:	08009ff8 	.word	0x08009ff8
 800143c:	08009dc0 	.word	0x08009dc0
 8001440:	08009f04 	.word	0x08009f04
 8001444:	08001099 	.word	0x08001099
 8001448:	08009fd4 	.word	0x08009fd4
 800144c:	08001455 	.word	0x08001455
 8001450:	08001235 	.word	0x08001235

08001454 <Elevator_downWards>:

//${AOs::Elevator::SM::operational::motion::downWards} .......................
QState Elevator_downWards(Elevator * const me, QEvt const * const e) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	2b09      	cmp	r3, #9
 8001466:	f200 80b9 	bhi.w	80015dc <Elevator_downWards+0x188>
 800146a:	a201      	add	r2, pc, #4	@ (adr r2, 8001470 <Elevator_downWards+0x1c>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	08001499 	.word	0x08001499
 8001474:	08001501 	.word	0x08001501
 8001478:	080015dd 	.word	0x080015dd
 800147c:	0800156d 	.word	0x0800156d
 8001480:	080015dd 	.word	0x080015dd
 8001484:	080015dd 	.word	0x080015dd
 8001488:	080015dd 	.word	0x080015dd
 800148c:	080015d1 	.word	0x080015d1
 8001490:	080015dd 	.word	0x080015dd
 8001494:	08001515 	.word	0x08001515
        //${AOs::Elevator::SM::operational::motion::downWards}
        case Q_ENTRY_SIG: {
            blueOn();
 8001498:	f7ff f9bc 	bl	8000814 <blueOn>
            strcpy(me->dir, "downWards");
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3358      	adds	r3, #88	@ 0x58
 80014a0:	4954      	ldr	r1, [pc, #336]	@ (80015f4 <Elevator_downWards+0x1a0>)
 80014a2:	461a      	mov	r2, r3
 80014a4:	460b      	mov	r3, r1
 80014a6:	cb03      	ldmia	r3!, {r0, r1}
 80014a8:	6010      	str	r0, [r2, #0]
 80014aa:	6051      	str	r1, [r2, #4]
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	8113      	strh	r3, [r2, #8]

            me->next = getHighestRequest(me->current);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fa7c 	bl	80009b4 <getHighestRequest>
 80014bc:	4603      	mov	r3, r0
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            //........................................................

            if(me->next > me->current ){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d906      	bls.n	80014e4 <Elevator_downWards+0x90>
                static const QEvt sitchEvt = QEVT_INITIALIZER(SWITCH_SIG);
                QACTIVE_POST_LIFO(AOElevator, &sitchEvt);
 80014d6:	4b48      	ldr	r3, [pc, #288]	@ (80015f8 <Elevator_downWards+0x1a4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4948      	ldr	r1, [pc, #288]	@ (80015fc <Elevator_downWards+0x1a8>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fccb 	bl	8001e78 <QActive_postLIFO_>
 80014e2:	e00a      	b.n	80014fa <Elevator_downWards+0xa6>
            }else {
                QTimeEvt_armX(&me->motionTEvt, TRANSITION_INTERVAL, TRANSITION_INTERVAL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3340      	adds	r3, #64	@ 0x40
 80014e8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014ec:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 f90d 	bl	8002710 <QTimeEvt_armX>
                refreshFeed();
 80014f6:	f000 f8b5 	bl	8001664 <refreshFeed>
            }
            //........................................................


            status_ = Q_HANDLED();
 80014fa:	2302      	movs	r3, #2
 80014fc:	60fb      	str	r3, [r7, #12]
            break;
 80014fe:	e073      	b.n	80015e8 <Elevator_downWards+0x194>
        }
        //${AOs::Elevator::SM::operational::motion::downWards}
        case Q_EXIT_SIG: {
            blueOff();
 8001500:	f7ff f994 	bl	800082c <blueOff>
            QTimeEvt_disarm(&me->motionTEvt);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3340      	adds	r3, #64	@ 0x40
 8001508:	4618      	mov	r0, r3
 800150a:	f001 f953 	bl	80027b4 <QTimeEvt_disarm>

            status_ = Q_HANDLED();
 800150e:	2302      	movs	r3, #2
 8001510:	60fb      	str	r3, [r7, #12]
            break;
 8001512:	e069      	b.n	80015e8 <Elevator_downWards+0x194>
        }
        //${AOs::Elevator::SM::operational::motion::downWards::REQUEST}
        case REQUEST_SIG: {
            //${AOs::Elevator::SM::operational::motion::downWards::REQUEST::[closerThanNext]}
            if (me->next < Q_EVT_CAST(requestEvt)->level && Q_EVT_CAST(requestEvt)->level < me->current) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	791b      	ldrb	r3, [r3, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d221      	bcs.n	8001566 <Elevator_downWards+0x112>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	791a      	ldrb	r2, [r3, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800152c:	429a      	cmp	r2, r3
 800152e:	d21a      	bcs.n	8001566 <Elevator_downWards+0x112>
                Q_ASSERT(already_requested( Q_EVT_CAST(requestEvt)->level));
 8001530:	f7ff f860 	bl	80005f4 <QF_crit_entry_>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	791b      	ldrb	r3, [r3, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f983 	bl	8000844 <already_requested>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d104      	bne.n	800154e <Elevator_downWards+0xfa>
 8001544:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8001548:	482d      	ldr	r0, [pc, #180]	@ (8001600 <Elevator_downWards+0x1ac>)
 800154a:	f7ff fc09 	bl	8000d60 <Q_onError>
 800154e:	f7ff f863 	bl	8000618 <QF_crit_exit_>
                me->next = Q_EVT_CAST(requestEvt)->level;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	791a      	ldrb	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                refreshFeed();
 800155c:	f000 f882 	bl	8001664 <refreshFeed>
                status_ = Q_HANDLED();
 8001560:	2302      	movs	r3, #2
 8001562:	60fb      	str	r3, [r7, #12]
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
 8001564:	e040      	b.n	80015e8 <Elevator_downWards+0x194>
                status_ = Q_UNHANDLED();
 8001566:	2301      	movs	r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
            break;
 800156a:	e03d      	b.n	80015e8 <Elevator_downWards+0x194>
        }
        //${AOs::Elevator::SM::operational::motion::downWards::mTIMEOUT}
        case mTIMEOUT_SIG: {
            me->current--;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001572:	3b01      	subs	r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            //${AOs::Elevator::SM::operational::motion::downWards::mTIMEOUT::[me->current==me->next]}
            if (me->current == me->next) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001588:	429a      	cmp	r2, r3
 800158a:	d11c      	bne.n	80015c6 <Elevator_downWards+0x172>
                strcpy(me->dir, "STATIC");
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3358      	adds	r3, #88	@ 0x58
 8001590:	4a1c      	ldr	r2, [pc, #112]	@ (8001604 <Elevator_downWards+0x1b0>)
 8001592:	6810      	ldr	r0, [r2, #0]
 8001594:	6018      	str	r0, [r3, #0]
 8001596:	8891      	ldrh	r1, [r2, #4]
 8001598:	7992      	ldrb	r2, [r2, #6]
 800159a:	8099      	strh	r1, [r3, #4]
 800159c:	719a      	strb	r2, [r3, #6]
                refreshFeed();
 800159e:	f000 f861 	bl	8001664 <refreshFeed>
                strcpy(me->doorState, "Openning");
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3363      	adds	r3, #99	@ 0x63
 80015a6:	4918      	ldr	r1, [pc, #96]	@ (8001608 <Elevator_downWards+0x1b4>)
 80015a8:	461a      	mov	r2, r3
 80015aa:	460b      	mov	r3, r1
 80015ac:	cb03      	ldmia	r3!, {r0, r1}
 80015ae:	6010      	str	r0, [r2, #0]
 80015b0:	6051      	str	r1, [r2, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	7213      	strb	r3, [r2, #8]
                refreshFeed();
 80015b6:	f000 f855 	bl	8001664 <refreshFeed>

                status_ = Q_TRAN(&Elevator_Openning);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a13      	ldr	r2, [pc, #76]	@ (800160c <Elevator_downWards+0x1b8>)
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	2307      	movs	r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]
            //${AOs::Elevator::SM::operational::motion::downWards::mTIMEOUT::[else]}
            else {
                refreshFeed();
                status_ = Q_HANDLED();
            }
            break;
 80015c4:	e010      	b.n	80015e8 <Elevator_downWards+0x194>
                refreshFeed();
 80015c6:	f000 f84d 	bl	8001664 <refreshFeed>
                status_ = Q_HANDLED();
 80015ca:	2302      	movs	r3, #2
 80015cc:	60fb      	str	r3, [r7, #12]
            break;
 80015ce:	e00b      	b.n	80015e8 <Elevator_downWards+0x194>
        }
        //${AOs::Elevator::SM::operational::motion::downWards::SWITCH}
        case SWITCH_SIG: {
            status_ = Q_TRAN(&Elevator_upWards);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001610 <Elevator_downWards+0x1bc>)
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	2307      	movs	r3, #7
 80015d8:	60fb      	str	r3, [r7, #12]
            break;
 80015da:	e005      	b.n	80015e8 <Elevator_downWards+0x194>
        }
        default: {
            status_ = Q_SUPER(&Elevator_motion);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a0d      	ldr	r2, [pc, #52]	@ (8001614 <Elevator_downWards+0x1c0>)
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
            break;
 80015e6:	bf00      	nop
        }
    }
    return status_;
 80015e8:	68fb      	ldr	r3, [r7, #12]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08009f2c 	.word	0x08009f2c
 80015f8:	20000004 	.word	0x20000004
 80015fc:	08009ffc 	.word	0x08009ffc
 8001600:	08009fd4 	.word	0x08009fd4
 8001604:	08009dc0 	.word	0x08009dc0
 8001608:	08009f04 	.word	0x08009f04
 800160c:	08001099 	.word	0x08001099
 8001610:	08001291 	.word	0x08001291
 8001614:	08001235 	.word	0x08001235

08001618 <Elevator_Ctor>:
//$enddef${AOs::Elevator_inst} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${AOs::Elevator_Ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Elevator_Ctor} ......................................................
void Elevator_Ctor(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
    Elevator * me = &Elevator_inst;
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <Elevator_Ctor+0x44>)
 8001620:	607b      	str	r3, [r7, #4]
    QActive_ctor(&me->super, Q_STATE_CAST(&Elevator_initial));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	490e      	ldr	r1, [pc, #56]	@ (8001660 <Elevator_Ctor+0x48>)
 8001626:	4618      	mov	r0, r3
 8001628:	f000 ff5a 	bl	80024e0 <QActive_ctor>
    QTimeEvt_ctorX(&me->motionTEvt, &me->super, mTIMEOUT_SIG, 0U);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	2300      	movs	r3, #0
 8001636:	2204      	movs	r2, #4
 8001638:	f001 f832 	bl	80026a0 <QTimeEvt_ctorX>
    QTimeEvt_ctorX(&me->stationaryTEvt, &me->super, sTIMEOUT_SIG, 0U);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	2300      	movs	r3, #0
 8001646:	2205      	movs	r2, #5
 8001648:	f001 f82a 	bl	80026a0 <QTimeEvt_ctorX>
    me->current = 0U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000020c 	.word	0x2000020c
 8001660:	08000df5 	.word	0x08000df5

08001664 <refreshFeed>:

//$define${AOs::Requestor_Ctor}

//$define${AOs::AORequestor}

void refreshFeed(void){
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b0a7      	sub	sp, #156	@ 0x9c
 8001668:	af06      	add	r7, sp, #24

    char buffer[128];
    snprintf(buffer, sizeof(buffer),
             "%-4d %-15d %-15d %-15s %-15s 0x%08X\n",
             Elevator_inst.iD++,
 800166a:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <refreshFeed+0x78>)
 800166c:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	b2d1      	uxtb	r1, r2
 8001674:	4a19      	ldr	r2, [pc, #100]	@ (80016dc <refreshFeed+0x78>)
 8001676:	f882 106e 	strb.w	r1, [r2, #110]	@ 0x6e
    snprintf(buffer, sizeof(buffer),
 800167a:	461c      	mov	r4, r3
             Elevator_inst.current,
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <refreshFeed+0x78>)
 800167e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    snprintf(buffer, sizeof(buffer),
 8001682:	461a      	mov	r2, r3
             Elevator_inst.next,
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <refreshFeed+0x78>)
 8001686:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    snprintf(buffer, sizeof(buffer),
 800168a:	4619      	mov	r1, r3
 800168c:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <refreshFeed+0x7c>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	4638      	mov	r0, r7
 8001694:	9304      	str	r3, [sp, #16]
 8001696:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <refreshFeed+0x80>)
 8001698:	9303      	str	r3, [sp, #12]
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <refreshFeed+0x84>)
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	9101      	str	r1, [sp, #4]
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	4623      	mov	r3, r4
 80016a4:	4a11      	ldr	r2, [pc, #68]	@ (80016ec <refreshFeed+0x88>)
 80016a6:	2180      	movs	r1, #128	@ 0x80
 80016a8:	f007 fe5e 	bl	8009368 <sniprintf>
             Elevator_inst.dir,
             Elevator_inst.doorState,
             requests);

    while (CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer)) != USBD_OK) {
 80016ac:	e002      	b.n	80016b4 <refreshFeed+0x50>
        HAL_Delay(4); // or use busy wait
 80016ae:	2004      	movs	r0, #4
 80016b0:	f000 f843 	bl	800173a <HAL_Delay>
    while (CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer)) != USBD_OK) {
 80016b4:	463b      	mov	r3, r7
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fd8a 	bl	80001d0 <strlen>
 80016bc:	4603      	mov	r3, r0
 80016be:	b29a      	uxth	r2, r3
 80016c0:	463b      	mov	r3, r7
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f007 f9f3 	bl	8008ab0 <CDC_Transmit_FS>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1ee      	bne.n	80016ae <refreshFeed+0x4a>
    }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3784      	adds	r7, #132	@ 0x84
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000020c 	.word	0x2000020c
 80016e0:	20000280 	.word	0x20000280
 80016e4:	2000026f 	.word	0x2000026f
 80016e8:	20000264 	.word	0x20000264
 80016ec:	08009f38 	.word	0x08009f38

080016f0 <main>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_cdc_if.h"
#include "string.h"
//............................................................................
int main() {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
     QF_init();       // initialize the framework and the underlying RT kernel
 80016f4:	f001 f99c 	bl	8002a30 <QF_init>
     BSP_init();      // initialize the BSP
 80016f8:	f7ff f9e6 	bl	8000ac8 <BSP_init>
     BSP_start();     // start the AOs/Threads
 80016fc:	f7ff fb10 	bl	8000d20 <BSP_start>
//         HAL_Delay(4);
//     }
//
//     refreshFeed();

     return QF_run(); // run the QF application
 8001700:	f001 f9b0 	bl	8002a64 <QF_run>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}

0800170a <busy_wait_us>:

// int __io_putchar(int ch) {
//     HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
//     return ch;
// }
void busy_wait_us(uint32_t us) {
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
    volatile uint32_t count = (168 * us) / 4;  // adjust per instruction cost
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	22a8      	movs	r2, #168	@ 0xa8
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	60fb      	str	r3, [r7, #12]
    while (count--) {
 800171e:	e000      	b.n	8001722 <busy_wait_us+0x18>
        __NOP();
 8001720:	bf00      	nop
    while (count--) {
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1e5a      	subs	r2, r3, #1
 8001726:	60fa      	str	r2, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f9      	bne.n	8001720 <busy_wait_us+0x16>
    }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_Delay>:

void busy_wait_ms(uint32_t ms) {
    while (ms--) busy_wait_us(1000);
}

void HAL_Delay(uint32_t Delay){
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
    busy_wait_us(Delay);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffe1 	bl	800170a <busy_wait_us>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <QHsm_ctor>:

//............................................................................
//! @protected @memberof QHsm
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    // do not call the QAsm_ctor() here
    me->super.vptr      = &vtable;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <QHsm_ctor+0x28>)
 800175e:	601a      	str	r2, [r3, #0]
    me->super.state.fun = Q_STATE_CAST(&QHsm_top);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a06      	ldr	r2, [pc, #24]	@ (800177c <QHsm_ctor+0x2c>)
 8001764:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	609a      	str	r2, [r3, #8]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	0800a018 	.word	0x0800a018
 800177c:	080019d9 	.word	0x080019d9

08001780 <QHsm_init_>:
//! @private @memberof QHsm
void QHsm_init_(
    QAsm * const me,
    void const * const e,
    uint_fast8_t const qsId)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	@ 0x38
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
    }
#else
    Q_UNUSED_PAR(qsId);
#endif // def Q_SPY

    QStateHandler t = me->state.fun;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	633b      	str	r3, [r7, #48]	@ 0x30

    QF_CRIT_ENTRY();
 8001792:	f7fe ff2f 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(200, (me->vptr != (struct QAsmVtable *)0)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <QHsm_init_+0x2e>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <QHsm_init_+0x2e>
 80017a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <QHsm_init_+0xe0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d003      	beq.n	80017b6 <QHsm_init_+0x36>
 80017ae:	21c8      	movs	r1, #200	@ 0xc8
 80017b0:	482c      	ldr	r0, [pc, #176]	@ (8001864 <QHsm_init_+0xe4>)
 80017b2:	f7ff fad5 	bl	8000d60 <Q_onError>
        && (me->temp.fun != Q_STATE_CAST(0))
        && (t == Q_STATE_CAST(&QHsm_top)));
    QF_CRIT_EXIT();
 80017b6:	f7fe ff2f 	bl	8000618 <QF_crit_exit_>

    // execute the top-most initial tran.
    QState const r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	4798      	blx	r3
 80017c4:	62f8      	str	r0, [r7, #44]	@ 0x2c

    QF_CRIT_ENTRY();
 80017c6:	f7fe ff15 	bl	80005f4 <QF_crit_entry_>
    // the top-most initial tran. must be taken
    Q_ASSERT_INCRIT(210, r == Q_RET_TRAN);
 80017ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017cc:	2b07      	cmp	r3, #7
 80017ce:	d003      	beq.n	80017d8 <QHsm_init_+0x58>
 80017d0:	21d2      	movs	r1, #210	@ 0xd2
 80017d2:	4824      	ldr	r0, [pc, #144]	@ (8001864 <QHsm_init_+0xe4>)
 80017d4:	f7ff fac4 	bl	8000d60 <Q_onError>
    QF_CRIT_EXIT();
 80017d8:	f7fe ff1e 	bl	8000618 <QF_crit_exit_>

    QS_TRAN_SEG_(QS_QEP_STATE_INIT, t, me->temp.fun);

    // drill down into the state hierarchy with initial transitions...
    QStateHandler path[QHSM_MAX_NEST_DEPTH_]; // tran. entry path array
    path[0] = me->temp.fun;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	617b      	str	r3, [r7, #20]
    (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	4920      	ldr	r1, [pc, #128]	@ (8001868 <QHsm_init_+0xe8>)
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	4798      	blx	r3

    int_fast8_t ip = 1; // tran. entry path index (also the loop bound)
 80017ec:	2301      	movs	r3, #1
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; (me->temp.fun != t) && (ip < QHSM_MAX_NEST_DEPTH_); ++ip) {
 80017f0:	e00f      	b.n	8001812 <QHsm_init_+0x92>
        path[ip] = me->temp.fun;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	3338      	adds	r3, #56	@ 0x38
 80017fc:	443b      	add	r3, r7
 80017fe:	f843 2c24 	str.w	r2, [r3, #-36]
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4918      	ldr	r1, [pc, #96]	@ (8001868 <QHsm_init_+0xe8>)
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	4798      	blx	r3
    for (; (me->temp.fun != t) && (ip < QHSM_MAX_NEST_DEPTH_); ++ip) {
 800180c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180e:	3301      	adds	r3, #1
 8001810:	637b      	str	r3, [r7, #52]	@ 0x34
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001818:	429a      	cmp	r2, r3
 800181a:	d002      	beq.n	8001822 <QHsm_init_+0xa2>
 800181c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800181e:	2b05      	cmp	r3, #5
 8001820:	dde7      	ble.n	80017f2 <QHsm_init_+0x72>
    }
    QF_CRIT_ENTRY();
 8001822:	f7fe fee7 	bl	80005f4 <QF_crit_entry_>
    // must NOT be too many state nesting levels or "malformed" HSM
    Q_ASSERT_INCRIT(220, ip <= QHSM_MAX_NEST_DEPTH_);
 8001826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001828:	2b06      	cmp	r3, #6
 800182a:	dd03      	ble.n	8001834 <QHsm_init_+0xb4>
 800182c:	21dc      	movs	r1, #220	@ 0xdc
 800182e:	480d      	ldr	r0, [pc, #52]	@ (8001864 <QHsm_init_+0xe4>)
 8001830:	f7ff fa96 	bl	8000d60 <Q_onError>
    QF_CRIT_EXIT();
 8001834:	f7fe fef0 	bl	8000618 <QF_crit_exit_>

    me->temp.fun = path[0];
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	609a      	str	r2, [r3, #8]
    QHsm_enter_target_(me, &path[0], ip - 1, qsId);
 800183e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	f107 0114 	add.w	r1, r7, #20
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f9fb 	bl	8001c44 <QHsm_enter_target_>
    t = path[0];
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30

    QS_TOP_INIT_(QS_QEP_INIT_TRAN, t);

    me->state.fun = t; // change the current active state
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001856:	605a      	str	r2, [r3, #4]
#ifdef Q_UNSAFE
    Q_UNUSED_PAR(r);
#endif
}
 8001858:	bf00      	nop
 800185a:	3738      	adds	r7, #56	@ 0x38
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	080019d9 	.word	0x080019d9
 8001864:	0800a000 	.word	0x0800a000
 8001868:	0800a008 	.word	0x0800a008

0800186c <QHsm_dispatch_>:
//! @private @memberof QHsm
void QHsm_dispatch_(
    QAsm * const me,
    QEvt const * const e,
    uint_fast8_t const qsId)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	@ 0x38
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    QStateHandler s = me->state.fun;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	637b      	str	r3, [r7, #52]	@ 0x34
    QStateHandler t = s;
 800187e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001880:	633b      	str	r3, [r7, #48]	@ 0x30
    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 8001882:	f7fe feb7 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300,
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <QHsm_dispatch_+0x26>
 800188c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188e:	2b00      	cmp	r3, #0
 8001890:	d104      	bne.n	800189c <QHsm_dispatch_+0x30>
 8001892:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001896:	483a      	ldr	r0, [pc, #232]	@ (8001980 <QHsm_dispatch_+0x114>)
 8001898:	f7ff fa62 	bl	8000d60 <Q_onError>
        (e != (QEvt *)0)
        && (s != Q_STATE_CAST(0)));
    QF_CRIT_EXIT();
 800189c:	f7fe febc 	bl	8000618 <QF_crit_exit_>

    QS_TRAN0_(QS_QEP_DISPATCH, s);

    QState r = Q_RET_SUPER;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // process the event hierarchically...
    me->temp.fun = s;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018a8:	609a      	str	r2, [r3, #8]
    int_fast8_t ip = QHSM_MAX_NEST_DEPTH_;
 80018aa:	2306      	movs	r3, #6
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    // NOTE: ip is the fixed loop upper bound
    for (; ip > 0; --ip) {
 80018ae:	e015      	b.n	80018dc <QHsm_dispatch_+0x70>
        s = me->temp.fun;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	637b      	str	r3, [r7, #52]	@ 0x34
        r = (*s)(me, e); // invoke state handler s
 80018b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	4798      	blx	r3
 80018be:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if (r == Q_RET_UNHANDLED) { // unhandled due to a guard?
 80018c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d104      	bne.n	80018d0 <QHsm_dispatch_+0x64>
            QS_TRAN_ACT_(QS_QEP_UNHANDLED, s);
            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG); // superstate of s
 80018c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018c8:	492e      	ldr	r1, [pc, #184]	@ (8001984 <QHsm_dispatch_+0x118>)
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	4798      	blx	r3
 80018ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
        }
        if (r != Q_RET_SUPER) { // event NOT "bubbled up"
 80018d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <QHsm_dispatch_+0x78>
    for (; ip > 0; --ip) {
 80018d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d8:	3b01      	subs	r3, #1
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018de:	2b00      	cmp	r3, #0
 80018e0:	dce6      	bgt.n	80018b0 <QHsm_dispatch_+0x44>
 80018e2:	e000      	b.n	80018e6 <QHsm_dispatch_+0x7a>
            break;
 80018e4:	bf00      	nop
        }
    }
    QF_CRIT_ENTRY();
 80018e6:	f7fe fe85 	bl	80005f4 <QF_crit_entry_>
    Q_ASSERT_INCRIT(310, ip > 0);
 80018ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dc04      	bgt.n	80018fa <QHsm_dispatch_+0x8e>
 80018f0:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80018f4:	4822      	ldr	r0, [pc, #136]	@ (8001980 <QHsm_dispatch_+0x114>)
 80018f6:	f7ff fa33 	bl	8000d60 <Q_onError>
    QF_CRIT_EXIT();
 80018fa:	f7fe fe8d 	bl	8000618 <QF_crit_exit_>

    if (r >= Q_RET_TRAN) { // tran. (regular or history) taken?
 80018fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001900:	2b06      	cmp	r3, #6
 8001902:	d936      	bls.n	8001972 <QHsm_dispatch_+0x106>
            QS_TRAN_SEG_(QS_QEP_TRAN_HIST, s, me->temp.fun);
        }
#endif // Q_SPY

        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        path[0] = me->temp.fun; // tran. target
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	613b      	str	r3, [r7, #16]
        path[1] = t; // current state
 800190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800190c:	617b      	str	r3, [r7, #20]
        path[2] = s; // tran. source
 800190e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001910:	61bb      	str	r3, [r7, #24]

        // exit current state to tran. source s...
        while (t != s) {
 8001912:	e00d      	b.n	8001930 <QHsm_dispatch_+0xc4>
            // exit from t
            if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8001914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001916:	491c      	ldr	r1, [pc, #112]	@ (8001988 <QHsm_dispatch_+0x11c>)
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	4798      	blx	r3
 800191c:	4603      	mov	r3, r0
 800191e:	2b02      	cmp	r3, #2
 8001920:	d103      	bne.n	800192a <QHsm_dispatch_+0xbe>
                QS_STATE_ACT_(QS_QEP_STATE_EXIT, t);
                // find superstate of t
                (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8001922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001924:	4917      	ldr	r1, [pc, #92]	@ (8001984 <QHsm_dispatch_+0x118>)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	4798      	blx	r3
            }
            t = me->temp.fun;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	633b      	str	r3, [r7, #48]	@ 0x30
        while (t != s) {
 8001930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001934:	429a      	cmp	r2, r3
 8001936:	d1ed      	bne.n	8001914 <QHsm_dispatch_+0xa8>
        }

        // take the tran...
        ip = QHsm_tran_simple_(me, &path[0], qsId);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4619      	mov	r1, r3
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f88d 	bl	8001a60 <QHsm_tran_simple_>
 8001946:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (ip < -1) { // not a simple tran.?
 8001948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800194a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800194e:	da07      	bge.n	8001960 <QHsm_dispatch_+0xf4>
            ip = QHsm_tran_complex_(me, &path[0], qsId);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4619      	mov	r1, r3
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f8d7 	bl	8001b0c <QHsm_tran_complex_>
 800195e:	62b8      	str	r0, [r7, #40]	@ 0x28
        }

        QHsm_enter_target_(me, &path[0], ip, qsId);
 8001960:	f107 0110 	add.w	r1, r7, #16
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f96b 	bl	8001c44 <QHsm_enter_target_>
        t = path[0];
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	633b      	str	r3, [r7, #48]	@ 0x30
    else {
        QS_TRAN0_(QS_QEP_IGNORED, me->state.fun);
    }
#endif // Q_SPY

    me->state.fun = t; // change the current active state
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001976:	605a      	str	r2, [r3, #4]
}
 8001978:	bf00      	nop
 800197a:	3738      	adds	r7, #56	@ 0x38
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	0800a000 	.word	0x0800a000
 8001984:	0800a008 	.word	0x0800a008
 8001988:	0800a010 	.word	0x0800a010

0800198c <QHsm_isIn_>:
//............................................................................
//! @private @memberof QHsm
bool QHsm_isIn_(
    QAsm * const me,
    QStateHandler const state)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    bool inState = false; // assume that this HSM is not in 'state'
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]

    // scan the state hierarchy bottom-up
    QStateHandler s = me->state.fun;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	613b      	str	r3, [r7, #16]
    QState r = Q_RET_SUPER;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
    while (r != Q_RET_IGNORED) {
 80019a4:	e00e      	b.n	80019c4 <QHsm_isIn_+0x38>
        if (s == state) { // do the states match?
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d102      	bne.n	80019b4 <QHsm_isIn_+0x28>
            inState = true;  // 'true' means that match found
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
            break; // break out of the for-loop
 80019b2:	e00a      	b.n	80019ca <QHsm_isIn_+0x3e>
        }
        r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <QHsm_isIn_+0x48>)
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
 80019bc:	60f8      	str	r0, [r7, #12]
        s = me->temp.fun;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	613b      	str	r3, [r7, #16]
    while (r != Q_RET_IGNORED) {
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d1ed      	bne.n	80019a6 <QHsm_isIn_+0x1a>
    }
    return inState; // return the status
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	0800a008 	.word	0x0800a008

080019d8 <QHsm_top>:

//............................................................................
//! @protected @memberof QHsm
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; // the top state ignores all events
 80019e2:	2303      	movs	r3, #3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <QHsm_childState>:

//............................................................................
//! @public @memberof QHsm
QStateHandler QHsm_childState(QHsm * const me,
    QStateHandler const parent)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
#ifndef Q_UNSAFE
    bool isFound = false; // assume the child state NOT found
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
#endif

    QStateHandler child = me->super.state.fun; // start with current state
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	613b      	str	r3, [r7, #16]
    me->super.temp.fun = child; // establish stable state configuration
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	609a      	str	r2, [r3, #8]
    QState r = Q_RET_SUPER;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
    while (r != Q_RET_IGNORED) {
 8001a0e:	e00f      	b.n	8001a30 <QHsm_childState+0x40>
        // have the parent of the current child?
        if (me->super.temp.fun == parent) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d102      	bne.n	8001a20 <QHsm_childState+0x30>
#ifndef Q_UNSAFE
            isFound = true; // indicate that child state was found
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8001a1e:	e00a      	b.n	8001a36 <QHsm_childState+0x46>
        }
        child = me->super.temp.fun;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	613b      	str	r3, [r7, #16]
        r = QHSM_RESERVED_EVT_(child, Q_EMPTY_SIG);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	490b      	ldr	r1, [pc, #44]	@ (8001a58 <QHsm_childState+0x68>)
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	4798      	blx	r3
 8001a2e:	60f8      	str	r0, [r7, #12]
    while (r != Q_RET_IGNORED) {
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d1ec      	bne.n	8001a10 <QHsm_childState+0x20>
    }
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001a36:	f7fe fddd 	bl	80005f4 <QF_crit_entry_>
    Q_ASSERT_INCRIT(590, isFound);
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d104      	bne.n	8001a4a <QHsm_childState+0x5a>
 8001a40:	f240 214e 	movw	r1, #590	@ 0x24e
 8001a44:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <QHsm_childState+0x6c>)
 8001a46:	f7ff f98b 	bl	8000d60 <Q_onError>
    QF_CRIT_EXIT();
 8001a4a:	f7fe fde5 	bl	8000618 <QF_crit_exit_>

    return child;
 8001a4e:	693b      	ldr	r3, [r7, #16]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	0800a008 	.word	0x0800a008
 8001a5c:	0800a000 	.word	0x0800a000

08001a60 <QHsm_tran_simple_>:
//! @private @memberof QHsm
static int_fast8_t QHsm_tran_simple_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    QStateHandler t = path[0];
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	61bb      	str	r3, [r7, #24]
    QStateHandler const s = path[2];
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	617b      	str	r3, [r7, #20]
    int_fast8_t ip = 0; // tran. entry path index
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    QS_CRIT_STAT

    // (a) check source==target (tran. to self)...
    if (s == t) {
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d106      	bne.n	8001a92 <QHsm_tran_simple_+0x32>
        // exit source s
        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	491f      	ldr	r1, [pc, #124]	@ (8001b04 <QHsm_tran_simple_+0xa4>)
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	4798      	blx	r3
            QS_STATE_ACT_(QS_QEP_STATE_EXIT, s);
        }
        ip = 0; // enter the target
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	e032      	b.n	8001af8 <QHsm_tran_simple_+0x98>
    }
    else {
        // find superstate of target
        (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	491c      	ldr	r1, [pc, #112]	@ (8001b08 <QHsm_tran_simple_+0xa8>)
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	4798      	blx	r3

        t = me->temp.fun;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]

        // (b) check source==target->super...
        if (s == t) {
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d102      	bne.n	8001aae <QHsm_tran_simple_+0x4e>
            ip = 0; // enter the target
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	e024      	b.n	8001af8 <QHsm_tran_simple_+0x98>
        }
        else {
            // find superstate of src
            (void)QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	4915      	ldr	r1, [pc, #84]	@ (8001b08 <QHsm_tran_simple_+0xa8>)
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	4798      	blx	r3

            // (c) check source->super==target->super...
            if (me->temp.fun == t) {
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d106      	bne.n	8001ace <QHsm_tran_simple_+0x6e>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	4910      	ldr	r1, [pc, #64]	@ (8001b04 <QHsm_tran_simple_+0xa4>)
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	4798      	blx	r3
                    QS_STATE_ACT_(QS_QEP_STATE_EXIT, s);
                }
                ip = 0; // enter the target
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	e014      	b.n	8001af8 <QHsm_tran_simple_+0x98>
            }
            // (d) check source->super==target...
            else if (me->temp.fun == path[0]) {
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d107      	bne.n	8001aea <QHsm_tran_simple_+0x8a>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	4909      	ldr	r1, [pc, #36]	@ (8001b04 <QHsm_tran_simple_+0xa4>)
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	4798      	blx	r3
                    QS_STATE_ACT_(QS_QEP_STATE_EXIT, s);
                }
                ip = -1; // do not enter the target
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ae6:	61fb      	str	r3, [r7, #28]
 8001ae8:	e006      	b.n	8001af8 <QHsm_tran_simple_+0x98>
            }
            else {
                path[1] = t; // save the superstate of target
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	3304      	adds	r3, #4
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	601a      	str	r2, [r3, #0]
                ip = -2; // cause execution of complex tran.
 8001af2:	f06f 0301 	mvn.w	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
            }
        }
    }
    return ip;
 8001af8:	69fb      	ldr	r3, [r7, #28]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	0800a010 	.word	0x0800a010
 8001b08:	0800a008 	.word	0x0800a008

08001b0c <QHsm_tran_complex_>:
//! @private @memberof QHsm
static int_fast8_t QHsm_tran_complex_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qsId);
#endif

    // (e) check rest of source==target->super->super..
    // and store the entry path along the way
    int_fast8_t iq = 0; // indicate that LCA was found
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    int_fast8_t ip = 1; // enter target and its superstate
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2]; // source state
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	617b      	str	r3, [r7, #20]
    QStateHandler t = me->temp.fun;  // source->super
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61fb      	str	r3, [r7, #28]
    QF_CRIT_STAT

    // find target->super->super...
    // note: ip is the fixed upper loop bound
    QState r = QHSM_RESERVED_EVT_(path[1], Q_EMPTY_SIG);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4941      	ldr	r1, [pc, #260]	@ (8001c38 <QHsm_tran_complex_+0x12c>)
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	4798      	blx	r3
 8001b38:	61b8      	str	r0, [r7, #24]
    while ((r == Q_RET_SUPER) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8001b3a:	e01a      	b.n	8001b72 <QHsm_tran_complex_+0x66>
        ++ip;
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	623b      	str	r3, [r7, #32]
        path[ip] = me->temp.fun; // store the entry path
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	4413      	add	r3, r2
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	6892      	ldr	r2, [r2, #8]
 8001b4e:	601a      	str	r2, [r3, #0]
        if (me->temp.fun == s) { // is it the source?
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d105      	bne.n	8001b66 <QHsm_tran_complex_+0x5a>
            iq = 1; // indicate that the LCA found
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
            --ip;   // do not enter the source
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	623b      	str	r3, [r7, #32]
            break;  // terminate the loop
 8001b64:	e00b      	b.n	8001b7e <QHsm_tran_complex_+0x72>
        }
        r = QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	4933      	ldr	r1, [pc, #204]	@ (8001c38 <QHsm_tran_complex_+0x12c>)
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	4798      	blx	r3
 8001b70:	61b8      	str	r0, [r7, #24]
    while ((r == Q_RET_SUPER) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <QHsm_tran_complex_+0x72>
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	ddde      	ble.n	8001b3c <QHsm_tran_complex_+0x30>
    }
    QF_CRIT_ENTRY();
 8001b7e:	f7fe fd39 	bl	80005f4 <QF_crit_entry_>
    Q_INVARIANT_INCRIT(711, ip < (QHSM_MAX_NEST_DEPTH_ - 1));
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	dd04      	ble.n	8001b92 <QHsm_tran_complex_+0x86>
 8001b88:	f240 21c7 	movw	r1, #711	@ 0x2c7
 8001b8c:	482b      	ldr	r0, [pc, #172]	@ (8001c3c <QHsm_tran_complex_+0x130>)
 8001b8e:	f7ff f8e7 	bl	8000d60 <Q_onError>
    QF_CRIT_EXIT();
 8001b92:	f7fe fd41 	bl	8000618 <QF_crit_exit_>

    // the LCA not found yet?
    if (iq == 0) {
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d148      	bne.n	8001c2e <QHsm_tran_complex_+0x122>

        // exit source s
#ifndef Q_SPY
        (void)QHSM_RESERVED_EVT_(s, Q_EXIT_SIG);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4928      	ldr	r1, [pc, #160]	@ (8001c40 <QHsm_tran_complex_+0x134>)
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	4798      	blx	r3
        }
#endif // def Q_SPY

        // (f) check the rest of
        // source->super == target->super->super...
        iq = ip;
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        r = Q_RET_IGNORED; // indicate that the LCA NOT found
 8001ba8:	2303      	movs	r3, #3
 8001baa:	61bb      	str	r3, [r7, #24]
        // note: iq is the fixed upper loop bound
        do {
            if (t == path[iq]) { // is this the LCA?
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d105      	bne.n	8001bc8 <QHsm_tran_complex_+0xbc>
                r = Q_RET_HANDLED; // indicate the LCA found
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61bb      	str	r3, [r7, #24]
                ip = iq - 1; // do not enter the LCA
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	623b      	str	r3, [r7, #32]
                break; // terminate the loop
 8001bc6:	e005      	b.n	8001bd4 <QHsm_tran_complex_+0xc8>
            }
            --iq; // try lower superstate of target
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
        } while (iq >= 0);
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	daeb      	bge.n	8001bac <QHsm_tran_complex_+0xa0>

        if (r != Q_RET_HANDLED) { // the LCA still not found?
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d029      	beq.n	8001c2e <QHsm_tran_complex_+0x122>
            // (g) check each source->super->...
            // for each target->super...
            r = Q_RET_SUPER; // keep looping
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
            while (r != Q_RET_HANDLED) {
 8001bde:	e023      	b.n	8001c28 <QHsm_tran_complex_+0x11c>
                // exit from t
                if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	4917      	ldr	r1, [pc, #92]	@ (8001c40 <QHsm_tran_complex_+0x134>)
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	4798      	blx	r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d103      	bne.n	8001bf6 <QHsm_tran_complex_+0xea>
                    QS_STATE_ACT_(QS_QEP_STATE_EXIT, t);
                    // find superstate of t
                    (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4911      	ldr	r1, [pc, #68]	@ (8001c38 <QHsm_tran_complex_+0x12c>)
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	4798      	blx	r3
                }
                t = me->temp.fun; // set to super of t
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61fb      	str	r3, [r7, #28]
                iq = ip;
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
                do {
                    if (t == path[iq]) { // is this the LCA?
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	4413      	add	r3, r2
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d105      	bne.n	8001c1c <QHsm_tran_complex_+0x110>
                        ip = iq - 1; // do not enter the LCA
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	3b01      	subs	r3, #1
 8001c14:	623b      	str	r3, [r7, #32]
                        r = Q_RET_HANDLED; // break outer loop
 8001c16:	2302      	movs	r3, #2
 8001c18:	61bb      	str	r3, [r7, #24]
                        break;  // terminate the inner loop
 8001c1a:	e005      	b.n	8001c28 <QHsm_tran_complex_+0x11c>
                    }
                    --iq; // try lower superstate of target
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
                } while (iq >= 0);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	daeb      	bge.n	8001c00 <QHsm_tran_complex_+0xf4>
            while (r != Q_RET_HANDLED) {
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d1d8      	bne.n	8001be0 <QHsm_tran_complex_+0xd4>
            }
        }
    }
    return ip;
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3728      	adds	r7, #40	@ 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	0800a008 	.word	0x0800a008
 8001c3c:	0800a000 	.word	0x0800a000
 8001c40:	0800a010 	.word	0x0800a010

08001c44 <QHsm_enter_target_>:
static void QHsm_enter_target_(
    QAsm * const me,
    QStateHandler * const path,
    int_fast8_t const depth,
    uint_fast8_t const qsId)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
    Q_UNUSED_PAR(qsId);
#endif

    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 8001c52:	f7fe fccf 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(800, depth < QHSM_MAX_NEST_DEPTH_);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	dd04      	ble.n	8001c66 <QHsm_enter_target_+0x22>
 8001c5c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001c60:	4836      	ldr	r0, [pc, #216]	@ (8001d3c <QHsm_enter_target_+0xf8>)
 8001c62:	f7ff f87d 	bl	8000d60 <Q_onError>
    QF_CRIT_EXIT();
 8001c66:	f7fe fcd7 	bl	8000618 <QF_crit_exit_>

    int_fast8_t ip = depth;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	617b      	str	r3, [r7, #20]
    // execute state entry actions in the desired order...
    // NOTE: ip is the fixed upper loop bound
    for (; ip >= 0; --ip) {
 8001c6e:	e00a      	b.n	8001c86 <QHsm_enter_target_+0x42>
        // enter path[ip]
        if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4931      	ldr	r1, [pc, #196]	@ (8001d40 <QHsm_enter_target_+0xfc>)
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	4798      	blx	r3
    for (; ip >= 0; --ip) {
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	daf1      	bge.n	8001c70 <QHsm_enter_target_+0x2c>
            == Q_RET_HANDLED)
        {
            QS_STATE_ACT_(QS_QEP_STATE_ENTRY, path[ip]);
        }
    }
    QStateHandler t = path[0];
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	613b      	str	r3, [r7, #16]
    me->temp.fun = t; // update the next state
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]

    // drill into the target hierarchy...
    while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001c98:	e043      	b.n	8001d22 <QHsm_enter_target_+0xde>

        QS_TRAN_SEG_(QS_QEP_STATE_INIT, t, me->temp.fun);

        ip = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
        path[0] = me->temp.fun;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	601a      	str	r2, [r3, #0]

        // find superstate
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	4926      	ldr	r1, [pc, #152]	@ (8001d44 <QHsm_enter_target_+0x100>)
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	4798      	blx	r3

        // note: ip is the fixed upper loop bound
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8001cb0:	e00e      	b.n	8001cd0 <QHsm_enter_target_+0x8c>
            ++ip;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
            path[ip] = me->temp.fun;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	6892      	ldr	r2, [r2, #8]
 8001cc4:	601a      	str	r2, [r3, #0]
            // find superstate
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	491e      	ldr	r1, [pc, #120]	@ (8001d44 <QHsm_enter_target_+0x100>)
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d002      	beq.n	8001ce0 <QHsm_enter_target_+0x9c>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	dde8      	ble.n	8001cb2 <QHsm_enter_target_+0x6e>
        }
        QF_CRIT_ENTRY();
 8001ce0:	f7fe fc88 	bl	80005f4 <QF_crit_entry_>
        // too many state nesting levels or "malformed" HSM
        Q_INVARIANT_INCRIT(891, ip < QHSM_MAX_NEST_DEPTH_);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	dd04      	ble.n	8001cf4 <QHsm_enter_target_+0xb0>
 8001cea:	f240 317b 	movw	r1, #891	@ 0x37b
 8001cee:	4813      	ldr	r0, [pc, #76]	@ (8001d3c <QHsm_enter_target_+0xf8>)
 8001cf0:	f7ff f836 	bl	8000d60 <Q_onError>
        QF_CRIT_EXIT();
 8001cf4:	f7fe fc90 	bl	8000618 <QF_crit_exit_>

        me->temp.fun = path[0];
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	609a      	str	r2, [r3, #8]

        // retrace the entry path in reverse (correct) order...
        // note: ip is the fixed upper loop bound
        do {
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG) == Q_RET_HANDLED) {
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	4413      	add	r3, r2
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	490d      	ldr	r1, [pc, #52]	@ (8001d40 <QHsm_enter_target_+0xfc>)
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	4798      	blx	r3
                QS_STATE_ACT_(QS_QEP_STATE_ENTRY, path[ip]);
            }
            --ip;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
        } while (ip >= 0);
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	daf1      	bge.n	8001d00 <QHsm_enter_target_+0xbc>

        t = path[0]; // current state becomes the new source
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	613b      	str	r3, [r7, #16]
    while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4908      	ldr	r1, [pc, #32]	@ (8001d48 <QHsm_enter_target_+0x104>)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	4798      	blx	r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b07      	cmp	r3, #7
 8001d2e:	d0b4      	beq.n	8001c9a <QHsm_enter_target_+0x56>
    }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	0800a000 	.word	0x0800a000
 8001d40:	0800a00c 	.word	0x0800a00c
 8001d44:	0800a008 	.word	0x0800a008
 8001d48:	0800a014 	.word	0x0800a014

08001d4c <QF_bzero_>:
//............................................................................
//! @static @private @memberof QF
void QF_bzero_(
    void * const start,
    uint_fast16_t const len)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	e008      	b.n	8001d72 <QF_bzero_+0x26>
        *ptr = 0U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
        ++ptr;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f3      	bne.n	8001d60 <QF_bzero_+0x14>
    }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <QPSet_insert>:
}

//! @public @memberof QPSet
static inline void QPSet_insert(QPSet * const me,
    uint_fast8_t const n)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
#if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	601a      	str	r2, [r3, #0]
    }
    else {
        me->bits[1] = (me->bits[1] | ((QPSetBits)1U << (n - 33U)));
    }
#endif
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <QEvt_refCtr_inc_>:
#define QTE_FLAG_IS_LINKED      (1U << 7U)
#define QTE_FLAG_WAS_DISARMED   (1U << 6U)

//============================================================================
//! @private @memberof QEvt
static inline void QEvt_refCtr_inc_(QEvt const * const me) {
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
    // NOTE: this function must be called inside a critical section
    uint8_t const rc = me->refCtr_ + 1U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	78db      	ldrb	r3, [r3, #3]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	70da      	strb	r2, [r3, #3]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <QActive_post_>:
//! @private @memberof QActive
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
    }
#endif // (Q_UTEST != 0)
#endif // def Q_UTEST

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001de2:	f7fe fc07 	bl	80005f4 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(200, e != (QEvt *)0);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <QActive_post_+0x20>
 8001dec:	21c8      	movs	r1, #200	@ 0xc8
 8001dee:	4821      	ldr	r0, [pc, #132]	@ (8001e74 <QActive_post_+0xa0>)
 8001df0:	f7fe ffb6 	bl	8000d60 <Q_onError>

    QEQueueCtr const nFree = me->eQueue.nFree; // get volatile into temporary
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	7fdb      	ldrb	r3, [r3, #31]
 8001df8:	75bb      	strb	r3, [r7, #22]

    // required margin available?
    bool status = false; // assume that event cannot be posted
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	75fb      	strb	r3, [r7, #23]
    if (margin == QF_NO_MARGIN) {
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d109      	bne.n	8001e1c <QActive_post_+0x48>
        if (nFree > 0U) { // free entries available in the queue?
 8001e08:	7dbb      	ldrb	r3, [r7, #22]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <QActive_post_+0x40>
            status = true; // can post
 8001e0e:	2301      	movs	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
 8001e12:	e00a      	b.n	8001e2a <QActive_post_+0x56>
        }
        else { // no free entries available
            // The queue overflows, but QF_NO_MARGIN indicates that
            // the "event delivery guarantee" is required.
            Q_ERROR_INCRIT(210); // must be able to post the event
 8001e14:	21d2      	movs	r1, #210	@ 0xd2
 8001e16:	4817      	ldr	r0, [pc, #92]	@ (8001e74 <QActive_post_+0xa0>)
 8001e18:	f7fe ffa2 	bl	8000d60 <Q_onError>
        }
    }
    else if (nFree > (QEQueueCtr)margin) { // enough free entries?
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	7dba      	ldrb	r2, [r7, #22]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d901      	bls.n	8001e2a <QActive_post_+0x56>
        status = true; // can post
 8001e26:	2301      	movs	r3, #1
 8001e28:	75fb      	strb	r3, [r7, #23]
    else {
        // empty
    }

#if (QF_MAX_EPOOL > 0U)
    if (e->poolNum_ != 0U) { // is it a mutable event?
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	789b      	ldrb	r3, [r3, #2]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <QActive_post_+0x76>
        Q_ASSERT_INCRIT(205, e->refCtr_ < (2U * QF_MAX_ACTIVE));
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	78db      	ldrb	r3, [r3, #3]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e3a:	d903      	bls.n	8001e44 <QActive_post_+0x70>
 8001e3c:	21cd      	movs	r1, #205	@ 0xcd
 8001e3e:	480d      	ldr	r0, [pc, #52]	@ (8001e74 <QActive_post_+0xa0>)
 8001e40:	f7fe ff8e 	bl	8000d60 <Q_onError>
        QEvt_refCtr_inc_(e); // increment the reference counter
 8001e44:	68b8      	ldr	r0, [r7, #8]
 8001e46:	f7ff ffb3 	bl	8001db0 <QEvt_refCtr_inc_>
    }
#endif // (QF_MAX_EPOOL > 0U)

    if (status) { // can post the event?
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <QActive_post_+0x8c>
        QActive_postFIFO_(me, e, sender);
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f8d3 	bl	8002000 <QActive_postFIFO_>
        QF_CRIT_EXIT();
 8001e5a:	f7fe fbdd 	bl	8000618 <QF_crit_exit_>
 8001e5e:	e004      	b.n	8001e6a <QActive_post_+0x96>
            QS_onTestPost(sender, me, e, status); // QUTEst callback
            QF_CRIT_ENTRY();
        }
#endif // def Q_USTEST

        QF_CRIT_EXIT();
 8001e60:	f7fe fbda 	bl	8000618 <QF_crit_exit_>

#if (QF_MAX_EPOOL > 0U)
        QF_gc(e); // recycle the event to avoid a leak
 8001e64:	68b8      	ldr	r0, [r7, #8]
 8001e66:	f000 f9cf 	bl	8002208 <QF_gc>
#endif // (QF_MAX_EPOOL > 0U)
    }

    return status;
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	0800a024 	.word	0x0800a024

08001e78 <QActive_postLIFO_>:

//............................................................................
//! @private @memberof QActive
void QActive_postLIFO_(QActive * const me,
    QEvt const * const e)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
    }
#endif // (Q_UTEST != 0)
#endif // def Q_UTEST

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001e82:	f7fe fbb7 	bl	80005f4 <QF_crit_entry_>

    // the posted event must be be valid (which includes not NULL)
    Q_REQUIRE_INCRIT(300, e != (QEvt *)0);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d104      	bne.n	8001e96 <QActive_postLIFO_+0x1e>
 8001e8c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e90:	482d      	ldr	r0, [pc, #180]	@ (8001f48 <QActive_postLIFO_+0xd0>)
 8001e92:	f7fe ff65 	bl	8000d60 <Q_onError>

    QEQueueCtr tmp = me->eQueue.nFree; // get volatile into temporary
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7fdb      	ldrb	r3, [r3, #31]
 8001e9a:	73fb      	strb	r3, [r7, #15]

    // The queue must NOT overflow for the LIFO posting policy.
    Q_REQUIRE_INCRIT(310, tmp != 0U);
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d104      	bne.n	8001eac <QActive_postLIFO_+0x34>
 8001ea2:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001ea6:	4828      	ldr	r0, [pc, #160]	@ (8001f48 <QActive_postLIFO_+0xd0>)
 8001ea8:	f7fe ff5a 	bl	8000d60 <Q_onError>

    if (e->poolNum_ != 0U) { // is it a mutable event?
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	789b      	ldrb	r3, [r3, #2]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00c      	beq.n	8001ece <QActive_postLIFO_+0x56>
        Q_ASSERT_INCRIT(305, e->refCtr_ < (2U * QF_MAX_ACTIVE));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	78db      	ldrb	r3, [r3, #3]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ebc:	d904      	bls.n	8001ec8 <QActive_postLIFO_+0x50>
 8001ebe:	f240 1131 	movw	r1, #305	@ 0x131
 8001ec2:	4821      	ldr	r0, [pc, #132]	@ (8001f48 <QActive_postLIFO_+0xd0>)
 8001ec4:	f7fe ff4c 	bl	8000d60 <Q_onError>
        QEvt_refCtr_inc_(e); // increment the reference counter
 8001ec8:	6838      	ldr	r0, [r7, #0]
 8001eca:	f7ff ff71 	bl	8001db0 <QEvt_refCtr_inc_>
    }

    --tmp; // one free entry just used up
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]

    me->eQueue.nFree = tmp; // update the original
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	77da      	strb	r2, [r3, #31]
    if (me->eQueue.nMin > tmp) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d203      	bcs.n	8001eee <QActive_postLIFO_+0x76>
        me->eQueue.nMin = tmp; // update minimum so far
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	f883 2020 	strb.w	r2, [r3, #32]

        QF_CRIT_ENTRY();
    }
#endif // def Q_UTEST

    QEvt const * const frontEvt = me->eQueue.frontEvt;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; // deliver the event directly to the front
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	615a      	str	r2, [r3, #20]

    if (frontEvt != (QEvt *)0) { // was the queue NOT empty?
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <QActive_postLIFO_+0xb8>
        tmp = me->eQueue.tail; // get volatile into temporary;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7f9b      	ldrb	r3, [r3, #30]
 8001f04:	73fb      	strb	r3, [r7, #15]
        ++tmp;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
        if (tmp == me->eQueue.end) { // need to wrap the tail?
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7f1b      	ldrb	r3, [r3, #28]
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d101      	bne.n	8001f1a <QActive_postLIFO_+0xa2>
            tmp = 0U; // wrap around
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
        }
        me->eQueue.tail = tmp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	779a      	strb	r2, [r3, #30]
        me->eQueue.ring[tmp] = frontEvt;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e005      	b.n	8001f3c <QActive_postLIFO_+0xc4>
    }
    else { // queue was empty
        QACTIVE_EQUEUE_SIGNAL_(me); // signal the event queue
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7b1b      	ldrb	r3, [r3, #12]
 8001f34:	4619      	mov	r1, r3
 8001f36:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <QActive_postLIFO_+0xd4>)
 8001f38:	f7ff ff25 	bl	8001d86 <QPSet_insert>
    }

    QF_CRIT_EXIT();
 8001f3c:	f7fe fb6c 	bl	8000618 <QF_crit_exit_>
}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	0800a024 	.word	0x0800a024
 8001f4c:	20000360 	.word	0x20000360

08001f50 <QActive_get_>:

//............................................................................
//! @private @memberof QActive
QEvt const * QActive_get_(QActive * const me) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001f58:	f7fe fb4c 	bl	80005f4 <QF_crit_entry_>
    // wait for event to arrive directly (depends on QP port)
    // NOTE: might use assertion-IDs 400-409
    QACTIVE_EQUEUE_WAIT_(me);

    // always remove event from the front
    QEvt const * const e = me->eQueue.frontEvt;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	613b      	str	r3, [r7, #16]
    QEQueueCtr tmp = me->eQueue.nFree; // get volatile into temporary
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7fdb      	ldrb	r3, [r3, #31]
 8001f66:	75fb      	strb	r3, [r7, #23]

    Q_REQUIRE_INCRIT(410, e != (QEvt *)0); // queue must NOT be empty
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d104      	bne.n	8001f78 <QActive_get_+0x28>
 8001f6e:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8001f72:	4822      	ldr	r0, [pc, #136]	@ (8001ffc <QActive_get_+0xac>)
 8001f74:	f7fe fef4 	bl	8000d60 <Q_onError>

    ++tmp; // one more free event in the queue
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]

    me->eQueue.nFree = tmp; // update the # free
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7dfa      	ldrb	r2, [r7, #23]
 8001f82:	77da      	strb	r2, [r3, #31]

    if (tmp <= me->eQueue.end) { // any events in the ring buffer?
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7f1b      	ldrb	r3, [r3, #28]
 8001f88:	7dfa      	ldrb	r2, [r7, #23]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d821      	bhi.n	8001fd2 <QActive_get_+0x82>
            QS_2U8_PRE(e->poolNum_, e->refCtr_);
            QS_EQC_PRE(tmp);     // # free entries
        QS_END_PRE()

        // remove event from the tail
        tmp = me->eQueue.tail; // get volatile into temporary
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7f9b      	ldrb	r3, [r3, #30]
 8001f92:	75fb      	strb	r3, [r7, #23]
        QEvt const * const frontEvt = me->eQueue.ring[tmp];
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]

        Q_ASSERT_INCRIT(430, frontEvt != (QEvt *)0);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d104      	bne.n	8001fb2 <QActive_get_+0x62>
 8001fa8:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8001fac:	4813      	ldr	r0, [pc, #76]	@ (8001ffc <QActive_get_+0xac>)
 8001fae:	f7fe fed7 	bl	8000d60 <Q_onError>
        me->eQueue.frontEvt = frontEvt; // update the original
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	615a      	str	r2, [r3, #20]

        if (tmp == 0U) { // need to wrap the tail?
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <QActive_get_+0x74>
            tmp = me->eQueue.end;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7f1b      	ldrb	r3, [r3, #28]
 8001fc2:	75fb      	strb	r3, [r7, #23]
        }
        --tmp; // advance the tail (counter-clockwise)
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]

        me->eQueue.tail = tmp; // update the original
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7dfa      	ldrb	r2, [r7, #23]
 8001fce:	779a      	strb	r2, [r3, #30]
 8001fd0:	e00d      	b.n	8001fee <QActive_get_+0x9e>
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; // queue becomes empty
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]

        // all entries in the queue must be free (+1 for fronEvt)
        Q_ASSERT_INCRIT(440, tmp == (me->eQueue.end + 1U));
 8001fd8:	7dfa      	ldrb	r2, [r7, #23]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7f1b      	ldrb	r3, [r3, #28]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d004      	beq.n	8001fee <QActive_get_+0x9e>
 8001fe4:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8001fe8:	4804      	ldr	r0, [pc, #16]	@ (8001ffc <QActive_get_+0xac>)
 8001fea:	f7fe feb9 	bl	8000d60 <Q_onError>
            QS_OBJ_PRE(me);      // this active object
            QS_2U8_PRE(e->poolNum_, e->refCtr_);
        QS_END_PRE()
    }

    QF_CRIT_EXIT();
 8001fee:	f7fe fb13 	bl	8000618 <QF_crit_exit_>

    return e;
 8001ff2:	693b      	ldr	r3, [r7, #16]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	0800a024 	.word	0x0800a024

08002000 <QActive_postFIFO_>:
//............................................................................
//! @private @memberof QActive
static void QActive_postFIFO_(QActive * const me,
    QEvt const * const e,
    void const * const sender)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
    // NOTE: this helper function is called *inside* critical section
#ifndef Q_SPY
    Q_UNUSED_PAR(sender);
#endif

    QEQueueCtr tmp = me->eQueue.nFree; // get volatile into temporary
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	7fdb      	ldrb	r3, [r3, #31]
 8002010:	75fb      	strb	r3, [r7, #23]
    --tmp; // one free entry just used up
 8002012:	7dfb      	ldrb	r3, [r7, #23]
 8002014:	3b01      	subs	r3, #1
 8002016:	75fb      	strb	r3, [r7, #23]

    me->eQueue.nFree = tmp; // update the original
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	7dfa      	ldrb	r2, [r7, #23]
 800201c:	77da      	strb	r2, [r3, #31]
    if (me->eQueue.nMin > tmp) {
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002024:	7dfa      	ldrb	r2, [r7, #23]
 8002026:	429a      	cmp	r2, r3
 8002028:	d203      	bcs.n	8002032 <QActive_postFIFO_+0x32>
        me->eQueue.nMin = tmp; // update minimum so far
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	7dfa      	ldrb	r2, [r7, #23]
 800202e:	f883 2020 	strb.w	r2, [r3, #32]
        QS_onTestPost(sender, me, e, true); // QUTEst callback
        QF_CRIT_ENTRY();
    }
#endif // def Q_UTEST

    if (me->eQueue.frontEvt == (QEvt *)0) { // is the queue empty?
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <QActive_postFIFO_+0x4e>
        me->eQueue.frontEvt = e; // deliver event directly
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	615a      	str	r2, [r3, #20]
        }
        else {
            QACTIVE_EQUEUE_SIGNAL_(me); // signal the Active Object
        }
#else
        QACTIVE_EQUEUE_SIGNAL_(me); // signal the Active Object
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	7b1b      	ldrb	r3, [r3, #12]
 8002044:	4619      	mov	r1, r3
 8002046:	480f      	ldr	r0, [pc, #60]	@ (8002084 <QActive_postFIFO_+0x84>)
 8002048:	f7ff fe9d 	bl	8001d86 <QPSet_insert>
        }
        --tmp; // advance the head (counter-clockwise)

        me->eQueue.head = tmp; // update the original
    }
}
 800204c:	e015      	b.n	800207a <QActive_postFIFO_+0x7a>
        tmp = me->eQueue.head; // get volatile into temporary
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	7f5b      	ldrb	r3, [r3, #29]
 8002052:	75fb      	strb	r3, [r7, #23]
        me->eQueue.ring[tmp] = e; // insert e into buffer
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	601a      	str	r2, [r3, #0]
        if (tmp == 0U) { // need to wrap the head?
 8002062:	7dfb      	ldrb	r3, [r7, #23]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <QActive_postFIFO_+0x6e>
            tmp = me->eQueue.end;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	7f1b      	ldrb	r3, [r3, #28]
 800206c:	75fb      	strb	r3, [r7, #23]
        --tmp; // advance the head (counter-clockwise)
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	3b01      	subs	r3, #1
 8002072:	75fb      	strb	r3, [r7, #23]
        me->eQueue.head = tmp; // update the original
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	7dfa      	ldrb	r2, [r7, #23]
 8002078:	775a      	strb	r2, [r3, #29]
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000360 	.word	0x20000360

08002088 <QEvt_refCtr_dec_>:

//! @private @memberof QEvt
static inline void QEvt_refCtr_dec_(QEvt const * const me) {
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    // NOTE: this function must be called inside a critical section
    uint8_t const rc = me->refCtr_ - 1U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	78db      	ldrb	r3, [r3, #3]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	70da      	strb	r2, [r3, #3]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <QF_poolInit>:
//! @static @public @memberof QF
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
    uint_fast8_t const poolNum = QF_priv_.maxPool_;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <QF_poolInit+0x7c>)
 80020ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020bc:	617b      	str	r3, [r7, #20]

    // see precondition{qf_dyn,200} and precondition{qf_dyn,201}
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80020be:	f7fe fa99 	bl	80005f4 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(100, poolNum < QF_MAX_EPOOL);
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d903      	bls.n	80020d0 <QF_poolInit+0x24>
 80020c8:	2164      	movs	r1, #100	@ 0x64
 80020ca:	4818      	ldr	r0, [pc, #96]	@ (800212c <QF_poolInit+0x80>)
 80020cc:	f7fe fe48 	bl	8000d60 <Q_onError>
    if (poolNum > 0U) {
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d011      	beq.n	80020fa <QF_poolInit+0x4e>
        Q_REQUIRE_INCRIT(110,
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1e5a      	subs	r2, r3, #1
 80020da:	4913      	ldr	r1, [pc, #76]	@ (8002128 <QF_poolInit+0x7c>)
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	330c      	adds	r3, #12
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d803      	bhi.n	80020fa <QF_poolInit+0x4e>
 80020f2:	216e      	movs	r1, #110	@ 0x6e
 80020f4:	480d      	ldr	r0, [pc, #52]	@ (800212c <QF_poolInit+0x80>)
 80020f6:	f7fe fe33 	bl	8000d60 <Q_onError>
            QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum - 1U]) < evtSize);
    }
    QF_priv_.maxPool_ = poolNum + 1U; // one more pool
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <QF_poolInit+0x7c>)
 8002100:	63d3      	str	r3, [r2, #60]	@ 0x3c

    QF_CRIT_EXIT();
 8002102:	f7fe fa89 	bl	8000618 <QF_crit_exit_>

    // perform the port-dependent initialization of the event-pool
    QF_EPOOL_INIT_(QF_priv_.ePool_[poolNum], poolSto, poolSize, evtSize);
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <QF_poolInit+0x7c>)
 8002112:	1898      	adds	r0, r3, r2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	f000 f8c5 	bl	80022a8 <QMPool_init>
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)((uint8_t)'0' + poolNum + 1U);
        QS_obj_dict_pre_(&QF_priv_.ePool_[poolNum], (char const *)obj_name);
    }
#endif // Q_SPY
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000284 	.word	0x20000284
 800212c:	0800a02c 	.word	0x0800a02c

08002130 <QF_newX_>:
//! @static @private @memberof QF
QEvt * QF_newX_(
    uint_fast16_t const evtSize,
    uint_fast16_t const margin,
    enum_t const sig)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
    // find the pool id that fits the requested event size...
    uint8_t poolNum = 0U; // zero-based poolNum initially
 800213c:	2300      	movs	r3, #0
 800213e:	75fb      	strb	r3, [r7, #23]
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 8002140:	e00f      	b.n	8002162 <QF_newX_+0x32>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum])) {
 8002142:	7dfa      	ldrb	r2, [r7, #23]
 8002144:	492e      	ldr	r1, [pc, #184]	@ (8002200 <QF_newX_+0xd0>)
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	330c      	adds	r3, #12
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4293      	cmp	r3, r2
 800215a:	d908      	bls.n	800216e <QF_newX_+0x3e>
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	3301      	adds	r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
 8002162:	7dfa      	ldrb	r2, [r7, #23]
 8002164:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <QF_newX_+0xd0>)
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	429a      	cmp	r2, r3
 800216a:	d3ea      	bcc.n	8002142 <QF_newX_+0x12>
 800216c:	e000      	b.n	8002170 <QF_newX_+0x40>
            break;
 800216e:	bf00      	nop
        }
    }

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002170:	f7fe fa40 	bl	80005f4 <QF_crit_entry_>

    // precondition:
    // - cannot run out of registered pools
    Q_REQUIRE_INCRIT(400, poolNum < QF_priv_.maxPool_);
 8002174:	7dfa      	ldrb	r2, [r7, #23]
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <QF_newX_+0xd0>)
 8002178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217a:	429a      	cmp	r2, r3
 800217c:	d304      	bcc.n	8002188 <QF_newX_+0x58>
 800217e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002182:	4820      	ldr	r0, [pc, #128]	@ (8002204 <QF_newX_+0xd4>)
 8002184:	f7fe fdec 	bl	8000d60 <Q_onError>

    ++poolNum; // convert to 1-based poolNum
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	3301      	adds	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]

    QF_CRIT_EXIT();
 800218e:	f7fe fa43 	bl	8000618 <QF_crit_exit_>
#ifdef Q_SPY
    QF_EPOOL_GET_(QF_priv_.ePool_[poolNum - 1U], e,
                  ((margin != QF_NO_MARGIN) ? margin : 0U),
                  (uint_fast8_t)QS_EP_ID + poolNum);
#else
    QF_EPOOL_GET_(QF_priv_.ePool_[poolNum - 1U], e,
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4a18      	ldr	r2, [pc, #96]	@ (8002200 <QF_newX_+0xd0>)
 80021a0:	1898      	adds	r0, r3, r2
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d001      	beq.n	80021b0 <QF_newX_+0x80>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	e000      	b.n	80021b2 <QF_newX_+0x82>
 80021b0:	2300      	movs	r3, #0
 80021b2:	2200      	movs	r2, #0
 80021b4:	4619      	mov	r1, r3
 80021b6:	f000 f8f3 	bl	80023a0 <QMPool_get>
 80021ba:	6138      	str	r0, [r7, #16]
                  ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
#endif

    if (e != (QEvt *)0) { // was e allocated correctly?
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <QF_newX_+0xa8>
        e->sig      = (QSignal)sig; // set the signal
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	801a      	strh	r2, [r3, #0]
        e->poolNum_ = poolNum;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	7dfa      	ldrb	r2, [r7, #23]
 80021ce:	709a      	strb	r2, [r3, #2]
        e->refCtr_  = 0U;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2200      	movs	r2, #0
 80021d4:	70da      	strb	r2, [r3, #3]
 80021d6:	e00d      	b.n	80021f4 <QF_newX_+0xc4>
        QS_END_PRE()
        QS_CRIT_EXIT();
    }
    else { // event was not allocated

        QF_CRIT_ENTRY();
 80021d8:	f7fe fa0c 	bl	80005f4 <QF_crit_entry_>
        // This assertion means that the event allocation failed,
        // and this failure cannot be tolerated. The most frequent
        // reason is an event leak in the application.
        Q_ASSERT_INCRIT(420, margin != QF_NO_MARGIN);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d104      	bne.n	80021f0 <QF_newX_+0xc0>
 80021e6:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 80021ea:	4806      	ldr	r0, [pc, #24]	@ (8002204 <QF_newX_+0xd4>)
 80021ec:	f7fe fdb8 	bl	8000d60 <Q_onError>
            QS_TIME_PRE();        // timestamp
            QS_EVS_PRE(evtSize);  // the size of the event
            QS_SIG_PRE(sig);      // the signal of the event
        QS_END_PRE()

        QF_CRIT_EXIT();
 80021f0:	f7fe fa12 	bl	8000618 <QF_crit_exit_>
    }

    // the returned event e is guaranteed to be valid (not NULL)
    // if we can't tolerate failed allocation
    return e;
 80021f4:	693b      	ldr	r3, [r7, #16]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000284 	.word	0x20000284
 8002204:	0800a02c 	.word	0x0800a02c

08002208 <QF_gc>:

//............................................................................
//! @static @public @memberof QF
void QF_gc(QEvt const * const e) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002210:	f7fe f9f0 	bl	80005f4 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(500, e != (QEvt *)0);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d104      	bne.n	8002224 <QF_gc+0x1c>
 800221a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800221e:	4820      	ldr	r0, [pc, #128]	@ (80022a0 <QF_gc+0x98>)
 8002220:	f7fe fd9e 	bl	8000d60 <Q_onError>

    uint8_t const poolNum = e->poolNum_;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	789b      	ldrb	r3, [r3, #2]
 8002228:	73fb      	strb	r3, [r7, #15]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d031      	beq.n	8002294 <QF_gc+0x8c>

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	78db      	ldrb	r3, [r3, #3]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d90f      	bls.n	800225a <QF_gc+0x52>
                QS_TIME_PRE();       // timestamp
                QS_SIG_PRE(e->sig);  // the signal of the event
                QS_2U8_PRE(poolNum, e->refCtr_);
            QS_END_PRE()

            Q_ASSERT_INCRIT(505, e->refCtr_ > 0U);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	78db      	ldrb	r3, [r3, #3]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <QF_gc+0x46>
 8002244:	f240 11f9 	movw	r1, #505	@ 0x1f9
 8002248:	4815      	ldr	r0, [pc, #84]	@ (80022a0 <QF_gc+0x98>)
 800224a:	f7fe fd89 	bl	8000d60 <Q_onError>
            QEvt_refCtr_dec_(e); // decrement the ref counter
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff1a 	bl	8002088 <QEvt_refCtr_dec_>

            QF_CRIT_EXIT();
 8002254:	f7fe f9e0 	bl	8000618 <QF_crit_exit_>
        }
    }
    else {
        QF_CRIT_EXIT();
    }
}
 8002258:	e01e      	b.n	8002298 <QF_gc+0x90>
            Q_ASSERT_INCRIT(510, (poolNum <= QF_priv_.maxPool_)
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <QF_gc+0x9c>)
 800225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002260:	429a      	cmp	r2, r3
 8002262:	d802      	bhi.n	800226a <QF_gc+0x62>
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d904      	bls.n	8002274 <QF_gc+0x6c>
 800226a:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 800226e:	480c      	ldr	r0, [pc, #48]	@ (80022a0 <QF_gc+0x98>)
 8002270:	f7fe fd76 	bl	8000d60 <Q_onError>
            QF_CRIT_EXIT();
 8002274:	f7fe f9d0 	bl	8000618 <QF_crit_exit_>
            QF_EPOOL_PUT_(QF_priv_.ePool_[poolNum - 1U], (QEvt *)e,
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	1e5a      	subs	r2, r3, #1
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4a07      	ldr	r2, [pc, #28]	@ (80022a4 <QF_gc+0x9c>)
 8002286:	4413      	add	r3, r2
 8002288:	2200      	movs	r2, #0
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f8e9 	bl	8002464 <QMPool_put>
}
 8002292:	e001      	b.n	8002298 <QF_gc+0x90>
        QF_CRIT_EXIT();
 8002294:	f7fe f9c0 	bl	8000618 <QF_crit_exit_>
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	0800a02c 	.word	0x0800a02c
 80022a4:	20000284 	.word	0x20000284

080022a8 <QMPool_init>:
//! @public @memberof QMPool
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const blockSize)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80022b6:	f7fe f99d 	bl	80005f4 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(100, poolSto != (void *)0);
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <QMPool_init+0x20>
 80022c0:	2164      	movs	r1, #100	@ 0x64
 80022c2:	4836      	ldr	r0, [pc, #216]	@ (800239c <QMPool_init+0xf4>)
 80022c4:	f7fe fd4c 	bl	8000d60 <Q_onError>

    me->freeHead = (void * *)poolSto;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	609a      	str	r2, [r3, #8]

    // find # free links in a memory block, see NOTE1
    me->blockSize = (QMPoolSize)(2U * sizeof(void *));
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2208      	movs	r2, #8
 80022d2:	819a      	strh	r2, [r3, #12]
    uint_fast16_t inext = 2U; // # index of the next block
 80022d4:	2302      	movs	r3, #2
 80022d6:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 80022d8:	e008      	b.n	80022ec <QMPool_init+0x44>
        me->blockSize += (QMPoolSize)sizeof(void *);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	899b      	ldrh	r3, [r3, #12]
 80022de:	3304      	adds	r3, #4
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	819a      	strh	r2, [r3, #12]
        ++inext;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	899a      	ldrh	r2, [r3, #12]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d3f0      	bcc.n	80022da <QMPool_init+0x32>
    }

    // the pool buffer must fit at least one rounded-up block
    Q_ASSERT_INCRIT(110, poolSize >= me->blockSize);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	899b      	ldrh	r3, [r3, #12]
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4293      	cmp	r3, r2
 8002302:	d203      	bcs.n	800230c <QMPool_init+0x64>
 8002304:	216e      	movs	r1, #110	@ 0x6e
 8002306:	4825      	ldr	r0, [pc, #148]	@ (800239c <QMPool_init+0xf4>)
 8002308:	f7fe fd2a 	bl	8000d60 <Q_onError>

    // start at the head of the free list
    void * *pfb = me->freeHead; // pointer to free block
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	61bb      	str	r3, [r7, #24]
    uint32_t nTot = 1U; // the last block already in the list
 8002312:	2301      	movs	r3, #1
 8002314:	617b      	str	r3, [r7, #20]

    // chain all blocks together in a free-list...
    for (uint_fast32_t size = poolSize - me->blockSize;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	899b      	ldrh	r3, [r3, #12]
 800231a:	461a      	mov	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	e011      	b.n	8002348 <QMPool_init+0xa0>
         size >= (uint_fast32_t)me->blockSize;
         size -= (uint_fast32_t)me->blockSize)
    {
        pfb[0] = &pfb[inext]; // set the next link to next free block
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	441a      	add	r2, r3
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]
        pfb = pfb[0]; // advance to the next block
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
        ++nTot;       // one more free block in the pool
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
         size -= (uint_fast32_t)me->blockSize)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	899b      	ldrh	r3, [r3, #12]
 8002340:	461a      	mov	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	613b      	str	r3, [r7, #16]
         size >= (uint_fast32_t)me->blockSize;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	899b      	ldrh	r3, [r3, #12]
 800234c:	461a      	mov	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4293      	cmp	r3, r2
 8002352:	d2e7      	bcs.n	8002324 <QMPool_init+0x7c>
    }
    pfb[0] = (void * *)0; // the last link points to NULL
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]

    // dynamic range check
#if (QF_MPOOL_CTR_SIZE == 1U)
    Q_ASSERT_INCRIT(190, nTot < 0xFFU);
#elif (QF_MPOOL_CTR_SIZE == 2U)
    Q_ASSERT_INCRIT(190, nTot < 0xFFFFU);
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002360:	4293      	cmp	r3, r2
 8002362:	d903      	bls.n	800236c <QMPool_init+0xc4>
 8002364:	21be      	movs	r1, #190	@ 0xbe
 8002366:	480d      	ldr	r0, [pc, #52]	@ (800239c <QMPool_init+0xf4>)
 8002368:	f7fe fcfa 	bl	8000d60 <Q_onError>
#endif

    me->nTot  = (QMPoolCtr)nTot;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	81da      	strh	r2, [r3, #14]
    me->nFree = me->nTot; // all blocks are free
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	89da      	ldrh	r2, [r3, #14]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	821a      	strh	r2, [r3, #16]
    me->start = (void * *)poolSto; // the original start this pool buffer
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	601a      	str	r2, [r3, #0]
    me->end   = pfb;      // the last block in this pool
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	605a      	str	r2, [r3, #4]
    me->nMin  = me->nTot; // the minimum # free blocks
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	89da      	ldrh	r2, [r3, #14]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	825a      	strh	r2, [r3, #18]

    QF_CRIT_EXIT();
 8002390:	f7fe f942 	bl	8000618 <QF_crit_exit_>
}
 8002394:	bf00      	nop
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	0800a034 	.word	0x0800a034

080023a0 <QMPool_get>:
//............................................................................
//! @public @memberof QMPool
void * QMPool_get(QMPool * const me,
    uint_fast16_t const margin,
    uint_fast8_t const qsId)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80023ac:	f7fe f922 	bl	80005f4 <QF_crit_entry_>

    // get volatile into temporaries
    void * *pfb = me->freeHead; // pointer to free block
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	61fb      	str	r3, [r7, #28]
    QMPoolCtr nFree = me->nFree;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8a1b      	ldrh	r3, [r3, #16]
 80023ba:	837b      	strh	r3, [r7, #26]

    // have more free blocks than the requested margin?
    if (nFree > (QMPoolCtr)margin) {
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	8b7a      	ldrh	r2, [r7, #26]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d942      	bls.n	800244c <QMPool_get+0xac>
        Q_ASSERT_INCRIT(310, pfb != (void * *)0);
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d104      	bne.n	80023d6 <QMPool_get+0x36>
 80023cc:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80023d0:	4823      	ldr	r0, [pc, #140]	@ (8002460 <QMPool_get+0xc0>)
 80023d2:	f7fe fcc5 	bl	8000d60 <Q_onError>

        void * * const pfb_next = pfb[0]; // fast temporary
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	617b      	str	r3, [r7, #20]

        --nFree; // one less free block
 80023dc:	8b7b      	ldrh	r3, [r7, #26]
 80023de:	3b01      	subs	r3, #1
 80023e0:	837b      	strh	r3, [r7, #26]
        if (nFree == 0U) { // is the pool becoming empty?
 80023e2:	8b7b      	ldrh	r3, [r7, #26]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10e      	bne.n	8002406 <QMPool_get+0x66>
            // pool is becoming empty, so the next free block must be NULL
            Q_ASSERT_INCRIT(320, pfb_next == (void * *)0);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <QMPool_get+0x58>
 80023ee:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80023f2:	481b      	ldr	r0, [pc, #108]	@ (8002460 <QMPool_get+0xc0>)
 80023f4:	f7fe fcb4 	bl	8000d60 <Q_onError>

            me->nFree = 0U; // no more free blocks
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	821a      	strh	r2, [r3, #16]
            me->nMin = 0U;  // remember that the pool got empty
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	825a      	strh	r2, [r3, #18]
 8002404:	e019      	b.n	800243a <QMPool_get+0x9a>
        }
        else { // the pool is NOT empty

            // the next free-block pointer must be in range
            Q_ASSERT_INCRIT(330,
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	d304      	bcc.n	800241a <QMPool_get+0x7a>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	429a      	cmp	r2, r3
 8002418:	d904      	bls.n	8002424 <QMPool_get+0x84>
 800241a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800241e:	4810      	ldr	r0, [pc, #64]	@ (8002460 <QMPool_get+0xc0>)
 8002420:	f7fe fc9e 	bl	8000d60 <Q_onError>
                (me->start <= pfb_next) && (pfb_next <= me->end));

            me->nFree = nFree; // update the original
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8b7a      	ldrh	r2, [r7, #26]
 8002428:	821a      	strh	r2, [r3, #16]
            if (me->nMin > nFree) { // is this the new minimum?
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8a5b      	ldrh	r3, [r3, #18]
 800242e:	8b7a      	ldrh	r2, [r7, #26]
 8002430:	429a      	cmp	r2, r3
 8002432:	d202      	bcs.n	800243a <QMPool_get+0x9a>
                me->nMin = nFree; // remember the minimum so far
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8b7a      	ldrh	r2, [r7, #26]
 8002438:	825a      	strh	r2, [r3, #18]
            }
        }

        me->freeHead = pfb_next; // set the head to the next free block
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	609a      	str	r2, [r3, #8]

        // change the allocated block contents so that it is different
        // than a free block inside the pool.
        pfb[0] = &me->end[1]; // invalid location beyond the end
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	1d1a      	adds	r2, r3, #4
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e001      	b.n	8002450 <QMPool_get+0xb0>
            QS_MPC_PRE(nFree);     // # free blocks in the pool
            QS_MPC_PRE(me->nMin);  // min # free blocks ever in the pool
        QS_END_PRE()
    }
    else { // don't have enough free blocks at this point
        pfb = (void * *)0;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
            QS_MPC_PRE(nFree);     // # free blocks in the pool
            QS_MPC_PRE(margin);    // the requested margin
        QS_END_PRE()
    }

    QF_CRIT_EXIT();
 8002450:	f7fe f8e2 	bl	8000618 <QF_crit_exit_>

    return (void *)pfb; // return the block or NULL pointer to the caller
 8002454:	69fb      	ldr	r3, [r7, #28]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	0800a034 	.word	0x0800a034

08002464 <QMPool_put>:
//............................................................................
//! @public @memberof QMPool
void QMPool_put(QMPool * const me,
    void * const block,
    uint_fast8_t const qsId)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    void * * const pfb = (void * *)block; // pointer to free block
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	61fb      	str	r3, [r7, #28]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002474:	f7fe f8be 	bl	80005f4 <QF_crit_entry_>

    // get volatile into temporaries
    void * * const freeHead = me->freeHead;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	61bb      	str	r3, [r7, #24]
    QMPoolCtr nFree = me->nFree;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8a1b      	ldrh	r3, [r3, #16]
 8002482:	82fb      	strh	r3, [r7, #22]

    Q_REQUIRE_INCRIT(400, nFree < me->nTot);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	89db      	ldrh	r3, [r3, #14]
 8002488:	8afa      	ldrh	r2, [r7, #22]
 800248a:	429a      	cmp	r2, r3
 800248c:	d304      	bcc.n	8002498 <QMPool_put+0x34>
 800248e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002492:	4812      	ldr	r0, [pc, #72]	@ (80024dc <QMPool_put+0x78>)
 8002494:	f7fe fc64 	bl	8000d60 <Q_onError>
    Q_REQUIRE_INCRIT(410, (me->start <= pfb) && (pfb <= me->end));
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d304      	bcc.n	80024ac <QMPool_put+0x48>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d904      	bls.n	80024b6 <QMPool_put+0x52>
 80024ac:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 80024b0:	480a      	ldr	r0, [pc, #40]	@ (80024dc <QMPool_put+0x78>)
 80024b2:	f7fe fc55 	bl	8000d60 <Q_onError>

    ++nFree; // one more free block in this pool
 80024b6:	8afb      	ldrh	r3, [r7, #22]
 80024b8:	3301      	adds	r3, #1
 80024ba:	82fb      	strh	r3, [r7, #22]

    me->freeHead = pfb; // set as new head of the free list
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	609a      	str	r2, [r3, #8]
    me->nFree     = nFree;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8afa      	ldrh	r2, [r7, #22]
 80024c6:	821a      	strh	r2, [r3, #16]
    pfb[0]        = freeHead; // link into the list
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	601a      	str	r2, [r3, #0]
        QS_TIME_PRE();         // timestamp
        QS_OBJ_PRE(me);        // this memory pool
        QS_MPC_PRE(nFree);     // the # free blocks in the pool
    QS_END_PRE()

    QF_CRIT_EXIT();
 80024ce:	f7fe f8a3 	bl	8000618 <QF_crit_exit_>
}
 80024d2:	bf00      	nop
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	0800a034 	.word	0x0800a034

080024e0 <QActive_ctor>:

//............................................................................
//! @protected @memberof QActive
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
    // clear the whole QActive object, so that the framework can start
    // correctly even if the startup code fails to clear the uninitialized
    // data (as is required by the C Standard).
    QF_bzero_(me, sizeof(*me));
 80024ea:	2124      	movs	r1, #36	@ 0x24
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fc2d 	bl	8001d4c <QF_bzero_>

    // NOTE: QActive inherits the abstract QAsm class, but it calls the
    // constructor of the QHsm subclass. This is because QActive inherits
    // the behavior from the QHsm subclass.
    QHsm_ctor((QHsm *)(me), initial);
 80024f2:	6839      	ldr	r1, [r7, #0]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff f92b 	bl	8001750 <QHsm_ctor>
        &QHsm_isIn_
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    me->super.vptr = &vtable; // hook vptr to QActive vtable
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a02      	ldr	r2, [pc, #8]	@ (8002508 <QActive_ctor+0x28>)
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	0800a044 	.word	0x0800a044

0800250c <QActive_register_>:

//............................................................................
//! @private @memberof QActive
void QActive_register_(QActive * const me) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002514:	f7fe f86e 	bl	80005f4 <QF_crit_entry_>

    if (me->pthre == 0U) { // preemption-threshold not defined?
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7b5b      	ldrb	r3, [r3, #13]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d103      	bne.n	8002528 <QActive_register_+0x1c>
        me->pthre = me->prio; // apply the default
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7b1a      	ldrb	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	735a      	strb	r2, [r3, #13]
    }

#ifndef Q_UNSAFE
    Q_REQUIRE_INCRIT(100,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7b1b      	ldrb	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d011      	beq.n	8002554 <QActive_register_+0x48>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7b1b      	ldrb	r3, [r3, #12]
 8002534:	2b20      	cmp	r3, #32
 8002536:	d80d      	bhi.n	8002554 <QActive_register_+0x48>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7b1b      	ldrb	r3, [r3, #12]
 800253c:	461a      	mov	r2, r3
 800253e:	4b30      	ldr	r3, [pc, #192]	@ (8002600 <QActive_register_+0xf4>)
 8002540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <QActive_register_+0x48>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7b1a      	ldrb	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7b5b      	ldrb	r3, [r3, #13]
 8002550:	429a      	cmp	r2, r3
 8002552:	d903      	bls.n	800255c <QActive_register_+0x50>
 8002554:	2164      	movs	r1, #100	@ 0x64
 8002556:	482b      	ldr	r0, [pc, #172]	@ (8002604 <QActive_register_+0xf8>)
 8002558:	f7fe fc02 	bl	8000d60 <Q_onError>
        (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
        && (QActive_registry_[me->prio] == (QActive *)0)
        && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7b5b      	ldrb	r3, [r3, #13]
 8002560:	75fb      	strb	r3, [r7, #23]
    uint8_t next_thre = me->pthre;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7b5b      	ldrb	r3, [r3, #13]
 8002566:	75bb      	strb	r3, [r7, #22]

    for (uint_fast8_t p = (uint_fast8_t)me->prio - 1U;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7b1b      	ldrb	r3, [r3, #12]
 800256c:	3b01      	subs	r3, #1
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	e00f      	b.n	8002592 <QActive_register_+0x86>
         p > 0U;
         --p)
    {
        if (QActive_registry_[p] != (QActive *)0) {
 8002572:	4a23      	ldr	r2, [pc, #140]	@ (8002600 <QActive_register_+0xf4>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <QActive_register_+0x80>
            prev_thre = QActive_registry_[p]->pthre;
 800257e:	4a20      	ldr	r2, [pc, #128]	@ (8002600 <QActive_register_+0xf4>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	7b5b      	ldrb	r3, [r3, #13]
 8002588:	75fb      	strb	r3, [r7, #23]
            break;
 800258a:	e005      	b.n	8002598 <QActive_register_+0x8c>
         --p)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	3b01      	subs	r3, #1
 8002590:	613b      	str	r3, [r7, #16]
         p > 0U;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ec      	bne.n	8002572 <QActive_register_+0x66>
        }
    }
    for (uint_fast8_t p = (uint_fast8_t)me->prio + 1U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7b1b      	ldrb	r3, [r3, #12]
 800259c:	3301      	adds	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e00f      	b.n	80025c2 <QActive_register_+0xb6>
         p <= QF_MAX_ACTIVE;
         ++p)
    {
        if (QActive_registry_[p] != (QActive *)0) {
 80025a2:	4a17      	ldr	r2, [pc, #92]	@ (8002600 <QActive_register_+0xf4>)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <QActive_register_+0xb0>
            next_thre = QActive_registry_[p]->pthre;
 80025ae:	4a14      	ldr	r2, [pc, #80]	@ (8002600 <QActive_register_+0xf4>)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	7b5b      	ldrb	r3, [r3, #13]
 80025b8:	75bb      	strb	r3, [r7, #22]
            break;
 80025ba:	e005      	b.n	80025c8 <QActive_register_+0xbc>
         ++p)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3301      	adds	r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
         p <= QF_MAX_ACTIVE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d9ec      	bls.n	80025a2 <QActive_register_+0x96>
        }
    }

    Q_ASSERT_INCRIT(190,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7b5b      	ldrb	r3, [r3, #13]
 80025cc:	7dfa      	ldrb	r2, [r7, #23]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d804      	bhi.n	80025dc <QActive_register_+0xd0>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7b5b      	ldrb	r3, [r3, #13]
 80025d6:	7dba      	ldrb	r2, [r7, #22]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d203      	bcs.n	80025e4 <QActive_register_+0xd8>
 80025dc:	21be      	movs	r1, #190	@ 0xbe
 80025de:	4809      	ldr	r0, [pc, #36]	@ (8002604 <QActive_register_+0xf8>)
 80025e0:	f7fe fbbe 	bl	8000d60 <Q_onError>
        (prev_thre <= me->pthre)
        && (me->pthre <= next_thre));
#endif // Q_UNSAFE

    // register the AO at the QF-prio.
    QActive_registry_[me->prio] = me;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7b1b      	ldrb	r3, [r3, #12]
 80025e8:	4619      	mov	r1, r3
 80025ea:	4a05      	ldr	r2, [pc, #20]	@ (8002600 <QActive_register_+0xf4>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    QF_CRIT_EXIT();
 80025f2:	f7fe f811 	bl	8000618 <QF_crit_exit_>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200002c4 	.word	0x200002c4
 8002604:	0800a03c 	.word	0x0800a03c

08002608 <QEQueue_init>:
//............................................................................
//! @public @memberof QEQueue
void QEQueue_init(QEQueue * const me,
    struct QEvt const  * * const qSto,
    uint_fast16_t const qLen)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002614:	f7fd ffee 	bl	80005f4 <QF_crit_entry_>

#if (QF_EQUEUE_CTR_SIZE == 1U)
    Q_REQUIRE_INCRIT(100, qLen < 0xFFU);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2bfe      	cmp	r3, #254	@ 0xfe
 800261c:	d903      	bls.n	8002626 <QEQueue_init+0x1e>
 800261e:	2164      	movs	r1, #100	@ 0x64
 8002620:	4813      	ldr	r0, [pc, #76]	@ (8002670 <QEQueue_init+0x68>)
 8002622:	f7fe fb9d 	bl	8000d60 <Q_onError>
#endif

    me->frontEvt = (QEvt *)0; // no events in the queue
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      // the beginning of the ring buffer
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	721a      	strb	r2, [r3, #8]
    if (qLen > 0U) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <QEQueue_init+0x44>
        me->head = 0U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); // +1 for frontEvt
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	b2da      	uxtb	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	7adb      	ldrb	r3, [r3, #11]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	731a      	strb	r2, [r3, #12]

    QF_CRIT_EXIT();
 8002662:	f7fd ffd9 	bl	8000618 <QF_crit_exit_>
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	0800a050 	.word	0x0800a050

08002674 <QEvt_ctor>:
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
    me->sig      = (QSignal)sig;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	801a      	strh	r2, [r3, #0]
    me->poolNum_ = 0x00U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	709a      	strb	r2, [r3, #2]
    me->refCtr_  = 0xE0U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	22e0      	movs	r2, #224	@ 0xe0
 8002690:	70da      	strb	r2, [r3, #3]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <QTimeEvt_ctorX>:
//! @public @memberof QTimeEvt
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80026ae:	f7fd ffa1 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (sig != 0)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <QTimeEvt_ctorX+0x1e>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <QTimeEvt_ctorX+0x28>
 80026be:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80026c2:	4812      	ldr	r0, [pc, #72]	@ (800270c <QTimeEvt_ctorX+0x6c>)
 80026c4:	f7fe fb4c 	bl	8000d60 <Q_onError>
        && (tickRate < QF_MAX_TICK_RATE));
    QF_CRIT_EXIT();
 80026c8:	f7fd ffa6 	bl	8000618 <QF_crit_exit_>

    QEvt_ctor(&me->super, sig);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ffcf 	bl	8002674 <QEvt_ctor>

    me->next     = (QTimeEvt *)0;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	605a      	str	r2, [r3, #4]
    me->act      = act;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	609a      	str	r2, [r3, #8]
    me->ctr      = 0U;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	60da      	str	r2, [r3, #12]
    me->interval = 0U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
    me->tickRate = (uint8_t)tickRate;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	751a      	strb	r2, [r3, #20]
    me->flags    = 0U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	755a      	strb	r2, [r3, #21]

    me->super.refCtr_ = 0U; // adjust from the QEvt_ctor((sig) ctor
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	70da      	strb	r2, [r3, #3]
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	0800a058 	.word	0x0800a058

08002710 <QTimeEvt_armX>:
//............................................................................
//! @public @memberof QTimeEvt
void QTimeEvt_armX(QTimeEvt * const me,
    uint32_t const nTicks,
    uint32_t const interval)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800271c:	f7fd ff6a 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(400, (nTicks < 0xFFU) && (interval < 0xFFU));
#elif (QF_TIMEEVT_CTR_SIZE == 2U)
    Q_REQUIRE_INCRIT(400, (nTicks < 0xFFFFU) && (interval < 0xFFFFU));
#endif

    QTimeEvtCtr const ctr = me->ctr;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	617b      	str	r3, [r7, #20]
    uint8_t const tickRate = me->tickRate;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	7d1b      	ldrb	r3, [r3, #20]
 800272a:	74fb      	strb	r3, [r7, #19]
#ifdef Q_SPY
    uint_fast8_t const qsId = ((QActive *)(me->act))->prio;
#endif // def Q_SPY

    Q_REQUIRE_INCRIT(410,
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <QTimeEvt_armX+0x36>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <QTimeEvt_armX+0x36>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <QTimeEvt_armX+0x36>
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <QTimeEvt_armX+0x40>
 8002746:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800274a:	4818      	ldr	r0, [pc, #96]	@ (80027ac <QTimeEvt_armX+0x9c>)
 800274c:	f7fe fb08 	bl	8000d60 <Q_onError>

#ifdef Q_UNSAFE
    Q_UNUSED_PAR(ctr);
#endif // ndef Q_UNSAFE

    me->ctr = (QTimeEvtCtr)nTicks;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	60da      	str	r2, [r3, #12]
    me->interval = (QTimeEvtCtr)interval;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	611a      	str	r2, [r3, #16]

    // is the time event unlinked?
    // NOTE: For the duration of a single clock tick of the specified tick
    // rate a time event can be disarmed and yet still linked into the list
    // because un-linking is performed exclusively in QTimeEvt_tick_().
    if ((me->flags & QTE_FLAG_IS_LINKED) == 0U) {
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	7d5b      	ldrb	r3, [r3, #21]
 8002760:	b25b      	sxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	db1b      	blt.n	800279e <QTimeEvt_armX+0x8e>
        me->flags |= QTE_FLAG_IS_LINKED; // mark as linked
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	7d5b      	ldrb	r3, [r3, #21]
 800276a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	755a      	strb	r2, [r3, #21]
        // "freshly armed" list based on timeEvtHead_[tickRate].act.
        // Only later, inside QTimeEvt_tick_(), the "freshly armed"
        // list is appended to the main list of armed time events based on
        // timeEvtHead_[tickRate].next. Again, this is to keep any
        // changes to the main list exclusively inside QTimeEvt_tick_().
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8002774:	7cfa      	ldrb	r2, [r7, #19]
 8002776:	490e      	ldr	r1, [pc, #56]	@ (80027b0 <QTimeEvt_armX+0xa0>)
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	3308      	adds	r3, #8
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 800278a:	7cfa      	ldrb	r2, [r7, #19]
 800278c:	4908      	ldr	r1, [pc, #32]	@ (80027b0 <QTimeEvt_armX+0xa0>)
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	3308      	adds	r3, #8
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE(nTicks);   // the # ticks
        QS_TEC_PRE(interval); // the interval
        QS_U8_PRE(tickRate);  // tick rate
    QS_END_PRE()

    QF_CRIT_EXIT();
 800279e:	f7fd ff3b 	bl	8000618 <QF_crit_exit_>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	0800a058 	.word	0x0800a058
 80027b0:	20000348 	.word	0x20000348

080027b4 <QTimeEvt_disarm>:

//............................................................................
//! @public @memberof QTimeEvt
bool QTimeEvt_disarm(QTimeEvt * const me) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80027bc:	f7fd ff1a 	bl	80005f4 <QF_crit_entry_>

    QTimeEvtCtr const ctr = me->ctr;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
#ifdef Q_SPY
    uint_fast8_t const qsId = QACTIVE_CAST_(me->act)->prio;
#endif

    // was the time event actually armed?
    bool wasArmed = false;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
    if (ctr != 0U) {
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00c      	beq.n	80027ea <QTimeEvt_disarm+0x36>
        wasArmed = true;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
        me->flags |= QTE_FLAG_WAS_DISARMED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7d5b      	ldrb	r3, [r3, #21]
 80027d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	755a      	strb	r2, [r3, #21]
        me->ctr = 0U; // schedule removal from the list
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	e006      	b.n	80027f8 <QTimeEvt_disarm+0x44>
            QS_TEC_PRE(me->interval); // the interval
            QS_U8_PRE(me->tickRate);  // tick rate
        QS_END_PRE()
    }
    else { // the time event was already disarmed automatically
        me->flags &= (uint8_t)(~QTE_FLAG_WAS_DISARMED & 0xFFU);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7d5b      	ldrb	r3, [r3, #21]
 80027ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	755a      	strb	r2, [r3, #21]
            QS_OBJ_PRE(me->act);      // the target AO
            QS_U8_PRE(me->tickRate);  // tick rate
        QS_END_PRE()
    }

    QF_CRIT_EXIT();
 80027f8:	f7fd ff0e 	bl	8000618 <QF_crit_exit_>

    return wasArmed;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <QTimeEvt_init>:
    return ctr;
}

//............................................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_init(void) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
    for (uint_fast8_t tickRate = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	e00e      	b.n	8002832 <QTimeEvt_init+0x2a>
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
         ++tickRate)
    {
        QTimeEvt_ctorX(&QTimeEvt_timeEvtHead_[tickRate],
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <QTimeEvt_init+0x3c>)
 8002820:	1898      	adds	r0, r3, r2
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2204      	movs	r2, #4
 8002826:	2100      	movs	r1, #0
 8002828:	f7ff ff3a 	bl	80026a0 <QTimeEvt_ctorX>
         ++tickRate)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3301      	adds	r3, #1
 8002830:	607b      	str	r3, [r7, #4]
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ed      	beq.n	8002814 <QTimeEvt_init+0xc>
                       (QActive *)0, Q_USER_SIG, tickRate);
    }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000348 	.word	0x20000348

08002848 <QTimeEvt_tick_>:
//............................................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
#ifndef Q_SPY
    Q_UNUSED_PAR(sender);
#endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002852:	f7fd fecf 	bl	80005f4 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(800, tickRate < Q_DIM(QTimeEvt_timeEvtHead_));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <QTimeEvt_tick_+0x1e>
 800285c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002860:	4841      	ldr	r0, [pc, #260]	@ (8002968 <QTimeEvt_tick_+0x120>)
 8002862:	f7fe fa7d 	bl	8000d60 <Q_onError>

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4a3e      	ldr	r2, [pc, #248]	@ (800296c <QTimeEvt_tick_+0x124>)
 8002872:	4413      	add	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
    QS_END_PRE()
#endif // def Q_SPY

    // scan the linked-list of time events at this rate...
    while (true) {
        Q_ASSERT_INCRIT(810, prev != (QTimeEvt *)0); // sanity check
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <QTimeEvt_tick_+0x3e>
 800287c:	f240 312a 	movw	r1, #810	@ 0x32a
 8002880:	4839      	ldr	r0, [pc, #228]	@ (8002968 <QTimeEvt_tick_+0x120>)
 8002882:	f7fe fa6d 	bl	8000d60 <Q_onError>

        QTimeEvt *te = prev->next; // advance down the time evt. list
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	613b      	str	r3, [r7, #16]

        if (te == (QTimeEvt *)0) { // end of the list?
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d122      	bne.n	80028d8 <QTimeEvt_tick_+0x90>
            // NO any new time events armed since the last QTimeEvt_tick_()?
            if (QTimeEvt_timeEvtHead_[tickRate].act == (void *)0) {
 8002892:	4936      	ldr	r1, [pc, #216]	@ (800296c <QTimeEvt_tick_+0x124>)
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	3308      	adds	r3, #8
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d057      	beq.n	8002958 <QTimeEvt_tick_+0x110>
                break; // terminate the while-loop
            }

            prev->next = (QTimeEvt*)QTimeEvt_timeEvtHead_[tickRate].act;
 80028a8:	4930      	ldr	r1, [pc, #192]	@ (800296c <QTimeEvt_tick_+0x124>)
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	3308      	adds	r3, #8
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	605a      	str	r2, [r3, #4]
            QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 80028be:	492b      	ldr	r1, [pc, #172]	@ (800296c <QTimeEvt_tick_+0x124>)
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	3308      	adds	r3, #8
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

            te = prev->next; // switch to the new list
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	613b      	str	r3, [r7, #16]
        }

        // the time event 'te' must be valid
        Q_ASSERT_INCRIT(840, te != (QTimeEvt *)0);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <QTimeEvt_tick_+0xa0>
 80028de:	f44f 7152 	mov.w	r1, #840	@ 0x348
 80028e2:	4821      	ldr	r0, [pc, #132]	@ (8002968 <QTimeEvt_tick_+0x120>)
 80028e4:	f7fe fa3c 	bl	8000d60 <Q_onError>

        QTimeEvtCtr ctr = te->ctr; // move volatile into temporary
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60fb      	str	r3, [r7, #12]

        if (ctr == 0U) { // time event scheduled for removal?
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10d      	bne.n	8002910 <QTimeEvt_tick_+0xc8>
            prev->next = te->next;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	605a      	str	r2, [r3, #4]

            // mark time event 'te' as NOT linked
            te->flags &= (uint8_t)(~QTE_FLAG_IS_LINKED & 0xFFU);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	7d5b      	ldrb	r3, [r3, #21]
 8002900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002904:	b2da      	uxtb	r2, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	755a      	strb	r2, [r3, #21]
            // do NOT advance the prev pointer
            QF_CRIT_EXIT(); // exit crit. section to reduce latency
 800290a:	f7fd fe85 	bl	8000618 <QF_crit_exit_>
 800290e:	e020      	b.n	8002952 <QTimeEvt_tick_+0x10a>
        }
        else if (ctr == 1U) { // is time event about to expire?
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d113      	bne.n	800293e <QTimeEvt_tick_+0xf6>
            QActive * const act = (QActive *)te->act;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	60bb      	str	r3, [r7, #8]
            prev = QTimeEvt_expire_(te, prev, act, tickRate);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	6979      	ldr	r1, [r7, #20]
 8002922:	6938      	ldr	r0, [r7, #16]
 8002924:	f000 f824 	bl	8002970 <QTimeEvt_expire_>
 8002928:	6178      	str	r0, [r7, #20]

                // QACTIVE_POST() asserts if the queue overflows
                QACTIVE_POST(act, &te->super, sender);
            }
#else // not QXK
            QF_CRIT_EXIT(); // exit crit. section before posting
 800292a:	f7fd fe75 	bl	8000618 <QF_crit_exit_>

            // QACTIVE_POST() asserts if the queue overflows
            QACTIVE_POST(act, &te->super, sender);
 800292e:	6939      	ldr	r1, [r7, #16]
 8002930:	2300      	movs	r3, #0
 8002932:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002936:	68b8      	ldr	r0, [r7, #8]
 8002938:	f7ff fa4c 	bl	8001dd4 <QActive_post_>
 800293c:	e009      	b.n	8002952 <QTimeEvt_tick_+0x10a>
#endif
        }
        else { // time event keeps timing out
            --ctr; // decrement the tick counter
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3b01      	subs	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
            te->ctr = ctr; // update the original
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	60da      	str	r2, [r3, #12]

            prev = te; // advance to this time event
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	617b      	str	r3, [r7, #20]
            QF_CRIT_EXIT(); // exit crit. section to reduce latency
 800294e:	f7fd fe63 	bl	8000618 <QF_crit_exit_>
        }
        QF_CRIT_ENTRY(); // re-enter crit. section to continue the loop
 8002952:	f7fd fe4f 	bl	80005f4 <QF_crit_entry_>
    while (true) {
 8002956:	e78e      	b.n	8002876 <QTimeEvt_tick_+0x2e>
                break; // terminate the while-loop
 8002958:	bf00      	nop
    }
    QF_CRIT_EXIT();
 800295a:	f7fd fe5d 	bl	8000618 <QF_crit_exit_>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	0800a058 	.word	0x0800a058
 800296c:	20000348 	.word	0x20000348

08002970 <QTimeEvt_expire_>:
//! @private @memberof QTimeEvt
QTimeEvt * QTimeEvt_expire_(QTimeEvt * const me,
    QTimeEvt * const prev_link,
    QActive const * const act,
    uint_fast8_t const tickRate)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
#ifndef Q_SPY
    Q_UNUSED_PAR(act);
    Q_UNUSED_PAR(tickRate);
#endif

    QTimeEvt *prev = prev_link;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	617b      	str	r3, [r7, #20]
    if (me->interval != 0U) { // periodic time evt?
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <QTimeEvt_expire_+0x28>
        me->ctr = me->interval; // rearm the time event
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	60da      	str	r2, [r3, #12]
        prev = me; // advance to this time event
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	e00d      	b.n	80029b4 <QTimeEvt_expire_+0x44>
    }
    else { // one-shot time event: automatically disarm
        me->ctr = 0U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
        prev->next = me->next;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	605a      	str	r2, [r3, #4]

        // mark this time event as NOT linked
        me->flags &= (uint8_t)(~QTE_FLAG_IS_LINKED & 0xFFU);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	7d5b      	ldrb	r3, [r3, #21]
 80029aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	755a      	strb	r2, [r3, #21]
        QS_SIG_PRE(me->super.sig);// signal of this time event
        QS_OBJ_PRE(act);          // the target AO
        QS_U8_PRE(tickRate);      // tick rate
    QS_END_PRE()

    return prev;
 80029b4:	697b      	ldr	r3, [r7, #20]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
    return (me->bits[0] != 0U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bf14      	ite	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	2300      	moveq	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <QPSet_remove>:

//! @public @memberof QPSet
static inline void QPSet_remove(QPSet * const me,
    uint_fast8_t const n)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
#if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	601a      	str	r2, [r3, #0]
    }
    else {
        (me->bits[1] = (me->bits[1] & ~((QPSetBits)1U << (n - 33U))));
    }
#endif
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <QPSet_findMax>:

//! @public @memberof QPSet
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
#if (QF_MAX_ACTIVE <= 32U)
    return QF_LOG2(me->bits[0]);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	f1c3 0320 	rsb	r3, r3, #32
#else
    return (me->bits[1] != 0U)
        ? (QF_LOG2(me->bits[1]) + 32U)
        : (QF_LOG2(me->bits[0]));
#endif
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <QF_init>:
    QF_CRIT_EXIT();
}

//............................................................................
//! @static @public @memberof QF
void QF_init(void) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
    QF_bzero_(&QF_priv_,                 sizeof(QF_priv_));
 8002a34:	2140      	movs	r1, #64	@ 0x40
 8002a36:	4808      	ldr	r0, [pc, #32]	@ (8002a58 <QF_init+0x28>)
 8002a38:	f7ff f988 	bl	8001d4c <QF_bzero_>
    QF_bzero_(&QV_priv_,                 sizeof(QV_priv_));
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	4807      	ldr	r0, [pc, #28]	@ (8002a5c <QF_init+0x2c>)
 8002a40:	f7ff f984 	bl	8001d4c <QF_bzero_>
    QF_bzero_(&QActive_registry_[0],     sizeof(QActive_registry_));
 8002a44:	2184      	movs	r1, #132	@ 0x84
 8002a46:	4806      	ldr	r0, [pc, #24]	@ (8002a60 <QF_init+0x30>)
 8002a48:	f7ff f980 	bl	8001d4c <QF_bzero_>

    QTimeEvt_init(); // initialize QTimeEvts
 8002a4c:	f7ff fedc 	bl	8002808 <QTimeEvt_init>

#ifdef QV_INIT
    QV_INIT(); // port-specific initialization of the QV kernel
 8002a50:	f7fd fdf4 	bl	800063c <QV_init>
#endif
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000284 	.word	0x20000284
 8002a5c:	20000360 	.word	0x20000360
 8002a60:	200002c4 	.word	0x200002c4

08002a64 <QF_run>:
    // nothing else to do for the QV kernel
}

//............................................................................
//! @static @public @memberof QF
int_t QF_run(void) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
    QS_beginRec_((uint_fast8_t)QS_QF_RUN);
    QS_endRec_();
    QF_INT_ENABLE();
#endif // Q_SPY

    QF_onStartup(); // application-specific startup callback
 8002a6a:	f7fe f98b 	bl	8000d84 <QF_onStartup>

    QF_INT_DISABLE();
 8002a6e:	f7fd fd9d 	bl	80005ac <QF_int_disable_>

#ifdef QV_START
    QV_START(); // port-specific startup of the QV kernel
 8002a72:	2300      	movs	r3, #0
 8002a74:	f383 8814 	msr	CONTROL, r3

#endif // (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)

    for (;;) { // QV event loop...
        // find the maximum prio. AO ready to run
        uint_fast8_t const p = (QPSet_notEmpty(&QV_priv_.readySet)
 8002a78:	481b      	ldr	r0, [pc, #108]	@ (8002ae8 <QF_run+0x84>)
 8002a7a:	f7ff ffa2 	bl	80029c2 <QPSet_notEmpty>
 8002a7e:	4603      	mov	r3, r0
                               ? QPSet_findMax(&QV_priv_.readySet)
                               : 0U);
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <QF_run+0x2a>
                               ? QPSet_findMax(&QV_priv_.readySet)
 8002a84:	4818      	ldr	r0, [pc, #96]	@ (8002ae8 <QF_run+0x84>)
 8002a86:	f7ff ffc3 	bl	8002a10 <QPSet_findMax>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	e000      	b.n	8002a90 <QF_run+0x2c>
                               : 0U);
 8002a8e:	2300      	movs	r3, #0
        uint_fast8_t const p = (QPSet_notEmpty(&QV_priv_.readySet)
 8002a90:	60fb      	str	r3, [r7, #12]

        if (p > QV_priv_.schedCeil) { // is it above the sched ceiling?
 8002a92:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <QF_run+0x84>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d91f      	bls.n	8002adc <QF_run+0x78>
            QActive * const a = QActive_registry_[p];
 8002a9c:	4a13      	ldr	r2, [pc, #76]	@ (8002aec <QF_run+0x88>)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa4:	60bb      	str	r3, [r7, #8]
#endif // QF_ON_CONTEXT_SW

            pprev = p; // update previous prio.
#endif // (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)

            QF_INT_ENABLE();
 8002aa6:	f7fd fd93 	bl	80005d0 <QF_int_enable_>

            QEvt const * const e = QActive_get_(a);
 8002aaa:	68b8      	ldr	r0, [r7, #8]
 8002aac:	f7ff fa50 	bl	8001f50 <QActive_get_>
 8002ab0:	6078      	str	r0, [r7, #4]

            // dispatch event (virtual call)
            (*a->super.vptr->dispatch)(&a->super, e, p);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	68b8      	ldr	r0, [r7, #8]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4798      	blx	r3
#if (QF_MAX_EPOOL > 0U)
            QF_gc(e);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fba1 	bl	8002208 <QF_gc>
#endif
            QF_INT_DISABLE();
 8002ac6:	f7fd fd71 	bl	80005ac <QF_int_disable_>

            if (a->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1d2      	bne.n	8002a78 <QF_run+0x14>
                QPSet_remove(&QV_priv_.readySet, p);
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	4804      	ldr	r0, [pc, #16]	@ (8002ae8 <QF_run+0x84>)
 8002ad6:	f7ff ff85 	bl	80029e4 <QPSet_remove>
 8002ada:	e7cd      	b.n	8002a78 <QF_run+0x14>
            // the determination of the idle condition can change at any time
            // by an interrupt posting events to a queue.
            //
            // NOTE: QV_onIdle() MUST enable interrupts internally, ideally
            // atomically with putting the CPU into a power-saving mode.
            QV_onIdle();
 8002adc:	f7fe f984 	bl	8000de8 <QV_onIdle>

            QF_INT_DISABLE(); // disable interrupts before looping back
 8002ae0:	f7fd fd64 	bl	80005ac <QF_int_disable_>
    for (;;) { // QV event loop...
 8002ae4:	e7c8      	b.n	8002a78 <QF_run+0x14>
 8002ae6:	bf00      	nop
 8002ae8:	20000360 	.word	0x20000360
 8002aec:	200002c4 	.word	0x200002c4

08002af0 <QActive_start>:
    QEvtPtr * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	460b      	mov	r3, r1
 8002afe:	817b      	strh	r3, [r7, #10]
    Q_UNUSED_PAR(stkSto);  // not needed in QV
    Q_UNUSED_PAR(stkSize); // not needed in QV

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002b00:	f7fd fd78 	bl	80005f4 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (me->super.vptr != (struct QAsmVtable *)0)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <QActive_start+0x22>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <QActive_start+0x2c>
 8002b12:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002b16:	4811      	ldr	r0, [pc, #68]	@ (8002b5c <QActive_start+0x6c>)
 8002b18:	f7fe f922 	bl	8000d60 <Q_onError>
        && (stkSto == (void *)0));
    QF_CRIT_EXIT();
 8002b1c:	f7fd fd7c 	bl	8000618 <QF_crit_exit_>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); // QF-prio. of the AO
 8002b20:	897b      	ldrh	r3, [r7, #10]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	731a      	strb	r2, [r3, #12]
    me->pthre = 0U; // not used
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	735a      	strb	r2, [r3, #13]
    QActive_register_(me); // make QF aware of this active object
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff fcec 	bl	800250c <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); // init the built-in queue
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3314      	adds	r3, #20
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fd63 	bl	8002608 <QEQueue_init>

    // top-most initial tran. (virtual call)
    (*me->super.vptr->init)(&me->super, par, me->prio);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	7b12      	ldrb	r2, [r2, #12]
 8002b4e:	6a39      	ldr	r1, [r7, #32]
 8002b50:	4798      	blx	r3
    QS_FLUSH(); // flush the trace buffer to the host
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	0800a060 	.word	0x0800a060

08002b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b9e:	2007      	movs	r0, #7
 8002ba0:	f000 fa6e 	bl	8003080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800

08002bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <NMI_Handler+0x4>

08002bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <HardFault_Handler+0x4>

08002bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <MemManage_Handler+0x4>

08002bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <BusFault_Handler+0x4>

08002bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <UsageFault_Handler+0x4>

08002bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c08:	4802      	ldr	r0, [pc, #8]	@ (8002c14 <OTG_FS_IRQHandler+0x10>)
 8002c0a:	f000 fd8d 	bl	8003728 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20001850 	.word	0x20001850

08002c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c20:	4a14      	ldr	r2, [pc, #80]	@ (8002c74 <_sbrk+0x5c>)
 8002c22:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <_sbrk+0x60>)
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c2c:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <_sbrk+0x64>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	@ (8002c80 <_sbrk+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c48:	f006 fbcc 	bl	80093e4 <__errno>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	220c      	movs	r2, #12
 8002c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c56:	e009      	b.n	8002c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c58:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a05      	ldr	r2, [pc, #20]	@ (8002c7c <_sbrk+0x64>)
 8002c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20020000 	.word	0x20020000
 8002c78:	00000400 	.word	0x00000400
 8002c7c:	20000368 	.word	0x20000368
 8002c80:	200020a0 	.word	0x200020a0

08002c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c88:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <SystemInit+0x20>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <SystemInit+0x20>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002cc2:	4b34      	ldr	r3, [pc, #208]	@ (8002d94 <SystemCoreClockUpdate+0xec>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d011      	beq.n	8002cf6 <SystemCoreClockUpdate+0x4e>
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d844      	bhi.n	8002d62 <SystemCoreClockUpdate+0xba>
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <SystemCoreClockUpdate+0x3e>
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d004      	beq.n	8002cee <SystemCoreClockUpdate+0x46>
 8002ce4:	e03d      	b.n	8002d62 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <SystemCoreClockUpdate+0xf0>)
 8002ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8002d9c <SystemCoreClockUpdate+0xf4>)
 8002cea:	601a      	str	r2, [r3, #0]
      break;
 8002cec:	e03d      	b.n	8002d6a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002cee:	4b2a      	ldr	r3, [pc, #168]	@ (8002d98 <SystemCoreClockUpdate+0xf0>)
 8002cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8002da0 <SystemCoreClockUpdate+0xf8>)
 8002cf2:	601a      	str	r2, [r3, #0]
      break;
 8002cf4:	e039      	b.n	8002d6a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002cf6:	4b27      	ldr	r3, [pc, #156]	@ (8002d94 <SystemCoreClockUpdate+0xec>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	0d9b      	lsrs	r3, r3, #22
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d02:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <SystemCoreClockUpdate+0xec>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d0a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00c      	beq.n	8002d2c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002d12:	4a23      	ldr	r2, [pc, #140]	@ (8002da0 <SystemCoreClockUpdate+0xf8>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002d94 <SystemCoreClockUpdate+0xec>)
 8002d1c:	6852      	ldr	r2, [r2, #4]
 8002d1e:	0992      	lsrs	r2, r2, #6
 8002d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d24:	fb02 f303 	mul.w	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	e00b      	b.n	8002d44 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d9c <SystemCoreClockUpdate+0xf4>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	4a17      	ldr	r2, [pc, #92]	@ (8002d94 <SystemCoreClockUpdate+0xec>)
 8002d36:	6852      	ldr	r2, [r2, #4]
 8002d38:	0992      	lsrs	r2, r2, #6
 8002d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002d44:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <SystemCoreClockUpdate+0xec>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d98 <SystemCoreClockUpdate+0xf0>)
 8002d5e:	6013      	str	r3, [r2, #0]
      break;
 8002d60:	e003      	b.n	8002d6a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <SystemCoreClockUpdate+0xf0>)
 8002d64:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <SystemCoreClockUpdate+0xf4>)
 8002d66:	601a      	str	r2, [r3, #0]
      break;
 8002d68:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <SystemCoreClockUpdate+0xec>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	4a0b      	ldr	r2, [pc, #44]	@ (8002da4 <SystemCoreClockUpdate+0xfc>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002d7a:	4b07      	ldr	r3, [pc, #28]	@ (8002d98 <SystemCoreClockUpdate+0xf0>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	4a04      	ldr	r2, [pc, #16]	@ (8002d98 <SystemCoreClockUpdate+0xf0>)
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40023800 	.word	0x40023800
 8002d98:	20000008 	.word	0x20000008
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	007a1200 	.word	0x007a1200
 8002da4:	0800a064 	.word	0x0800a064

08002da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002da8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002de0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002dac:	f7ff ff6a 	bl	8002c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002db0:	480c      	ldr	r0, [pc, #48]	@ (8002de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002db2:	490d      	ldr	r1, [pc, #52]	@ (8002de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002db4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db8:	e002      	b.n	8002dc0 <LoopCopyDataInit>

08002dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dbe:	3304      	adds	r3, #4

08002dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc4:	d3f9      	bcc.n	8002dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dcc:	e001      	b.n	8002dd2 <LoopFillZerobss>

08002dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd0:	3204      	adds	r2, #4

08002dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd4:	d3fb      	bcc.n	8002dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dd6:	f006 fb0b 	bl	80093f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dda:	f7fe fc89 	bl	80016f0 <main>
  bx  lr    
 8002dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de8:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8002dec:	0800a0bc 	.word	0x0800a0bc
  ldr r2, =_sbss
 8002df0:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8002df4:	2000209c 	.word	0x2000209c

08002df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df8:	e7fe      	b.n	8002df8 <ADC_IRQHandler>
	...

08002dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e00:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <HAL_Init+0x40>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0d      	ldr	r2, [pc, #52]	@ (8002e3c <HAL_Init+0x40>)
 8002e06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <HAL_Init+0x40>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <HAL_Init+0x40>)
 8002e12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e18:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <HAL_Init+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a07      	ldr	r2, [pc, #28]	@ (8002e3c <HAL_Init+0x40>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e24:	2003      	movs	r0, #3
 8002e26:	f000 f92b 	bl	8003080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f000 f808 	bl	8002e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e30:	f7ff fe96 	bl	8002b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023c00 	.word	0x40023c00

08002e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_InitTick+0x54>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_InitTick+0x58>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f943 	bl	80030ea <HAL_SYSTICK_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00e      	b.n	8002e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b0f      	cmp	r3, #15
 8002e72:	d80a      	bhi.n	8002e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e74:	2200      	movs	r2, #0
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e7c:	f000 f90b 	bl	8003096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e80:	4a06      	ldr	r2, [pc, #24]	@ (8002e9c <HAL_InitTick+0x5c>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000008 	.word	0x20000008
 8002e98:	20000010 	.word	0x20000010
 8002e9c:	2000000c 	.word	0x2000000c

08002ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_IncTick+0x20>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_IncTick+0x24>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <HAL_IncTick+0x24>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000010 	.word	0x20000010
 8002ec4:	2000036c 	.word	0x2000036c

08002ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_GetTick+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2000036c 	.word	0x2000036c

08002ee0 <__NVIC_SetPriorityGrouping>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_GetPriorityGrouping>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4907      	ldr	r1, [pc, #28]	@ (8002f7c <__NVIC_EnableIRQ+0x38>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	@ (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <SysTick_Config>:
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800304c:	d301      	bcc.n	8003052 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800304e:	2301      	movs	r3, #1
 8003050:	e00f      	b.n	8003072 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003052:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <SysTick_Config+0x40>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305a:	210f      	movs	r1, #15
 800305c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003060:	f7ff ff8e 	bl	8002f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <SysTick_Config+0x40>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306a:	4b04      	ldr	r3, [pc, #16]	@ (800307c <SysTick_Config+0x40>)
 800306c:	2207      	movs	r2, #7
 800306e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	e000e010 	.word	0xe000e010

08003080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff29 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a8:	f7ff ff3e 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 80030ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7ff ff8e 	bl	8002fd4 <NVIC_EncodePriority>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff5d 	bl	8002f80 <__NVIC_SetPriority>
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff31 	bl	8002f44 <__NVIC_EnableIRQ>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ffa2 	bl	800303c <SysTick_Config>
 80030f8:	4603      	mov	r3, r0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	@ 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	e16b      	b.n	80033f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003120:	2201      	movs	r2, #1
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	429a      	cmp	r2, r3
 800313a:	f040 815a 	bne.w	80033f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d005      	beq.n	8003156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003152:	2b02      	cmp	r3, #2
 8003154:	d130      	bne.n	80031b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	2203      	movs	r2, #3
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800318c:	2201      	movs	r2, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 0201 	and.w	r2, r3, #1
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d017      	beq.n	80031f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d123      	bne.n	8003248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	08da      	lsrs	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3208      	adds	r2, #8
 8003208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	08da      	lsrs	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3208      	adds	r2, #8
 8003242:	69b9      	ldr	r1, [r7, #24]
 8003244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0203 	and.w	r2, r3, #3
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80b4 	beq.w	80033f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b60      	ldr	r3, [pc, #384]	@ (8003410 <HAL_GPIO_Init+0x30c>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	4a5f      	ldr	r2, [pc, #380]	@ (8003410 <HAL_GPIO_Init+0x30c>)
 8003294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003298:	6453      	str	r3, [r2, #68]	@ 0x44
 800329a:	4b5d      	ldr	r3, [pc, #372]	@ (8003410 <HAL_GPIO_Init+0x30c>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003414 <HAL_GPIO_Init+0x310>)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	3302      	adds	r3, #2
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a52      	ldr	r2, [pc, #328]	@ (8003418 <HAL_GPIO_Init+0x314>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02b      	beq.n	800332a <HAL_GPIO_Init+0x226>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a51      	ldr	r2, [pc, #324]	@ (800341c <HAL_GPIO_Init+0x318>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d025      	beq.n	8003326 <HAL_GPIO_Init+0x222>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a50      	ldr	r2, [pc, #320]	@ (8003420 <HAL_GPIO_Init+0x31c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01f      	beq.n	8003322 <HAL_GPIO_Init+0x21e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003424 <HAL_GPIO_Init+0x320>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <HAL_GPIO_Init+0x21a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003428 <HAL_GPIO_Init+0x324>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0x216>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4d      	ldr	r2, [pc, #308]	@ (800342c <HAL_GPIO_Init+0x328>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00d      	beq.n	8003316 <HAL_GPIO_Init+0x212>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003430 <HAL_GPIO_Init+0x32c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <HAL_GPIO_Init+0x20e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4b      	ldr	r2, [pc, #300]	@ (8003434 <HAL_GPIO_Init+0x330>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_GPIO_Init+0x20a>
 800330a:	2307      	movs	r3, #7
 800330c:	e00e      	b.n	800332c <HAL_GPIO_Init+0x228>
 800330e:	2308      	movs	r3, #8
 8003310:	e00c      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003312:	2306      	movs	r3, #6
 8003314:	e00a      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003316:	2305      	movs	r3, #5
 8003318:	e008      	b.n	800332c <HAL_GPIO_Init+0x228>
 800331a:	2304      	movs	r3, #4
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x228>
 800331e:	2303      	movs	r3, #3
 8003320:	e004      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_Init+0x228>
 800332a:	2300      	movs	r3, #0
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	f002 0203 	and.w	r2, r2, #3
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800333c:	4935      	ldr	r1, [pc, #212]	@ (8003414 <HAL_GPIO_Init+0x310>)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334a:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <HAL_GPIO_Init+0x334>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336e:	4a32      	ldr	r2, [pc, #200]	@ (8003438 <HAL_GPIO_Init+0x334>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003374:	4b30      	ldr	r3, [pc, #192]	@ (8003438 <HAL_GPIO_Init+0x334>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003398:	4a27      	ldr	r2, [pc, #156]	@ (8003438 <HAL_GPIO_Init+0x334>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339e:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ec:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3301      	adds	r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	f67f ae90 	bls.w	8003120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3724      	adds	r7, #36	@ 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	40013800 	.word	0x40013800
 8003418:	40020000 	.word	0x40020000
 800341c:	40020400 	.word	0x40020400
 8003420:	40020800 	.word	0x40020800
 8003424:	40020c00 	.word	0x40020c00
 8003428:	40021000 	.word	0x40021000
 800342c:	40021400 	.word	0x40021400
 8003430:	40021800 	.word	0x40021800
 8003434:	40021c00 	.word	0x40021c00
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003458:	e003      	b.n	8003462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345a:	887b      	ldrh	r3, [r7, #2]
 800345c:	041a      	lsls	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	619a      	str	r2, [r3, #24]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800347a:	4b08      	ldr	r3, [pc, #32]	@ (800349c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003486:	4a05      	ldr	r2, [pc, #20]	@ (800349c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fabe 	bl	8000a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40013c00 	.word	0x40013c00

080034a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e101      	b.n	80036b6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f005 fc37 	bl	8008d40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2203      	movs	r2, #3
 80034d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034e0:	d102      	bne.n	80034e8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 ffb0 	bl	8005452 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	7c1a      	ldrb	r2, [r3, #16]
 80034fa:	f88d 2000 	strb.w	r2, [sp]
 80034fe:	3304      	adds	r3, #4
 8003500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003502:	f001 fe8f 	bl	8005224 <USB_CoreInit>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0ce      	b.n	80036b6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f001 ffa8 	bl	8005474 <USB_SetCurrentMode>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e0bf      	b.n	80036b6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
 800353a:	e04a      	b.n	80035d2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3315      	adds	r3, #21
 800354c:	2201      	movs	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	3314      	adds	r3, #20
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	b298      	uxth	r0, r3
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	332e      	adds	r3, #46	@ 0x2e
 8003578:	4602      	mov	r2, r0
 800357a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3318      	adds	r3, #24
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	331c      	adds	r3, #28
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	3320      	adds	r3, #32
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3324      	adds	r3, #36	@ 0x24
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	3301      	adds	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	791b      	ldrb	r3, [r3, #4]
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d3af      	bcc.n	800353c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035dc:	2300      	movs	r3, #0
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	e044      	b.n	800366c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	3301      	adds	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	791b      	ldrb	r3, [r3, #4]
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	429a      	cmp	r2, r3
 8003674:	d3b5      	bcc.n	80035e2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	7c1a      	ldrb	r2, [r3, #16]
 800367e:	f88d 2000 	strb.w	r2, [sp]
 8003682:	3304      	adds	r3, #4
 8003684:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003686:	f001 ff41 	bl	800550c <USB_DevInit>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e00c      	b.n	80036b6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 ff8b 	bl	80065ca <USB_DevDisconnect>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_PCD_Start+0x1c>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e022      	b.n	8003720 <HAL_PCD_Start+0x62>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d105      	bne.n	8003702 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fe92 	bl	8005430 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f002 ff39 	bl	8006588 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b08d      	sub	sp, #52	@ 0x34
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f002 fff7 	bl	8006732 <USB_GetMode>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 848c 	bne.w	8004064 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f002 ff5b 	bl	800660c <USB_ReadInterrupts>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8482 	beq.w	8004062 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f002 ff48 	bl	800660c <USB_ReadInterrupts>
 800377c:	4603      	mov	r3, r0
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d107      	bne.n	8003796 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f002 0202 	and.w	r2, r2, #2
 8003794:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f002 ff36 	bl	800660c <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d161      	bne.n	800386e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0210 	bic.w	r2, r2, #16
 80037b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f003 020f 	and.w	r2, r3, #15
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	3304      	adds	r3, #4
 80037d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80037e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037e4:	d124      	bne.n	8003830 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d035      	beq.n	800385e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003800:	b29b      	uxth	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	6a38      	ldr	r0, [r7, #32]
 8003806:	f002 fd6d 	bl	80062e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003816:	441a      	add	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003828:	441a      	add	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	615a      	str	r2, [r3, #20]
 800382e:	e016      	b.n	800385e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003836:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800383a:	d110      	bne.n	800385e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003842:	2208      	movs	r2, #8
 8003844:	4619      	mov	r1, r3
 8003846:	6a38      	ldr	r0, [r7, #32]
 8003848:	f002 fd4c 	bl	80062e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003858:	441a      	add	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0210 	orr.w	r2, r2, #16
 800386c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f002 feca 	bl	800660c <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800387e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003882:	f040 80a7 	bne.w	80039d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f002 fecf 	bl	8006632 <USB_ReadDevAllOutEpInterrupt>
 8003894:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003896:	e099      	b.n	80039cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 808e 	beq.w	80039c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 fef3 	bl	800669a <USB_ReadDevOutEPInterrupt>
 80038b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00c      	beq.n	80038da <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038cc:	461a      	mov	r2, r3
 80038ce:	2301      	movs	r3, #1
 80038d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fea3 	bl	8004620 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00c      	beq.n	80038fe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f0:	461a      	mov	r2, r3
 80038f2:	2308      	movs	r3, #8
 80038f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 ff79 	bl	80047f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003914:	461a      	mov	r2, r3
 8003916:	2310      	movs	r3, #16
 8003918:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d030      	beq.n	8003986 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392c:	2b80      	cmp	r3, #128	@ 0x80
 800392e:	d109      	bne.n	8003944 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800393e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003942:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	3304      	adds	r3, #4
 8003958:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	78db      	ldrb	r3, [r3, #3]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d108      	bne.n	8003974 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2200      	movs	r2, #0
 8003966:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f005 faec 	bl	8008f4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	2302      	movs	r3, #2
 8003984:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800399c:	461a      	mov	r2, r3
 800399e:	2320      	movs	r3, #32
 80039a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b8:	461a      	mov	r2, r3
 80039ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	3301      	adds	r3, #1
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80039cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f47f af62 	bne.w	8003898 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f002 fe17 	bl	800660c <USB_ReadInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039e8:	f040 80db 	bne.w	8003ba2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 fe38 	bl	8006666 <USB_ReadDevAllInEpInterrupt>
 80039f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80039fc:	e0cd      	b.n	8003b9a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80c2 	beq.w	8003b8e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f002 fe5e 	bl	80066d6 <USB_ReadDevInEPInterrupt>
 8003a1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d057      	beq.n	8003ad6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69f9      	ldr	r1, [r7, #28]
 8003a42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a46:	4013      	ands	r3, r2
 8003a48:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a56:	461a      	mov	r2, r3
 8003a58:	2301      	movs	r3, #1
 8003a5a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	799b      	ldrb	r3, [r3, #6]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d132      	bne.n	8003aca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3320      	adds	r3, #32
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4403      	add	r3, r0
 8003a84:	331c      	adds	r3, #28
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4419      	add	r1, r3
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4403      	add	r3, r0
 8003a98:	3320      	adds	r3, #32
 8003a9a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d113      	bne.n	8003aca <HAL_PCD_IRQHandler+0x3a2>
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3324      	adds	r3, #36	@ 0x24
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d108      	bne.n	8003aca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	f002 fe65 	bl	8006794 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f005 f9b6 	bl	8008e42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aec:	461a      	mov	r2, r3
 8003aee:	2308      	movs	r3, #8
 8003af0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b24:	461a      	mov	r2, r3
 8003b26:	2340      	movs	r3, #64	@ 0x40
 8003b28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d023      	beq.n	8003b7c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b36:	6a38      	ldr	r0, [r7, #32]
 8003b38:	f001 fe4c 	bl	80057d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	3310      	adds	r3, #16
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	78db      	ldrb	r3, [r3, #3]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d108      	bne.n	8003b6a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f005 fa03 	bl	8008f70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b76:	461a      	mov	r2, r3
 8003b78:	2302      	movs	r3, #2
 8003b7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fcbd 	bl	8004508 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	3301      	adds	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f47f af2e 	bne.w	80039fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f002 fd30 	bl	800660c <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bb6:	d122      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d108      	bne.n	8003be8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bde:	2100      	movs	r1, #0
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fea3 	bl	800492c <HAL_PCDEx_LPM_Callback>
 8003be6:	e002      	b.n	8003bee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f005 f9a1 	bl	8008f30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f002 fd02 	bl	800660c <USB_ReadInterrupts>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c12:	d112      	bne.n	8003c3a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d102      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f005 f95d 	bl	8008ee4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c38:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f002 fce4 	bl	800660c <USB_ReadInterrupts>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c4e:	f040 80b7 	bne.w	8003dc0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2110      	movs	r1, #16
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fdb1 	bl	80057d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c76:	e046      	b.n	8003d06 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c84:	461a      	mov	r2, r3
 8003c86:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c9c:	0151      	lsls	r1, r2, #5
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ca6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003caa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cbe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cd0:	0151      	lsls	r1, r2, #5
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	440a      	add	r2, r1
 8003cd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cde:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf0:	0151      	lsls	r1, r2, #5
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	440a      	add	r2, r1
 8003cf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cfe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d02:	3301      	adds	r3, #1
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	791b      	ldrb	r3, [r3, #4]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d3b2      	bcc.n	8003c78 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d20:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003d24:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	7bdb      	ldrb	r3, [r3, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d3e:	f043 030b 	orr.w	r3, r3, #11
 8003d42:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d54:	f043 030b 	orr.w	r3, r3, #11
 8003d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d5a:	e015      	b.n	8003d88 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d6e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003d72:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d82:	f043 030b 	orr.w	r3, r3, #11
 8003d86:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d96:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d9a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003daa:	461a      	mov	r2, r3
 8003dac:	f002 fcf2 	bl	8006794 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f002 fc21 	bl	800660c <USB_ReadInterrupts>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd4:	d123      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f002 fcb7 	bl	800674e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f001 fd6e 	bl	80058c6 <USB_GetDevSpeed>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681c      	ldr	r4, [r3, #0]
 8003df6:	f001 fa09 	bl	800520c <HAL_RCC_GetHCLKFreq>
 8003dfa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e00:	461a      	mov	r2, r3
 8003e02:	4620      	mov	r0, r4
 8003e04:	f001 fa72 	bl	80052ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f005 f842 	bl	8008e92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f002 fbf2 	bl	800660c <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d10a      	bne.n	8003e48 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f005 f81f 	bl	8008e76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f002 0208 	and.w	r2, r2, #8
 8003e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f002 fbdd 	bl	800660c <USB_ReadInterrupts>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e58:	2b80      	cmp	r3, #128	@ 0x80
 8003e5a:	d123      	bne.n	8003ea4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e68:	2301      	movs	r3, #1
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6c:	e014      	b.n	8003e98 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d105      	bne.n	8003e92 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fb0a 	bl	80044a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	3301      	adds	r3, #1
 8003e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	791b      	ldrb	r3, [r3, #4]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d3e4      	bcc.n	8003e6e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 fbaf 	bl	800660c <USB_ReadInterrupts>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eb8:	d13c      	bne.n	8003f34 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eba:	2301      	movs	r3, #1
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ebe:	e02b      	b.n	8003f18 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3318      	adds	r3, #24
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d115      	bne.n	8003f12 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ee6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	da12      	bge.n	8003f12 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	3317      	adds	r3, #23
 8003efc:	2201      	movs	r2, #1
 8003efe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 faca 	bl	80044a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	3301      	adds	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	791b      	ldrb	r3, [r3, #4]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d3cd      	bcc.n	8003ec0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f002 fb67 	bl	800660c <USB_ReadInterrupts>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f48:	d156      	bne.n	8003ff8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4e:	e045      	b.n	8003fdc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d12e      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da2b      	bge.n	8003fd6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003f8a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d121      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fd2:	6053      	str	r3, [r2, #4]
            break;
 8003fd4:	e008      	b.n	8003fe8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	3301      	adds	r3, #1
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	791b      	ldrb	r3, [r3, #4]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d3b3      	bcc.n	8003f50 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f002 fb05 	bl	800660c <USB_ReadInterrupts>
 8004002:	4603      	mov	r3, r0
 8004004:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400c:	d10a      	bne.n	8004024 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f004 ffc0 	bl	8008f94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004022:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f002 faef 	bl	800660c <USB_ReadInterrupts>
 800402e:	4603      	mov	r3, r0
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d115      	bne.n	8004064 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f004 ffb0 	bl	8008fb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	e000      	b.n	8004064 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004062:	bf00      	nop
    }
  }
}
 8004064:	3734      	adds	r7, #52	@ 0x34
 8004066:	46bd      	mov	sp, r7
 8004068:	bd90      	pop	{r4, r7, pc}

0800406a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_PCD_SetAddress+0x1a>
 8004080:	2302      	movs	r3, #2
 8004082:	e012      	b.n	80040aa <HAL_PCD_SetAddress+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	78fa      	ldrb	r2, [r7, #3]
 8004090:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f002 fa4e 	bl	800653c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	4608      	mov	r0, r1
 80040bc:	4611      	mov	r1, r2
 80040be:	461a      	mov	r2, r3
 80040c0:	4603      	mov	r3, r0
 80040c2:	70fb      	strb	r3, [r7, #3]
 80040c4:	460b      	mov	r3, r1
 80040c6:	803b      	strh	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	da0f      	bge.n	80040f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	3310      	adds	r3, #16
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
 80040ec:	3304      	adds	r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	705a      	strb	r2, [r3, #1]
 80040f6:	e00f      	b.n	8004118 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	f003 020f 	and.w	r2, r3, #15
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	3304      	adds	r3, #4
 8004110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004124:	883b      	ldrh	r3, [r7, #0]
 8004126:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	78ba      	ldrb	r2, [r7, #2]
 8004132:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004146:	78bb      	ldrb	r3, [r7, #2]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d102      	bne.n	8004152 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_PCD_EP_Open+0xae>
 800415c:	2302      	movs	r3, #2
 800415e:	e00e      	b.n	800417e <HAL_PCD_EP_Open+0xcc>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68f9      	ldr	r1, [r7, #12]
 800416e:	4618      	mov	r0, r3
 8004170:	f001 fbce 	bl	8005910 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800417c:	7afb      	ldrb	r3, [r7, #11]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004196:	2b00      	cmp	r3, #0
 8004198:	da0f      	bge.n	80041ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	4613      	mov	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	3310      	adds	r3, #16
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	705a      	strb	r2, [r3, #1]
 80041b8:	e00f      	b.n	80041da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	3304      	adds	r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_PCD_EP_Close+0x6e>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e00e      	b.n	8004212 <HAL_PCD_EP_Close+0x8c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68f9      	ldr	r1, [r7, #12]
 8004202:	4618      	mov	r0, r3
 8004204:	f001 fc0c 	bl	8005a20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b086      	sub	sp, #24
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	460b      	mov	r3, r1
 8004228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800422a:	7afb      	ldrb	r3, [r7, #11]
 800422c:	f003 020f 	and.w	r2, r3, #15
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	3304      	adds	r3, #4
 8004242:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2200      	movs	r2, #0
 800425a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	b2da      	uxtb	r2, r3
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	799b      	ldrb	r3, [r3, #6]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d102      	bne.n	8004276 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	799b      	ldrb	r3, [r3, #6]
 800427e:	461a      	mov	r2, r3
 8004280:	6979      	ldr	r1, [r7, #20]
 8004282:	f001 fca9 	bl	8005bd8 <USB_EPStartXfer>

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	f003 020f 	and.w	r2, r3, #15
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	460b      	mov	r3, r1
 80042ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042d0:	7afb      	ldrb	r3, [r7, #11]
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	3310      	adds	r3, #16
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	3304      	adds	r3, #4
 80042e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2200      	movs	r2, #0
 80042f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2201      	movs	r2, #1
 80042fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004300:	7afb      	ldrb	r3, [r7, #11]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	b2da      	uxtb	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	799b      	ldrb	r3, [r3, #6]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d102      	bne.n	800431a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	799b      	ldrb	r3, [r3, #6]
 8004322:	461a      	mov	r2, r3
 8004324:	6979      	ldr	r1, [r7, #20]
 8004326:	f001 fc57 	bl	8005bd8 <USB_EPStartXfer>

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	7912      	ldrb	r2, [r2, #4]
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e04f      	b.n	80043f2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004356:	2b00      	cmp	r3, #0
 8004358:	da0f      	bge.n	800437a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 020f 	and.w	r2, r3, #15
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	3310      	adds	r3, #16
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	3304      	adds	r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	705a      	strb	r2, [r3, #1]
 8004378:	e00d      	b.n	8004396 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_PCD_EP_SetStall+0x82>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e01d      	b.n	80043f2 <HAL_PCD_EP_SetStall+0xbe>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68f9      	ldr	r1, [r7, #12]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f001 ffe5 	bl	8006394 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	7999      	ldrb	r1, [r3, #6]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043e2:	461a      	mov	r2, r3
 80043e4:	f002 f9d6 	bl	8006794 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	460b      	mov	r3, r1
 8004404:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	7912      	ldrb	r2, [r2, #4]
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e042      	b.n	800449e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800441c:	2b00      	cmp	r3, #0
 800441e:	da0f      	bge.n	8004440 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	f003 020f 	and.w	r2, r3, #15
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	3310      	adds	r3, #16
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	3304      	adds	r3, #4
 8004436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	705a      	strb	r2, [r3, #1]
 800443e:	e00f      	b.n	8004460 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_PCD_EP_ClrStall+0x86>
 800447c:	2302      	movs	r3, #2
 800447e:	e00e      	b.n	800449e <HAL_PCD_EP_ClrStall+0xa4>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68f9      	ldr	r1, [r7, #12]
 800448e:	4618      	mov	r0, r3
 8004490:	f001 ffee 	bl	8006470 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	460b      	mov	r3, r1
 80044b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	da0c      	bge.n	80044d4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	f003 020f 	and.w	r2, r3, #15
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	3310      	adds	r3, #16
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	3304      	adds	r3, #4
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e00c      	b.n	80044ee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f003 020f 	and.w	r2, r3, #15
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	3304      	adds	r3, #4
 80044ec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68f9      	ldr	r1, [r7, #12]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 fe0d 	bl	8006114 <USB_EPStopXfer>
 80044fa:	4603      	mov	r3, r0
 80044fc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	@ 0x28
 800450c:	af02      	add	r7, sp, #8
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	3310      	adds	r3, #16
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4413      	add	r3, r2
 800452c:	3304      	adds	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	429a      	cmp	r2, r3
 800453a:	d901      	bls.n	8004540 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e06b      	b.n	8004618 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	429a      	cmp	r2, r3
 8004554:	d902      	bls.n	800455c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	3303      	adds	r3, #3
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004564:	e02a      	b.n	80045bc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	429a      	cmp	r2, r3
 800457a:	d902      	bls.n	8004582 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3303      	adds	r3, #3
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	68d9      	ldr	r1, [r3, #12]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	4603      	mov	r3, r0
 800459e:	6978      	ldr	r0, [r7, #20]
 80045a0:	f001 fe62 	bl	8006268 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	441a      	add	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	441a      	add	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d809      	bhi.n	80045e6 <PCD_WriteEmptyTxFifo+0xde>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045da:	429a      	cmp	r2, r3
 80045dc:	d203      	bcs.n	80045e6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1bf      	bne.n	8004566 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d811      	bhi.n	8004616 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	2201      	movs	r2, #1
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	43db      	mvns	r3, r3
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004612:	4013      	ands	r3, r2
 8004614:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	333c      	adds	r3, #60	@ 0x3c
 8004638:	3304      	adds	r3, #4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	799b      	ldrb	r3, [r3, #6]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d17b      	bne.n	800474e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d015      	beq.n	800468c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4a61      	ldr	r2, [pc, #388]	@ (80047e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	f240 80b9 	bls.w	80047dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80b3 	beq.w	80047dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004682:	461a      	mov	r2, r3
 8004684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004688:	6093      	str	r3, [r2, #8]
 800468a:	e0a7      	b.n	80047dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	2320      	movs	r3, #32
 80046a6:	6093      	str	r3, [r2, #8]
 80046a8:	e098      	b.n	80047dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f040 8093 	bne.w	80047dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	4a4b      	ldr	r2, [pc, #300]	@ (80047e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d90f      	bls.n	80046de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d4:	461a      	mov	r2, r3
 80046d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046da:	6093      	str	r3, [r2, #8]
 80046dc:	e07e      	b.n	80047dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	4413      	add	r3, r2
 80046f0:	3304      	adds	r3, #4
 80046f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	0159      	lsls	r1, r3, #5
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	440b      	add	r3, r1
 8004700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d114      	bne.n	8004740 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004728:	461a      	mov	r2, r3
 800472a:	2101      	movs	r1, #1
 800472c:	f002 f832 	bl	8006794 <USB_EP0_OutStart>
 8004730:	e006      	b.n	8004740 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	441a      	add	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f004 fb60 	bl	8008e0c <HAL_PCD_DataOutStageCallback>
 800474c:	e046      	b.n	80047dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	4a26      	ldr	r2, [pc, #152]	@ (80047ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d124      	bne.n	80047a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476c:	461a      	mov	r2, r3
 800476e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004772:	6093      	str	r3, [r2, #8]
 8004774:	e032      	b.n	80047dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478c:	461a      	mov	r2, r3
 800478e:	2320      	movs	r3, #32
 8004790:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f004 fb37 	bl	8008e0c <HAL_PCD_DataOutStageCallback>
 800479e:	e01d      	b.n	80047dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d114      	bne.n	80047d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d108      	bne.n	80047d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047c8:	461a      	mov	r2, r3
 80047ca:	2100      	movs	r1, #0
 80047cc:	f001 ffe2 	bl	8006794 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f004 fb18 	bl	8008e0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	4f54300a 	.word	0x4f54300a
 80047ec:	4f54310a 	.word	0x4f54310a

080047f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	333c      	adds	r3, #60	@ 0x3c
 8004808:	3304      	adds	r3, #4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a15      	ldr	r2, [pc, #84]	@ (8004878 <PCD_EP_OutSetupPacket_int+0x88>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d90e      	bls.n	8004844 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483c:	461a      	mov	r2, r3
 800483e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004842:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f004 facf 	bl	8008de8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4a0a      	ldr	r2, [pc, #40]	@ (8004878 <PCD_EP_OutSetupPacket_int+0x88>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d90c      	bls.n	800486c <PCD_EP_OutSetupPacket_int+0x7c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	799b      	ldrb	r3, [r3, #6]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d108      	bne.n	800486c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004864:	461a      	mov	r2, r3
 8004866:	2101      	movs	r1, #1
 8004868:	f001 ff94 	bl	8006794 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	4f54300a 	.word	0x4f54300a

0800487c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
 8004888:	4613      	mov	r3, r2
 800488a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d107      	bne.n	80048aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800489a:	883b      	ldrh	r3, [r7, #0]
 800489c:	0419      	lsls	r1, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048a8:	e028      	b.n	80048fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	4413      	add	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048b8:	2300      	movs	r3, #0
 80048ba:	73fb      	strb	r3, [r7, #15]
 80048bc:	e00d      	b.n	80048da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	3340      	adds	r3, #64	@ 0x40
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	4413      	add	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	3301      	adds	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	3b01      	subs	r3, #1
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d3ec      	bcc.n	80048be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048e4:	883b      	ldrh	r3, [r7, #0]
 80048e6:	0418      	lsls	r0, r3, #16
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6819      	ldr	r1, [r3, #0]
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	4302      	orrs	r2, r0
 80048f4:	3340      	adds	r3, #64	@ 0x40
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	887a      	ldrh	r2, [r7, #2]
 800491c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e267      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d075      	beq.n	8004a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004962:	4b88      	ldr	r3, [pc, #544]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b04      	cmp	r3, #4
 800496c:	d00c      	beq.n	8004988 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496e:	4b85      	ldr	r3, [pc, #532]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004976:	2b08      	cmp	r3, #8
 8004978:	d112      	bne.n	80049a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800497a:	4b82      	ldr	r3, [pc, #520]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004986:	d10b      	bne.n	80049a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004988:	4b7e      	ldr	r3, [pc, #504]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d05b      	beq.n	8004a4c <HAL_RCC_OscConfig+0x108>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d157      	bne.n	8004a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e242      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a8:	d106      	bne.n	80049b8 <HAL_RCC_OscConfig+0x74>
 80049aa:	4b76      	ldr	r3, [pc, #472]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a75      	ldr	r2, [pc, #468]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e01d      	b.n	80049f4 <HAL_RCC_OscConfig+0xb0>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0x98>
 80049c2:	4b70      	ldr	r3, [pc, #448]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e00b      	b.n	80049f4 <HAL_RCC_OscConfig+0xb0>
 80049dc:	4b69      	ldr	r3, [pc, #420]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a68      	ldr	r2, [pc, #416]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b66      	ldr	r3, [pc, #408]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a65      	ldr	r2, [pc, #404]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d013      	beq.n	8004a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7fe fa64 	bl	8002ec8 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a04:	f7fe fa60 	bl	8002ec8 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b64      	cmp	r3, #100	@ 0x64
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e207      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a16:	4b5b      	ldr	r3, [pc, #364]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0xc0>
 8004a22:	e014      	b.n	8004a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fe fa50 	bl	8002ec8 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fe fa4c 	bl	8002ec8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	@ 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e1f3      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3e:	4b51      	ldr	r3, [pc, #324]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0xe8>
 8004a4a:	e000      	b.n	8004a4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d063      	beq.n	8004b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a66:	4b47      	ldr	r3, [pc, #284]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d11c      	bne.n	8004aac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a72:	4b44      	ldr	r3, [pc, #272]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d116      	bne.n	8004aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7e:	4b41      	ldr	r3, [pc, #260]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <HAL_RCC_OscConfig+0x152>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d001      	beq.n	8004a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e1c7      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a96:	4b3b      	ldr	r3, [pc, #236]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	4937      	ldr	r1, [pc, #220]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aaa:	e03a      	b.n	8004b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d020      	beq.n	8004af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab4:	4b34      	ldr	r3, [pc, #208]	@ (8004b88 <HAL_RCC_OscConfig+0x244>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fe fa05 	bl	8002ec8 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac2:	f7fe fa01 	bl	8002ec8 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e1a8      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f0      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae0:	4b28      	ldr	r3, [pc, #160]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4925      	ldr	r1, [pc, #148]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	600b      	str	r3, [r1, #0]
 8004af4:	e015      	b.n	8004b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af6:	4b24      	ldr	r3, [pc, #144]	@ (8004b88 <HAL_RCC_OscConfig+0x244>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fe f9e4 	bl	8002ec8 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b04:	f7fe f9e0 	bl	8002ec8 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e187      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b16:	4b1b      	ldr	r3, [pc, #108]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d036      	beq.n	8004b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d016      	beq.n	8004b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b36:	4b15      	ldr	r3, [pc, #84]	@ (8004b8c <HAL_RCC_OscConfig+0x248>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fe f9c4 	bl	8002ec8 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b44:	f7fe f9c0 	bl	8002ec8 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e167      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b56:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0x200>
 8004b62:	e01b      	b.n	8004b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b64:	4b09      	ldr	r3, [pc, #36]	@ (8004b8c <HAL_RCC_OscConfig+0x248>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6a:	f7fe f9ad 	bl	8002ec8 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b70:	e00e      	b.n	8004b90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b72:	f7fe f9a9 	bl	8002ec8 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d907      	bls.n	8004b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e150      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
 8004b84:	40023800 	.word	0x40023800
 8004b88:	42470000 	.word	0x42470000
 8004b8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b90:	4b88      	ldr	r3, [pc, #544]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ea      	bne.n	8004b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8097 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bae:	4b81      	ldr	r3, [pc, #516]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10f      	bne.n	8004bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	4b7d      	ldr	r3, [pc, #500]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	4a7c      	ldr	r2, [pc, #496]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bca:	4b7a      	ldr	r3, [pc, #488]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd2:	60bb      	str	r3, [r7, #8]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bda:	4b77      	ldr	r3, [pc, #476]	@ (8004db8 <HAL_RCC_OscConfig+0x474>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d118      	bne.n	8004c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be6:	4b74      	ldr	r3, [pc, #464]	@ (8004db8 <HAL_RCC_OscConfig+0x474>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a73      	ldr	r2, [pc, #460]	@ (8004db8 <HAL_RCC_OscConfig+0x474>)
 8004bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf2:	f7fe f969 	bl	8002ec8 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfa:	f7fe f965 	bl	8002ec8 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e10c      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8004db8 <HAL_RCC_OscConfig+0x474>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d106      	bne.n	8004c2e <HAL_RCC_OscConfig+0x2ea>
 8004c20:	4b64      	ldr	r3, [pc, #400]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c24:	4a63      	ldr	r2, [pc, #396]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c2c:	e01c      	b.n	8004c68 <HAL_RCC_OscConfig+0x324>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b05      	cmp	r3, #5
 8004c34:	d10c      	bne.n	8004c50 <HAL_RCC_OscConfig+0x30c>
 8004c36:	4b5f      	ldr	r3, [pc, #380]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3a:	4a5e      	ldr	r2, [pc, #376]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	f043 0304 	orr.w	r3, r3, #4
 8004c40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c42:	4b5c      	ldr	r3, [pc, #368]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c46:	4a5b      	ldr	r2, [pc, #364]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c4e:	e00b      	b.n	8004c68 <HAL_RCC_OscConfig+0x324>
 8004c50:	4b58      	ldr	r3, [pc, #352]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c54:	4a57      	ldr	r2, [pc, #348]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c5c:	4b55      	ldr	r3, [pc, #340]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c60:	4a54      	ldr	r2, [pc, #336]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c62:	f023 0304 	bic.w	r3, r3, #4
 8004c66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d015      	beq.n	8004c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c70:	f7fe f92a 	bl	8002ec8 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c78:	f7fe f926 	bl	8002ec8 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e0cb      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8e:	4b49      	ldr	r3, [pc, #292]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0ee      	beq.n	8004c78 <HAL_RCC_OscConfig+0x334>
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9c:	f7fe f914 	bl	8002ec8 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca4:	f7fe f910 	bl	8002ec8 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e0b5      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cba:	4b3e      	ldr	r3, [pc, #248]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1ee      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ccc:	4b39      	ldr	r3, [pc, #228]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd0:	4a38      	ldr	r2, [pc, #224]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80a1 	beq.w	8004e24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce2:	4b34      	ldr	r3, [pc, #208]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d05c      	beq.n	8004da8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d141      	bne.n	8004d7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf6:	4b31      	ldr	r3, [pc, #196]	@ (8004dbc <HAL_RCC_OscConfig+0x478>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fe f8e4 	bl	8002ec8 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fe f8e0 	bl	8002ec8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e087      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d16:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	019b      	lsls	r3, r3, #6
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	041b      	lsls	r3, r3, #16
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	491b      	ldr	r1, [pc, #108]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dbc <HAL_RCC_OscConfig+0x478>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d52:	f7fe f8b9 	bl	8002ec8 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5a:	f7fe f8b5 	bl	8002ec8 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e05c      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6c:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x416>
 8004d78:	e054      	b.n	8004e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7a:	4b10      	ldr	r3, [pc, #64]	@ (8004dbc <HAL_RCC_OscConfig+0x478>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fe f8a2 	bl	8002ec8 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d88:	f7fe f89e 	bl	8002ec8 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e045      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	4b06      	ldr	r3, [pc, #24]	@ (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x444>
 8004da6:	e03d      	b.n	8004e24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e038      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40007000 	.word	0x40007000
 8004dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e30 <HAL_RCC_OscConfig+0x4ec>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d028      	beq.n	8004e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d121      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d11a      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004df0:	4013      	ands	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d111      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d107      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e000      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800

08004e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0cc      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e48:	4b68      	ldr	r3, [pc, #416]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d90c      	bls.n	8004e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b65      	ldr	r3, [pc, #404]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	4b63      	ldr	r3, [pc, #396]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0b8      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d020      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e88:	4b59      	ldr	r3, [pc, #356]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4a58      	ldr	r2, [pc, #352]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea0:	4b53      	ldr	r3, [pc, #332]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4a52      	ldr	r2, [pc, #328]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eac:	4b50      	ldr	r3, [pc, #320]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	494d      	ldr	r1, [pc, #308]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d044      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d107      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed2:	4b47      	ldr	r3, [pc, #284]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d119      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e07f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d107      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e06f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f02:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e067      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f12:	4b37      	ldr	r3, [pc, #220]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f023 0203 	bic.w	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4934      	ldr	r1, [pc, #208]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f24:	f7fd ffd0 	bl	8002ec8 <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f2c:	f7fd ffcc 	bl	8002ec8 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e04f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f42:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 020c 	and.w	r2, r3, #12
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d1eb      	bne.n	8004f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f54:	4b25      	ldr	r3, [pc, #148]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d20c      	bcs.n	8004f7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b22      	ldr	r3, [pc, #136]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b20      	ldr	r3, [pc, #128]	@ (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e032      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f88:	4b19      	ldr	r3, [pc, #100]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4916      	ldr	r1, [pc, #88]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa6:	4b12      	ldr	r3, [pc, #72]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	490e      	ldr	r1, [pc, #56]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fba:	f000 f821 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	490a      	ldr	r1, [pc, #40]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004fcc:	5ccb      	ldrb	r3, [r1, r3]
 8004fce:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd2:	4a09      	ldr	r2, [pc, #36]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004fd6:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fd ff30 	bl	8002e40 <HAL_InitTick>

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023c00 	.word	0x40023c00
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	0800a064 	.word	0x0800a064
 8004ff8:	20000008 	.word	0x20000008
 8004ffc:	2000000c 	.word	0x2000000c

08005000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005004:	b094      	sub	sp, #80	@ 0x50
 8005006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005018:	4b79      	ldr	r3, [pc, #484]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 030c 	and.w	r3, r3, #12
 8005020:	2b08      	cmp	r3, #8
 8005022:	d00d      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0x40>
 8005024:	2b08      	cmp	r3, #8
 8005026:	f200 80e1 	bhi.w	80051ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0x34>
 800502e:	2b04      	cmp	r3, #4
 8005030:	d003      	beq.n	800503a <HAL_RCC_GetSysClockFreq+0x3a>
 8005032:	e0db      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005034:	4b73      	ldr	r3, [pc, #460]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x204>)
 8005036:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005038:	e0db      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800503a:	4b73      	ldr	r3, [pc, #460]	@ (8005208 <HAL_RCC_GetSysClockFreq+0x208>)
 800503c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800503e:	e0d8      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005040:	4b6f      	ldr	r3, [pc, #444]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005048:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800504a:	4b6d      	ldr	r3, [pc, #436]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d063      	beq.n	800511e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005056:	4b6a      	ldr	r3, [pc, #424]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	2200      	movs	r2, #0
 800505e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005060:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005068:	633b      	str	r3, [r7, #48]	@ 0x30
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	@ 0x34
 800506e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005072:	4622      	mov	r2, r4
 8005074:	462b      	mov	r3, r5
 8005076:	f04f 0000 	mov.w	r0, #0
 800507a:	f04f 0100 	mov.w	r1, #0
 800507e:	0159      	lsls	r1, r3, #5
 8005080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005084:	0150      	lsls	r0, r2, #5
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4621      	mov	r1, r4
 800508c:	1a51      	subs	r1, r2, r1
 800508e:	6139      	str	r1, [r7, #16]
 8005090:	4629      	mov	r1, r5
 8005092:	eb63 0301 	sbc.w	r3, r3, r1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050a4:	4659      	mov	r1, fp
 80050a6:	018b      	lsls	r3, r1, #6
 80050a8:	4651      	mov	r1, sl
 80050aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050ae:	4651      	mov	r1, sl
 80050b0:	018a      	lsls	r2, r1, #6
 80050b2:	4651      	mov	r1, sl
 80050b4:	ebb2 0801 	subs.w	r8, r2, r1
 80050b8:	4659      	mov	r1, fp
 80050ba:	eb63 0901 	sbc.w	r9, r3, r1
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050d2:	4690      	mov	r8, r2
 80050d4:	4699      	mov	r9, r3
 80050d6:	4623      	mov	r3, r4
 80050d8:	eb18 0303 	adds.w	r3, r8, r3
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	462b      	mov	r3, r5
 80050e0:	eb49 0303 	adc.w	r3, r9, r3
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050f2:	4629      	mov	r1, r5
 80050f4:	024b      	lsls	r3, r1, #9
 80050f6:	4621      	mov	r1, r4
 80050f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050fc:	4621      	mov	r1, r4
 80050fe:	024a      	lsls	r2, r1, #9
 8005100:	4610      	mov	r0, r2
 8005102:	4619      	mov	r1, r3
 8005104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005106:	2200      	movs	r2, #0
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800510a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800510c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005110:	f7fb f8b6 	bl	8000280 <__aeabi_uldivmod>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4613      	mov	r3, r2
 800511a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800511c:	e058      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800511e:	4b38      	ldr	r3, [pc, #224]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	099b      	lsrs	r3, r3, #6
 8005124:	2200      	movs	r2, #0
 8005126:	4618      	mov	r0, r3
 8005128:	4611      	mov	r1, r2
 800512a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800512e:	623b      	str	r3, [r7, #32]
 8005130:	2300      	movs	r3, #0
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24
 8005134:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	f04f 0000 	mov.w	r0, #0
 8005140:	f04f 0100 	mov.w	r1, #0
 8005144:	0159      	lsls	r1, r3, #5
 8005146:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800514a:	0150      	lsls	r0, r2, #5
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4641      	mov	r1, r8
 8005152:	ebb2 0a01 	subs.w	sl, r2, r1
 8005156:	4649      	mov	r1, r9
 8005158:	eb63 0b01 	sbc.w	fp, r3, r1
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005168:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800516c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005170:	ebb2 040a 	subs.w	r4, r2, sl
 8005174:	eb63 050b 	sbc.w	r5, r3, fp
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	00eb      	lsls	r3, r5, #3
 8005182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005186:	00e2      	lsls	r2, r4, #3
 8005188:	4614      	mov	r4, r2
 800518a:	461d      	mov	r5, r3
 800518c:	4643      	mov	r3, r8
 800518e:	18e3      	adds	r3, r4, r3
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	464b      	mov	r3, r9
 8005194:	eb45 0303 	adc.w	r3, r5, r3
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051a6:	4629      	mov	r1, r5
 80051a8:	028b      	lsls	r3, r1, #10
 80051aa:	4621      	mov	r1, r4
 80051ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051b0:	4621      	mov	r1, r4
 80051b2:	028a      	lsls	r2, r1, #10
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ba:	2200      	movs	r2, #0
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	61fa      	str	r2, [r7, #28]
 80051c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051c4:	f7fb f85c 	bl	8000280 <__aeabi_uldivmod>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4613      	mov	r3, r2
 80051ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	3301      	adds	r3, #1
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80051e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051ea:	e002      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051ec:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3750      	adds	r7, #80	@ 0x50
 80051f8:	46bd      	mov	sp, r7
 80051fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	00f42400 	.word	0x00f42400
 8005208:	007a1200 	.word	0x007a1200

0800520c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005210:	4b03      	ldr	r3, [pc, #12]	@ (8005220 <HAL_RCC_GetHCLKFreq+0x14>)
 8005212:	681b      	ldr	r3, [r3, #0]
}
 8005214:	4618      	mov	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20000008 	.word	0x20000008

08005224 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005224:	b084      	sub	sp, #16
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	f107 001c 	add.w	r0, r7, #28
 8005232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005236:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800523a:	2b01      	cmp	r3, #1
 800523c:	d123      	bne.n	8005286 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005242:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005266:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800526a:	2b01      	cmp	r3, #1
 800526c:	d105      	bne.n	800527a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 fae8 	bl	8006850 <USB_CoreReset>
 8005280:	4603      	mov	r3, r0
 8005282:	73fb      	strb	r3, [r7, #15]
 8005284:	e01b      	b.n	80052be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 fadc 	bl	8006850 <USB_CoreReset>
 8005298:	4603      	mov	r3, r0
 800529a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800529c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80052b0:	e005      	b.n	80052be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052be:	7fbb      	ldrb	r3, [r7, #30]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10b      	bne.n	80052dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f043 0206 	orr.w	r2, r3, #6
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052e8:	b004      	add	sp, #16
 80052ea:	4770      	bx	lr

080052ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4613      	mov	r3, r2
 80052f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d165      	bne.n	80053cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a41      	ldr	r2, [pc, #260]	@ (8005408 <USB_SetTurnaroundTime+0x11c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d906      	bls.n	8005316 <USB_SetTurnaroundTime+0x2a>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a40      	ldr	r2, [pc, #256]	@ (800540c <USB_SetTurnaroundTime+0x120>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d202      	bcs.n	8005316 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005310:	230f      	movs	r3, #15
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e062      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4a3c      	ldr	r2, [pc, #240]	@ (800540c <USB_SetTurnaroundTime+0x120>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d306      	bcc.n	800532c <USB_SetTurnaroundTime+0x40>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4a3b      	ldr	r2, [pc, #236]	@ (8005410 <USB_SetTurnaroundTime+0x124>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d202      	bcs.n	800532c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005326:	230e      	movs	r3, #14
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e057      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a38      	ldr	r2, [pc, #224]	@ (8005410 <USB_SetTurnaroundTime+0x124>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d306      	bcc.n	8005342 <USB_SetTurnaroundTime+0x56>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a37      	ldr	r2, [pc, #220]	@ (8005414 <USB_SetTurnaroundTime+0x128>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d202      	bcs.n	8005342 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800533c:	230d      	movs	r3, #13
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	e04c      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4a33      	ldr	r2, [pc, #204]	@ (8005414 <USB_SetTurnaroundTime+0x128>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d306      	bcc.n	8005358 <USB_SetTurnaroundTime+0x6c>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4a32      	ldr	r2, [pc, #200]	@ (8005418 <USB_SetTurnaroundTime+0x12c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d802      	bhi.n	8005358 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005352:	230c      	movs	r3, #12
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e041      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4a2f      	ldr	r2, [pc, #188]	@ (8005418 <USB_SetTurnaroundTime+0x12c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d906      	bls.n	800536e <USB_SetTurnaroundTime+0x82>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a2e      	ldr	r2, [pc, #184]	@ (800541c <USB_SetTurnaroundTime+0x130>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d802      	bhi.n	800536e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005368:	230b      	movs	r3, #11
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e036      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4a2a      	ldr	r2, [pc, #168]	@ (800541c <USB_SetTurnaroundTime+0x130>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d906      	bls.n	8005384 <USB_SetTurnaroundTime+0x98>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4a29      	ldr	r2, [pc, #164]	@ (8005420 <USB_SetTurnaroundTime+0x134>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d802      	bhi.n	8005384 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800537e:	230a      	movs	r3, #10
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e02b      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4a26      	ldr	r2, [pc, #152]	@ (8005420 <USB_SetTurnaroundTime+0x134>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d906      	bls.n	800539a <USB_SetTurnaroundTime+0xae>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4a25      	ldr	r2, [pc, #148]	@ (8005424 <USB_SetTurnaroundTime+0x138>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d202      	bcs.n	800539a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005394:	2309      	movs	r3, #9
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e020      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4a21      	ldr	r2, [pc, #132]	@ (8005424 <USB_SetTurnaroundTime+0x138>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d306      	bcc.n	80053b0 <USB_SetTurnaroundTime+0xc4>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4a20      	ldr	r2, [pc, #128]	@ (8005428 <USB_SetTurnaroundTime+0x13c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d802      	bhi.n	80053b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053aa:	2308      	movs	r3, #8
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e015      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005428 <USB_SetTurnaroundTime+0x13c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d906      	bls.n	80053c6 <USB_SetTurnaroundTime+0xda>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4a1c      	ldr	r2, [pc, #112]	@ (800542c <USB_SetTurnaroundTime+0x140>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d202      	bcs.n	80053c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053c0:	2307      	movs	r3, #7
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	e00a      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053c6:	2306      	movs	r3, #6
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e007      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053d2:	2309      	movs	r3, #9
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e001      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053d8:	2309      	movs	r3, #9
 80053da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	00d8acbf 	.word	0x00d8acbf
 800540c:	00e4e1c0 	.word	0x00e4e1c0
 8005410:	00f42400 	.word	0x00f42400
 8005414:	01067380 	.word	0x01067380
 8005418:	011a499f 	.word	0x011a499f
 800541c:	01312cff 	.word	0x01312cff
 8005420:	014ca43f 	.word	0x014ca43f
 8005424:	016e3600 	.word	0x016e3600
 8005428:	01a6ab1f 	.word	0x01a6ab1f
 800542c:	01e84800 	.word	0x01e84800

08005430 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f043 0201 	orr.w	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f023 0201 	bic.w	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d115      	bne.n	80054c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054a2:	200a      	movs	r0, #10
 80054a4:	f7fc f949 	bl	800173a <HAL_Delay>
      ms += 10U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	330a      	adds	r3, #10
 80054ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f001 f93f 	bl	8006732 <USB_GetMode>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d01e      	beq.n	80054f8 <USB_SetCurrentMode+0x84>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80054be:	d9f0      	bls.n	80054a2 <USB_SetCurrentMode+0x2e>
 80054c0:	e01a      	b.n	80054f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d115      	bne.n	80054f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054d4:	200a      	movs	r0, #10
 80054d6:	f7fc f930 	bl	800173a <HAL_Delay>
      ms += 10U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	330a      	adds	r3, #10
 80054de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 f926 	bl	8006732 <USB_GetMode>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <USB_SetCurrentMode+0x84>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80054f0:	d9f0      	bls.n	80054d4 <USB_SetCurrentMode+0x60>
 80054f2:	e001      	b.n	80054f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e005      	b.n	8005504 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80054fc:	d101      	bne.n	8005502 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800550c:	b084      	sub	sp, #16
 800550e:	b580      	push	{r7, lr}
 8005510:	b086      	sub	sp, #24
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800551a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005526:	2300      	movs	r3, #0
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	e009      	b.n	8005540 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	3340      	adds	r3, #64	@ 0x40
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	2200      	movs	r2, #0
 8005538:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	3301      	adds	r3, #1
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b0e      	cmp	r3, #14
 8005544:	d9f2      	bls.n	800552c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005546:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800554a:	2b00      	cmp	r3, #0
 800554c:	d11c      	bne.n	8005588 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800555c:	f043 0302 	orr.w	r3, r3, #2
 8005560:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005572:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38
 8005586:	e00b      	b.n	80055a0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d10d      	bne.n	80055d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055bc:	2100      	movs	r1, #0
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f968 	bl	8005894 <USB_SetDevSpeed>
 80055c4:	e008      	b.n	80055d8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055c6:	2101      	movs	r1, #1
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f963 	bl	8005894 <USB_SetDevSpeed>
 80055ce:	e003      	b.n	80055d8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055d0:	2103      	movs	r1, #3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f95e 	bl	8005894 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055d8:	2110      	movs	r1, #16
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8fa 	bl	80057d4 <USB_FlushTxFifo>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f924 	bl	8005838 <USB_FlushRxFifo>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005600:	461a      	mov	r2, r3
 8005602:	2300      	movs	r3, #0
 8005604:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560c:	461a      	mov	r2, r3
 800560e:	2300      	movs	r3, #0
 8005610:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005618:	461a      	mov	r2, r3
 800561a:	2300      	movs	r3, #0
 800561c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e043      	b.n	80056ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005636:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800563a:	d118      	bne.n	800566e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800564e:	461a      	mov	r2, r3
 8005650:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e013      	b.n	8005680 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005664:	461a      	mov	r2, r3
 8005666:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	e008      	b.n	8005680 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567a:	461a      	mov	r2, r3
 800567c:	2300      	movs	r3, #0
 800567e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568c:	461a      	mov	r2, r3
 800568e:	2300      	movs	r3, #0
 8005690:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569e:	461a      	mov	r2, r3
 80056a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	3301      	adds	r3, #1
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056b0:	461a      	mov	r2, r3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d3b5      	bcc.n	8005624 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e043      	b.n	8005746 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056d4:	d118      	bne.n	8005708 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e8:	461a      	mov	r2, r3
 80056ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	e013      	b.n	800571a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fe:	461a      	mov	r2, r3
 8005700:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e008      	b.n	800571a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005714:	461a      	mov	r2, r3
 8005716:	2300      	movs	r3, #0
 8005718:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	461a      	mov	r2, r3
 8005728:	2300      	movs	r3, #0
 800572a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005738:	461a      	mov	r2, r3
 800573a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800573e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3301      	adds	r3, #1
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800574a:	461a      	mov	r2, r3
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4293      	cmp	r3, r2
 8005750:	d3b5      	bcc.n	80056be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005764:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005772:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005774:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f043 0210 	orr.w	r2, r3, #16
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	4b10      	ldr	r3, [pc, #64]	@ (80057d0 <USB_DevInit+0x2c4>)
 800578e:	4313      	orrs	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005794:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f043 0208 	orr.w	r2, r3, #8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d107      	bne.n	80057c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057cc:	b004      	add	sp, #16
 80057ce:	4770      	bx	lr
 80057d0:	803c3800 	.word	0x803c3800

080057d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057ee:	d901      	bls.n	80057f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e01b      	b.n	800582c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	daf2      	bge.n	80057e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	019b      	lsls	r3, r3, #6
 8005804:	f043 0220 	orr.w	r2, r3, #32
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3301      	adds	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005818:	d901      	bls.n	800581e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e006      	b.n	800582c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b20      	cmp	r3, #32
 8005828:	d0f0      	beq.n	800580c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005850:	d901      	bls.n	8005856 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e018      	b.n	8005888 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	daf2      	bge.n	8005844 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2210      	movs	r2, #16
 8005866:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005874:	d901      	bls.n	800587a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e006      	b.n	8005888 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0310 	and.w	r3, r3, #16
 8005882:	2b10      	cmp	r3, #16
 8005884:	d0f0      	beq.n	8005868 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058b4:	4313      	orrs	r3, r2
 80058b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0306 	and.w	r3, r3, #6
 80058de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058e6:	2300      	movs	r3, #0
 80058e8:	75fb      	strb	r3, [r7, #23]
 80058ea:	e00a      	b.n	8005902 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d002      	beq.n	80058f8 <USB_GetDevSpeed+0x32>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d102      	bne.n	80058fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058f8:	2302      	movs	r3, #2
 80058fa:	75fb      	strb	r3, [r7, #23]
 80058fc:	e001      	b.n	8005902 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058fe:	230f      	movs	r3, #15
 8005900:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005902:	7dfb      	ldrb	r3, [r7, #23]
}
 8005904:	4618      	mov	r0, r3
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d13a      	bne.n	80059a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f303 	lsl.w	r3, r1, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	68f9      	ldr	r1, [r7, #12]
 8005946:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800594a:	4313      	orrs	r3, r2
 800594c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d155      	bne.n	8005a10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	791b      	ldrb	r3, [r3, #4]
 800597e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005980:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	059b      	lsls	r3, r3, #22
 8005986:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005988:	4313      	orrs	r3, r2
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800599a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	e036      	b.n	8005a10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	2101      	movs	r1, #1
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d11a      	bne.n	8005a10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	791b      	ldrb	r3, [r3, #4]
 80059f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059f6:	430b      	orrs	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d161      	bne.n	8005b00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a52:	d11f      	bne.n	8005a94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	0159      	lsls	r1, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	440b      	add	r3, r1
 8005af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af6:	4619      	mov	r1, r3
 8005af8:	4b35      	ldr	r3, [pc, #212]	@ (8005bd0 <USB_DeactivateEndpoint+0x1b0>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]
 8005afe:	e060      	b.n	8005bc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b16:	d11f      	bne.n	8005b58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	2101      	movs	r1, #1
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	43db      	mvns	r3, r3
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b78:	4013      	ands	r3, r2
 8005b7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	43db      	mvns	r3, r3
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	0159      	lsls	r1, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	440b      	add	r3, r1
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <USB_DeactivateEndpoint+0x1b4>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	ec337800 	.word	0xec337800
 8005bd4:	eff37800 	.word	0xeff37800

08005bd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	@ 0x28
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	f040 817f 	bne.w	8005ef8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d132      	bne.n	8005c68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c60:	0cdb      	lsrs	r3, r3, #19
 8005c62:	04db      	lsls	r3, r3, #19
 8005c64:	6113      	str	r3, [r2, #16]
 8005c66:	e097      	b.n	8005d98 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c82:	0cdb      	lsrs	r3, r3, #19
 8005c84:	04db      	lsls	r3, r3, #19
 8005c86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ca6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005caa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d11a      	bne.n	8005ce8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d903      	bls.n	8005cc6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ce4:	6113      	str	r3, [r2, #16]
 8005ce6:	e044      	b.n	8005d72 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	1e5a      	subs	r2, r3, #1
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	8afb      	ldrh	r3, [r7, #22]
 8005d0e:	04d9      	lsls	r1, r3, #19
 8005d10:	4ba4      	ldr	r3, [pc, #656]	@ (8005fa4 <USB_EPStartXfer+0x3cc>)
 8005d12:	400b      	ands	r3, r1
 8005d14:	69b9      	ldr	r1, [r7, #24]
 8005d16:	0148      	lsls	r0, r1, #5
 8005d18:	69f9      	ldr	r1, [r7, #28]
 8005d1a:	4401      	add	r1, r0
 8005d1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d20:	4313      	orrs	r3, r2
 8005d22:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	791b      	ldrb	r3, [r3, #4]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d122      	bne.n	8005d72 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d46:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005d4a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	8afb      	ldrh	r3, [r7, #22]
 8005d5c:	075b      	lsls	r3, r3, #29
 8005d5e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005d62:	69b9      	ldr	r1, [r7, #24]
 8005d64:	0148      	lsls	r0, r1, #5
 8005d66:	69f9      	ldr	r1, [r7, #28]
 8005d68:	4401      	add	r1, r0
 8005d6a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d88:	69b9      	ldr	r1, [r7, #24]
 8005d8a:	0148      	lsls	r0, r1, #5
 8005d8c:	69f9      	ldr	r1, [r7, #28]
 8005d8e:	4401      	add	r1, r0
 8005d90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d94:	4313      	orrs	r3, r2
 8005d96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d14b      	bne.n	8005e36 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db2:	461a      	mov	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	791b      	ldrb	r3, [r3, #4]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d128      	bne.n	8005e14 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d110      	bne.n	8005df4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e00f      	b.n	8005e14 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e12:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e166      	b.n	8006104 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e50:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e54:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	791b      	ldrb	r3, [r3, #4]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d015      	beq.n	8005e8a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 814e 	beq.w	8006104 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	2101      	movs	r1, #1
 8005e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7e:	69f9      	ldr	r1, [r7, #28]
 8005e80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e84:	4313      	orrs	r3, r2
 8005e86:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e88:	e13c      	b.n	8006104 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d110      	bne.n	8005ebc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e00f      	b.n	8005edc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eda:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	68d9      	ldr	r1, [r3, #12]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	781a      	ldrb	r2, [r3, #0]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	b298      	uxth	r0, r3
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	4603      	mov	r3, r0
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f9b9 	bl	8006268 <USB_WritePacket>
 8005ef6:	e105      	b.n	8006104 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f12:	0cdb      	lsrs	r3, r3, #19
 8005f14:	04db      	lsls	r3, r3, #19
 8005f16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f32:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f36:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f3a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d132      	bne.n	8005fa8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f70:	69b9      	ldr	r1, [r7, #24]
 8005f72:	0148      	lsls	r0, r1, #5
 8005f74:	69f9      	ldr	r1, [r7, #28]
 8005f76:	4401      	add	r1, r0
 8005f78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f9e:	6113      	str	r3, [r2, #16]
 8005fa0:	e062      	b.n	8006068 <USB_EPStartXfer+0x490>
 8005fa2:	bf00      	nop
 8005fa4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d123      	bne.n	8005ff8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	69b9      	ldr	r1, [r7, #24]
 8005fc8:	0148      	lsls	r0, r1, #5
 8005fca:	69f9      	ldr	r1, [r7, #28]
 8005fcc:	4401      	add	r1, r0
 8005fce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ff4:	6113      	str	r3, [r2, #16]
 8005ff6:	e037      	b.n	8006068 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	4413      	add	r3, r2
 8006002:	1e5a      	subs	r2, r3, #1
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	fbb2 f3f3 	udiv	r3, r2, r3
 800600c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	8afa      	ldrh	r2, [r7, #22]
 8006014:	fb03 f202 	mul.w	r2, r3, r2
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	8afb      	ldrh	r3, [r7, #22]
 800602c:	04d9      	lsls	r1, r3, #19
 800602e:	4b38      	ldr	r3, [pc, #224]	@ (8006110 <USB_EPStartXfer+0x538>)
 8006030:	400b      	ands	r3, r1
 8006032:	69b9      	ldr	r1, [r7, #24]
 8006034:	0148      	lsls	r0, r1, #5
 8006036:	69f9      	ldr	r1, [r7, #28]
 8006038:	4401      	add	r1, r0
 800603a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800603e:	4313      	orrs	r3, r2
 8006040:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006058:	69b9      	ldr	r1, [r7, #24]
 800605a:	0148      	lsls	r0, r1, #5
 800605c:	69f9      	ldr	r1, [r7, #28]
 800605e:	4401      	add	r1, r0
 8006060:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006064:	4313      	orrs	r3, r2
 8006066:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d10d      	bne.n	800608a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	68d9      	ldr	r1, [r3, #12]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006086:	460a      	mov	r2, r1
 8006088:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	791b      	ldrb	r3, [r3, #4]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d128      	bne.n	80060e4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d110      	bne.n	80060c4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	e00f      	b.n	80060e4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006102:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	1ff80000 	.word	0x1ff80000

08006114 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d14a      	bne.n	80061c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006146:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800614a:	f040 8086 	bne.w	800625a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	7812      	ldrb	r2, [r2, #0]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800616c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006170:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	7812      	ldrb	r2, [r2, #0]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	440a      	add	r2, r1
 800618c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006190:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006194:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3301      	adds	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d902      	bls.n	80061ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	75fb      	strb	r3, [r7, #23]
          break;
 80061aa:	e056      	b.n	800625a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061c4:	d0e7      	beq.n	8006196 <USB_EPStopXfer+0x82>
 80061c6:	e048      	b.n	800625a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061e0:	d13b      	bne.n	800625a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006200:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006204:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	7812      	ldrb	r2, [r2, #0]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006224:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006228:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006236:	4293      	cmp	r3, r2
 8006238:	d902      	bls.n	8006240 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
          break;
 800623e:	e00c      	b.n	800625a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006254:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006258:	d0e7      	beq.n	800622a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800625a:	7dfb      	ldrb	r3, [r7, #23]
}
 800625c:	4618      	mov	r0, r3
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006268:	b480      	push	{r7}
 800626a:	b089      	sub	sp, #36	@ 0x24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	4611      	mov	r1, r2
 8006274:	461a      	mov	r2, r3
 8006276:	460b      	mov	r3, r1
 8006278:	71fb      	strb	r3, [r7, #7]
 800627a:	4613      	mov	r3, r2
 800627c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006286:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	d123      	bne.n	80062d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800628e:	88bb      	ldrh	r3, [r7, #4]
 8006290:	3303      	adds	r3, #3
 8006292:	089b      	lsrs	r3, r3, #2
 8006294:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006296:	2300      	movs	r3, #0
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	e018      	b.n	80062ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800629c:	79fb      	ldrb	r3, [r7, #7]
 800629e:	031a      	lsls	r2, r3, #12
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062a8:	461a      	mov	r2, r3
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	3301      	adds	r3, #1
 80062b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	3301      	adds	r3, #1
 80062ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	3301      	adds	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	3301      	adds	r3, #1
 80062c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	3301      	adds	r3, #1
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d3e2      	bcc.n	800629c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3724      	adds	r7, #36	@ 0x24
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b08b      	sub	sp, #44	@ 0x2c
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	089b      	lsrs	r3, r3, #2
 80062fe:	b29b      	uxth	r3, r3
 8006300:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	f003 0303 	and.w	r3, r3, #3
 8006308:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800630a:	2300      	movs	r3, #0
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	e014      	b.n	800633a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	601a      	str	r2, [r3, #0]
    pDest++;
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	3301      	adds	r3, #1
 8006320:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	3301      	adds	r3, #1
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	3301      	adds	r3, #1
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	3301      	adds	r3, #1
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	3301      	adds	r3, #1
 8006338:	623b      	str	r3, [r7, #32]
 800633a:	6a3a      	ldr	r2, [r7, #32]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	429a      	cmp	r2, r3
 8006340:	d3e6      	bcc.n	8006310 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006342:	8bfb      	ldrh	r3, [r7, #30]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01e      	beq.n	8006386 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006352:	461a      	mov	r2, r3
 8006354:	f107 0310 	add.w	r3, r7, #16
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	fa22 f303 	lsr.w	r3, r2, r3
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	701a      	strb	r2, [r3, #0]
      i++;
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	3301      	adds	r3, #1
 8006372:	623b      	str	r3, [r7, #32]
      pDest++;
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	3301      	adds	r3, #1
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800637a:	8bfb      	ldrh	r3, [r7, #30]
 800637c:	3b01      	subs	r3, #1
 800637e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006380:	8bfb      	ldrh	r3, [r7, #30]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1ea      	bne.n	800635c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006388:	4618      	mov	r0, r3
 800638a:	372c      	adds	r7, #44	@ 0x2c
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d12c      	bne.n	800640a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	db12      	blt.n	80063e8 <USB_EPSetStall+0x54>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00f      	beq.n	80063e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006402:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	e02b      	b.n	8006462 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	db12      	blt.n	8006442 <USB_EPSetStall+0xae>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00f      	beq.n	8006442 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	0151      	lsls	r1, r2, #5
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	440a      	add	r2, r1
 8006438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800643c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006440:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	440a      	add	r2, r1
 8006458:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800645c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006460:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d128      	bne.n	80064de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	0151      	lsls	r1, r2, #5
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	440a      	add	r2, r1
 80064a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	791b      	ldrb	r3, [r3, #4]
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d003      	beq.n	80064bc <USB_EPClearStall+0x4c>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	791b      	ldrb	r3, [r3, #4]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d138      	bne.n	800652e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	e027      	b.n	800652e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	791b      	ldrb	r3, [r3, #4]
 8006502:	2b03      	cmp	r3, #3
 8006504:	d003      	beq.n	800650e <USB_EPClearStall+0x9e>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	791b      	ldrb	r3, [r3, #4]
 800650a:	2b02      	cmp	r3, #2
 800650c:	d10f      	bne.n	800652e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	440a      	add	r2, r1
 8006524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800652c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800655a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800655e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006570:	68f9      	ldr	r1, [r7, #12]
 8006572:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006576:	4313      	orrs	r3, r2
 8006578:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065b6:	f023 0302 	bic.w	r3, r3, #2
 80065ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065e4:	f023 0303 	bic.w	r3, r3, #3
 80065e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065f8:	f043 0302 	orr.w	r3, r3, #2
 80065fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4013      	ands	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006624:	68fb      	ldr	r3, [r7, #12]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	0c1b      	lsrs	r3, r3, #16
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	4013      	ands	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	b29b      	uxth	r3, r3
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4013      	ands	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066c8:	68bb      	ldr	r3, [r7, #8]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b087      	sub	sp, #28
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	460b      	mov	r3, r1
 80066e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	fa22 f303 	lsr.w	r3, r2, r3
 8006706:	01db      	lsls	r3, r3, #7
 8006708:	b2db      	uxtb	r3, r3
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4013      	ands	r3, r2
 8006722:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006724:	68bb      	ldr	r3, [r7, #8]
}
 8006726:	4618      	mov	r0, r3
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f003 0301 	and.w	r3, r3, #1
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006768:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800676c:	f023 0307 	bic.w	r3, r3, #7
 8006770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	460b      	mov	r3, r1
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	333c      	adds	r3, #60	@ 0x3c
 80067aa:	3304      	adds	r3, #4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4a26      	ldr	r2, [pc, #152]	@ (800684c <USB_EP0_OutStart+0xb8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d90a      	bls.n	80067ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067c8:	d101      	bne.n	80067ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e037      	b.n	800683e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d4:	461a      	mov	r2, r3
 80067d6:	2300      	movs	r3, #0
 80067d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067fc:	f043 0318 	orr.w	r3, r3, #24
 8006800:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006810:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006814:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d10f      	bne.n	800683c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006822:	461a      	mov	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006836:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800683a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	4f54300a 	.word	0x4f54300a

08006850 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006868:	d901      	bls.n	800686e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e01b      	b.n	80068a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	daf2      	bge.n	800685c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f043 0201 	orr.w	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006892:	d901      	bls.n	8006898 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e006      	b.n	80068a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d0f0      	beq.n	8006886 <USB_CoreReset+0x36>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80068c4:	f002 fd0c 	bl	80092e0 <USBD_static_malloc>
 80068c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	32b0      	adds	r2, #176	@ 0xb0
 80068da:	2100      	movs	r1, #0
 80068dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068e0:	2302      	movs	r3, #2
 80068e2:	e0d4      	b.n	8006a8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80068e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80068e8:	2100      	movs	r1, #0
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f002 fd72 	bl	80093d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	32b0      	adds	r2, #176	@ 0xb0
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	32b0      	adds	r2, #176	@ 0xb0
 800690a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7c1b      	ldrb	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d138      	bne.n	800698e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800691c:	4b5e      	ldr	r3, [pc, #376]	@ (8006a98 <USBD_CDC_Init+0x1e4>)
 800691e:	7819      	ldrb	r1, [r3, #0]
 8006920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006924:	2202      	movs	r2, #2
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f002 fbb7 	bl	800909a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800692c:	4b5a      	ldr	r3, [pc, #360]	@ (8006a98 <USBD_CDC_Init+0x1e4>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 020f 	and.w	r2, r3, #15
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	3324      	adds	r3, #36	@ 0x24
 8006942:	2201      	movs	r2, #1
 8006944:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006946:	4b55      	ldr	r3, [pc, #340]	@ (8006a9c <USBD_CDC_Init+0x1e8>)
 8006948:	7819      	ldrb	r1, [r3, #0]
 800694a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800694e:	2202      	movs	r2, #2
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f002 fba2 	bl	800909a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006956:	4b51      	ldr	r3, [pc, #324]	@ (8006a9c <USBD_CDC_Init+0x1e8>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	f003 020f 	and.w	r2, r3, #15
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800696e:	2201      	movs	r2, #1
 8006970:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006972:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa0 <USBD_CDC_Init+0x1ec>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	f003 020f 	and.w	r2, r3, #15
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	3326      	adds	r3, #38	@ 0x26
 8006988:	2210      	movs	r2, #16
 800698a:	801a      	strh	r2, [r3, #0]
 800698c:	e035      	b.n	80069fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800698e:	4b42      	ldr	r3, [pc, #264]	@ (8006a98 <USBD_CDC_Init+0x1e4>)
 8006990:	7819      	ldrb	r1, [r3, #0]
 8006992:	2340      	movs	r3, #64	@ 0x40
 8006994:	2202      	movs	r2, #2
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f002 fb7f 	bl	800909a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800699c:	4b3e      	ldr	r3, [pc, #248]	@ (8006a98 <USBD_CDC_Init+0x1e4>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	3324      	adds	r3, #36	@ 0x24
 80069b2:	2201      	movs	r2, #1
 80069b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069b6:	4b39      	ldr	r3, [pc, #228]	@ (8006a9c <USBD_CDC_Init+0x1e8>)
 80069b8:	7819      	ldrb	r1, [r3, #0]
 80069ba:	2340      	movs	r3, #64	@ 0x40
 80069bc:	2202      	movs	r2, #2
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f002 fb6b 	bl	800909a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069c4:	4b35      	ldr	r3, [pc, #212]	@ (8006a9c <USBD_CDC_Init+0x1e8>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f003 020f 	and.w	r2, r3, #15
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80069dc:	2201      	movs	r2, #1
 80069de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80069e0:	4b2f      	ldr	r3, [pc, #188]	@ (8006aa0 <USBD_CDC_Init+0x1ec>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f003 020f 	and.w	r2, r3, #15
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	3326      	adds	r3, #38	@ 0x26
 80069f6:	2210      	movs	r2, #16
 80069f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069fa:	4b29      	ldr	r3, [pc, #164]	@ (8006aa0 <USBD_CDC_Init+0x1ec>)
 80069fc:	7819      	ldrb	r1, [r3, #0]
 80069fe:	2308      	movs	r3, #8
 8006a00:	2203      	movs	r2, #3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f002 fb49 	bl	800909a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006a08:	4b25      	ldr	r3, [pc, #148]	@ (8006aa0 <USBD_CDC_Init+0x1ec>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	f003 020f 	and.w	r2, r3, #15
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	3324      	adds	r3, #36	@ 0x24
 8006a1e:	2201      	movs	r2, #1
 8006a20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	33b0      	adds	r3, #176	@ 0xb0
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e018      	b.n	8006a8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	7c1b      	ldrb	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a64:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <USBD_CDC_Init+0x1e8>)
 8006a66:	7819      	ldrb	r1, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f002 fc00 	bl	8009278 <USBD_LL_PrepareReceive>
 8006a78:	e008      	b.n	8006a8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a7a:	4b08      	ldr	r3, [pc, #32]	@ (8006a9c <USBD_CDC_Init+0x1e8>)
 8006a7c:	7819      	ldrb	r1, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a84:	2340      	movs	r3, #64	@ 0x40
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f002 fbf6 	bl	8009278 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	2000009b 	.word	0x2000009b
 8006a9c:	2000009c 	.word	0x2000009c
 8006aa0:	2000009d 	.word	0x2000009d

08006aa4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8006b9c <USBD_CDC_DeInit+0xf8>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f002 fb15 	bl	80090e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006abc:	4b37      	ldr	r3, [pc, #220]	@ (8006b9c <USBD_CDC_DeInit+0xf8>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	3324      	adds	r3, #36	@ 0x24
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ad6:	4b32      	ldr	r3, [pc, #200]	@ (8006ba0 <USBD_CDC_DeInit+0xfc>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f002 fb02 	bl	80090e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba0 <USBD_CDC_DeInit+0xfc>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f003 020f 	and.w	r2, r3, #15
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006afa:	2200      	movs	r2, #0
 8006afc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006afe:	4b29      	ldr	r3, [pc, #164]	@ (8006ba4 <USBD_CDC_DeInit+0x100>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f002 faee 	bl	80090e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006b0a:	4b26      	ldr	r3, [pc, #152]	@ (8006ba4 <USBD_CDC_DeInit+0x100>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	f003 020f 	and.w	r2, r3, #15
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	3324      	adds	r3, #36	@ 0x24
 8006b20:	2200      	movs	r2, #0
 8006b22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006b24:	4b1f      	ldr	r3, [pc, #124]	@ (8006ba4 <USBD_CDC_DeInit+0x100>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f003 020f 	and.w	r2, r3, #15
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	3326      	adds	r3, #38	@ 0x26
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	32b0      	adds	r2, #176	@ 0xb0
 8006b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01f      	beq.n	8006b90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	33b0      	adds	r3, #176	@ 0xb0
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	32b0      	adds	r2, #176	@ 0xb0
 8006b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f002 fbc2 	bl	80092fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	32b0      	adds	r2, #176	@ 0xb0
 8006b82:	2100      	movs	r1, #0
 8006b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	2000009b 	.word	0x2000009b
 8006ba0:	2000009c 	.word	0x2000009c
 8006ba4:	2000009d 	.word	0x2000009d

08006ba8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	32b0      	adds	r2, #176	@ 0xb0
 8006bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e0bf      	b.n	8006d58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d050      	beq.n	8006c86 <USBD_CDC_Setup+0xde>
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	f040 80af 	bne.w	8006d48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	88db      	ldrh	r3, [r3, #6]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d03a      	beq.n	8006c68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	b25b      	sxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da1b      	bge.n	8006c34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	33b0      	adds	r3, #176	@ 0xb0
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006c12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	88d2      	ldrh	r2, [r2, #6]
 8006c18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	88db      	ldrh	r3, [r3, #6]
 8006c1e:	2b07      	cmp	r3, #7
 8006c20:	bf28      	it	cs
 8006c22:	2307      	movcs	r3, #7
 8006c24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	89fa      	ldrh	r2, [r7, #14]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 fd93 	bl	8008758 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006c32:	e090      	b.n	8006d56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	785a      	ldrb	r2, [r3, #1]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	88db      	ldrh	r3, [r3, #6]
 8006c42:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c44:	d803      	bhi.n	8006c4e <USBD_CDC_Setup+0xa6>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	88db      	ldrh	r3, [r3, #6]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	e000      	b.n	8006c50 <USBD_CDC_Setup+0xa8>
 8006c4e:	2240      	movs	r2, #64	@ 0x40
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006c56:	6939      	ldr	r1, [r7, #16]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 fda5 	bl	80087b0 <USBD_CtlPrepareRx>
      break;
 8006c66:	e076      	b.n	8006d56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	33b0      	adds	r3, #176	@ 0xb0
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	7850      	ldrb	r0, [r2, #1]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	4798      	blx	r3
      break;
 8006c84:	e067      	b.n	8006d56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b0b      	cmp	r3, #11
 8006c8c:	d851      	bhi.n	8006d32 <USBD_CDC_Setup+0x18a>
 8006c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c94 <USBD_CDC_Setup+0xec>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cc5 	.word	0x08006cc5
 8006c98:	08006d41 	.word	0x08006d41
 8006c9c:	08006d33 	.word	0x08006d33
 8006ca0:	08006d33 	.word	0x08006d33
 8006ca4:	08006d33 	.word	0x08006d33
 8006ca8:	08006d33 	.word	0x08006d33
 8006cac:	08006d33 	.word	0x08006d33
 8006cb0:	08006d33 	.word	0x08006d33
 8006cb4:	08006d33 	.word	0x08006d33
 8006cb8:	08006d33 	.word	0x08006d33
 8006cbc:	08006cef 	.word	0x08006cef
 8006cc0:	08006d19 	.word	0x08006d19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d107      	bne.n	8006ce0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cd0:	f107 030a 	add.w	r3, r7, #10
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fd3d 	bl	8008758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cde:	e032      	b.n	8006d46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fcbb 	bl	800865e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	75fb      	strb	r3, [r7, #23]
          break;
 8006cec:	e02b      	b.n	8006d46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d107      	bne.n	8006d0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cfa:	f107 030d 	add.w	r3, r7, #13
 8006cfe:	2201      	movs	r2, #1
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 fd28 	bl	8008758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d08:	e01d      	b.n	8006d46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 fca6 	bl	800865e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d12:	2303      	movs	r3, #3
 8006d14:	75fb      	strb	r3, [r7, #23]
          break;
 8006d16:	e016      	b.n	8006d46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d00f      	beq.n	8006d44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fc99 	bl	800865e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d30:	e008      	b.n	8006d44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fc92 	bl	800865e <USBD_CtlError>
          ret = USBD_FAIL;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d3e:	e002      	b.n	8006d46 <USBD_CDC_Setup+0x19e>
          break;
 8006d40:	bf00      	nop
 8006d42:	e008      	b.n	8006d56 <USBD_CDC_Setup+0x1ae>
          break;
 8006d44:	bf00      	nop
      }
      break;
 8006d46:	e006      	b.n	8006d56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fc87 	bl	800865e <USBD_CtlError>
      ret = USBD_FAIL;
 8006d50:	2303      	movs	r3, #3
 8006d52:	75fb      	strb	r3, [r7, #23]
      break;
 8006d54:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	32b0      	adds	r2, #176	@ 0xb0
 8006d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e065      	b.n	8006e56 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	32b0      	adds	r2, #176	@ 0xb0
 8006d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	f003 020f 	and.w	r2, r3, #15
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	3318      	adds	r3, #24
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d02f      	beq.n	8006e14 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	f003 020f 	and.w	r2, r3, #15
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	3318      	adds	r3, #24
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	f003 010f 	and.w	r1, r3, #15
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	440b      	add	r3, r1
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4403      	add	r3, r0
 8006ddc:	331c      	adds	r3, #28
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d112      	bne.n	8006e14 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	f003 020f 	and.w	r2, r3, #15
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	3318      	adds	r3, #24
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e06:	78f9      	ldrb	r1, [r7, #3]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f002 fa12 	bl	8009236 <USBD_LL_Transmit>
 8006e12:	e01f      	b.n	8006e54 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	33b0      	adds	r3, #176	@ 0xb0
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d010      	beq.n	8006e54 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	33b0      	adds	r3, #176	@ 0xb0
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006e50:	78fa      	ldrb	r2, [r7, #3]
 8006e52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	32b0      	adds	r2, #176	@ 0xb0
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	32b0      	adds	r2, #176	@ 0xb0
 8006e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e01a      	b.n	8006ec6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f002 fa10 	bl	80092ba <USBD_LL_GetRxDataSize>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	33b0      	adds	r3, #176	@ 0xb0
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	32b0      	adds	r2, #176	@ 0xb0
 8006ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e024      	b.n	8006f3a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	33b0      	adds	r3, #176	@ 0xb0
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d019      	beq.n	8006f38 <USBD_CDC_EP0_RxReady+0x6a>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006f0a:	2bff      	cmp	r3, #255	@ 0xff
 8006f0c:	d014      	beq.n	8006f38 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	33b0      	adds	r3, #176	@ 0xb0
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006f26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	22ff      	movs	r2, #255	@ 0xff
 8006f34:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f4c:	2182      	movs	r1, #130	@ 0x82
 8006f4e:	4818      	ldr	r0, [pc, #96]	@ (8006fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f50:	f000 fd4f 	bl	80079f2 <USBD_GetEpDesc>
 8006f54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f56:	2101      	movs	r1, #1
 8006f58:	4815      	ldr	r0, [pc, #84]	@ (8006fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f5a:	f000 fd4a 	bl	80079f2 <USBD_GetEpDesc>
 8006f5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f60:	2181      	movs	r1, #129	@ 0x81
 8006f62:	4813      	ldr	r0, [pc, #76]	@ (8006fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f64:	f000 fd45 	bl	80079f2 <USBD_GetEpDesc>
 8006f68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2210      	movs	r2, #16
 8006f74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d006      	beq.n	8006f8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f84:	711a      	strb	r2, [r3, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d006      	beq.n	8006f9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f98:	711a      	strb	r2, [r3, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2243      	movs	r2, #67	@ 0x43
 8006fa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fa4:	4b02      	ldr	r3, [pc, #8]	@ (8006fb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000058 	.word	0x20000058

08006fb4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fbc:	2182      	movs	r1, #130	@ 0x82
 8006fbe:	4818      	ldr	r0, [pc, #96]	@ (8007020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fc0:	f000 fd17 	bl	80079f2 <USBD_GetEpDesc>
 8006fc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	4815      	ldr	r0, [pc, #84]	@ (8007020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fca:	f000 fd12 	bl	80079f2 <USBD_GetEpDesc>
 8006fce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fd0:	2181      	movs	r1, #129	@ 0x81
 8006fd2:	4813      	ldr	r0, [pc, #76]	@ (8007020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fd4:	f000 fd0d 	bl	80079f2 <USBD_GetEpDesc>
 8006fd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2210      	movs	r2, #16
 8006fe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d006      	beq.n	8006ffa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	711a      	strb	r2, [r3, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f042 0202 	orr.w	r2, r2, #2
 8006ff8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d006      	beq.n	800700e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	711a      	strb	r2, [r3, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f042 0202 	orr.w	r2, r2, #2
 800700c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2243      	movs	r2, #67	@ 0x43
 8007012:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007014:	4b02      	ldr	r3, [pc, #8]	@ (8007020 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000058 	.word	0x20000058

08007024 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800702c:	2182      	movs	r1, #130	@ 0x82
 800702e:	4818      	ldr	r0, [pc, #96]	@ (8007090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007030:	f000 fcdf 	bl	80079f2 <USBD_GetEpDesc>
 8007034:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007036:	2101      	movs	r1, #1
 8007038:	4815      	ldr	r0, [pc, #84]	@ (8007090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800703a:	f000 fcda 	bl	80079f2 <USBD_GetEpDesc>
 800703e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007040:	2181      	movs	r1, #129	@ 0x81
 8007042:	4813      	ldr	r0, [pc, #76]	@ (8007090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007044:	f000 fcd5 	bl	80079f2 <USBD_GetEpDesc>
 8007048:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2210      	movs	r2, #16
 8007054:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d006      	beq.n	800706a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2200      	movs	r2, #0
 8007060:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007064:	711a      	strb	r2, [r3, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d006      	beq.n	800707e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007078:	711a      	strb	r2, [r3, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2243      	movs	r2, #67	@ 0x43
 8007082:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007084:	4b02      	ldr	r3, [pc, #8]	@ (8007090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000058 	.word	0x20000058

08007094 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	220a      	movs	r2, #10
 80070a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070a2:	4b03      	ldr	r3, [pc, #12]	@ (80070b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	20000014 	.word	0x20000014

080070b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e009      	b.n	80070dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	33b0      	adds	r3, #176	@ 0xb0
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	32b0      	adds	r2, #176	@ 0xb0
 80070fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007102:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800710a:	2303      	movs	r3, #3
 800710c:	e008      	b.n	8007120 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	32b0      	adds	r2, #176	@ 0xb0
 8007140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007144:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800714c:	2303      	movs	r3, #3
 800714e:	e004      	b.n	800715a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
	...

08007168 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	32b0      	adds	r2, #176	@ 0xb0
 800717a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007180:	2301      	movs	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800718a:	2303      	movs	r3, #3
 800718c:	e025      	b.n	80071da <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007194:	2b00      	cmp	r3, #0
 8007196:	d11f      	bne.n	80071d8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2201      	movs	r2, #1
 800719c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80071a0:	4b10      	ldr	r3, [pc, #64]	@ (80071e4 <USBD_CDC_TransmitPacket+0x7c>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 020f 	and.w	r2, r3, #15
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4403      	add	r3, r0
 80071ba:	3318      	adds	r3, #24
 80071bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80071be:	4b09      	ldr	r3, [pc, #36]	@ (80071e4 <USBD_CDC_TransmitPacket+0x7c>)
 80071c0:	7819      	ldrb	r1, [r3, #0]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f002 f831 	bl	8009236 <USBD_LL_Transmit>

    ret = USBD_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	2000009b 	.word	0x2000009b

080071e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	32b0      	adds	r2, #176	@ 0xb0
 80071fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	32b0      	adds	r2, #176	@ 0xb0
 800720a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007212:	2303      	movs	r3, #3
 8007214:	e018      	b.n	8007248 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7c1b      	ldrb	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800721e:	4b0c      	ldr	r3, [pc, #48]	@ (8007250 <USBD_CDC_ReceivePacket+0x68>)
 8007220:	7819      	ldrb	r1, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007228:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f002 f823 	bl	8009278 <USBD_LL_PrepareReceive>
 8007232:	e008      	b.n	8007246 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007234:	4b06      	ldr	r3, [pc, #24]	@ (8007250 <USBD_CDC_ReceivePacket+0x68>)
 8007236:	7819      	ldrb	r1, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800723e:	2340      	movs	r3, #64	@ 0x40
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f002 f819 	bl	8009278 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	2000009c 	.word	0x2000009c

08007254 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007268:	2303      	movs	r3, #3
 800726a:	e01f      	b.n	80072ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	79fa      	ldrb	r2, [r7, #7]
 800729e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f001 fe93 	bl	8008fcc <USBD_LL_Init>
 80072a6:	4603      	mov	r3, r0
 80072a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e025      	b.n	8007318 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	32ae      	adds	r2, #174	@ 0xae
 80072de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00f      	beq.n	8007308 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	32ae      	adds	r2, #174	@ 0xae
 80072f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f8:	f107 020e 	add.w	r2, r7, #14
 80072fc:	4610      	mov	r0, r2
 80072fe:	4798      	blx	r3
 8007300:	4602      	mov	r2, r0
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 fe9b 	bl	8009064 <USBD_LL_Start>
 800732e:	4603      	mov	r3, r0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007340:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	460b      	mov	r3, r1
 8007358:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007364:	2b00      	cmp	r3, #0
 8007366:	d009      	beq.n	800737c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	78fa      	ldrb	r2, [r7, #3]
 8007372:	4611      	mov	r1, r2
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	78fa      	ldrb	r2, [r7, #3]
 80073a0:	4611      	mov	r1, r2
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80073ac:	2303      	movs	r3, #3
 80073ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 f90c 	bl	80085ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80073e0:	461a      	mov	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d01a      	beq.n	800742c <USBD_LL_SetupStage+0x72>
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d822      	bhi.n	8007440 <USBD_LL_SetupStage+0x86>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <USBD_LL_SetupStage+0x4a>
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d00a      	beq.n	8007418 <USBD_LL_SetupStage+0x5e>
 8007402:	e01d      	b.n	8007440 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fb63 	bl	8007ad8 <USBD_StdDevReq>
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
      break;
 8007416:	e020      	b.n	800745a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fbcb 	bl	8007bbc <USBD_StdItfReq>
 8007426:	4603      	mov	r3, r0
 8007428:	73fb      	strb	r3, [r7, #15]
      break;
 800742a:	e016      	b.n	800745a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc2d 	bl	8007c94 <USBD_StdEPReq>
 800743a:	4603      	mov	r3, r0
 800743c:	73fb      	strb	r3, [r7, #15]
      break;
 800743e:	e00c      	b.n	800745a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007446:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800744a:	b2db      	uxtb	r3, r3
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fe68 	bl	8009124 <USBD_LL_StallEP>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
      break;
 8007458:	bf00      	nop
  }

  return ret;
 800745a:	7bfb      	ldrb	r3, [r7, #15]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	460b      	mov	r3, r1
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d16e      	bne.n	800755a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007482:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800748a:	2b03      	cmp	r3, #3
 800748c:	f040 8098 	bne.w	80075c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	429a      	cmp	r2, r3
 800749a:	d913      	bls.n	80074c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	1ad2      	subs	r2, r2, r3
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	4293      	cmp	r3, r2
 80074b4:	bf28      	it	cs
 80074b6:	4613      	movcs	r3, r2
 80074b8:	461a      	mov	r2, r3
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f001 f994 	bl	80087ea <USBD_CtlContinueRx>
 80074c2:	e07d      	b.n	80075c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074ca:	f003 031f 	and.w	r3, r3, #31
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d014      	beq.n	80074fc <USBD_LL_DataOutStage+0x98>
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d81d      	bhi.n	8007512 <USBD_LL_DataOutStage+0xae>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <USBD_LL_DataOutStage+0x7c>
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d003      	beq.n	80074e6 <USBD_LL_DataOutStage+0x82>
 80074de:	e018      	b.n	8007512 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	75bb      	strb	r3, [r7, #22]
            break;
 80074e4:	e018      	b.n	8007518 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 fa64 	bl	80079be <USBD_CoreFindIF>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75bb      	strb	r3, [r7, #22]
            break;
 80074fa:	e00d      	b.n	8007518 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007502:	b2db      	uxtb	r3, r3
 8007504:	4619      	mov	r1, r3
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 fa66 	bl	80079d8 <USBD_CoreFindEP>
 800750c:	4603      	mov	r3, r0
 800750e:	75bb      	strb	r3, [r7, #22]
            break;
 8007510:	e002      	b.n	8007518 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	75bb      	strb	r3, [r7, #22]
            break;
 8007516:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007518:	7dbb      	ldrb	r3, [r7, #22]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d119      	bne.n	8007552 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b03      	cmp	r3, #3
 8007528:	d113      	bne.n	8007552 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800752a:	7dba      	ldrb	r2, [r7, #22]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	32ae      	adds	r2, #174	@ 0xae
 8007530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00b      	beq.n	8007552 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800753a:	7dba      	ldrb	r2, [r7, #22]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007542:	7dba      	ldrb	r2, [r7, #22]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	32ae      	adds	r2, #174	@ 0xae
 8007548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f001 f95a 	bl	800880c <USBD_CtlSendStatus>
 8007558:	e032      	b.n	80075c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800755a:	7afb      	ldrb	r3, [r7, #11]
 800755c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007560:	b2db      	uxtb	r3, r3
 8007562:	4619      	mov	r1, r3
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 fa37 	bl	80079d8 <USBD_CoreFindEP>
 800756a:	4603      	mov	r3, r0
 800756c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800756e:	7dbb      	ldrb	r3, [r7, #22]
 8007570:	2bff      	cmp	r3, #255	@ 0xff
 8007572:	d025      	beq.n	80075c0 <USBD_LL_DataOutStage+0x15c>
 8007574:	7dbb      	ldrb	r3, [r7, #22]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d122      	bne.n	80075c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b03      	cmp	r3, #3
 8007584:	d117      	bne.n	80075b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007586:	7dba      	ldrb	r2, [r7, #22]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	32ae      	adds	r2, #174	@ 0xae
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00f      	beq.n	80075b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007596:	7dba      	ldrb	r2, [r7, #22]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800759e:	7dba      	ldrb	r2, [r7, #22]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	32ae      	adds	r2, #174	@ 0xae
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	7afa      	ldrb	r2, [r7, #11]
 80075ac:	4611      	mov	r1, r2
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	4798      	blx	r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	e000      	b.n	80075c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	460b      	mov	r3, r1
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80075d8:	7afb      	ldrb	r3, [r7, #11]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d16f      	bne.n	80076be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3314      	adds	r3, #20
 80075e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d15a      	bne.n	80076a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d914      	bls.n	8007624 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	461a      	mov	r2, r3
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f001 f8bc 	bl	800878e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007616:	2300      	movs	r3, #0
 8007618:	2200      	movs	r2, #0
 800761a:	2100      	movs	r1, #0
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f001 fe2b 	bl	8009278 <USBD_LL_PrepareReceive>
 8007622:	e03f      	b.n	80076a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	429a      	cmp	r2, r3
 800762e:	d11c      	bne.n	800766a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007638:	429a      	cmp	r2, r3
 800763a:	d316      	bcc.n	800766a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007646:	429a      	cmp	r2, r3
 8007648:	d20f      	bcs.n	800766a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800764a:	2200      	movs	r2, #0
 800764c:	2100      	movs	r1, #0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f001 f89d 	bl	800878e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800765c:	2300      	movs	r3, #0
 800765e:	2200      	movs	r2, #0
 8007660:	2100      	movs	r1, #0
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f001 fe08 	bl	8009278 <USBD_LL_PrepareReceive>
 8007668:	e01c      	b.n	80076a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b03      	cmp	r3, #3
 8007674:	d10f      	bne.n	8007696 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007696:	2180      	movs	r1, #128	@ 0x80
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f001 fd43 	bl	8009124 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f001 f8c7 	bl	8008832 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d03a      	beq.n	8007724 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff fe42 	bl	8007338 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80076bc:	e032      	b.n	8007724 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80076be:	7afb      	ldrb	r3, [r7, #11]
 80076c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	4619      	mov	r1, r3
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f985 	bl	80079d8 <USBD_CoreFindEP>
 80076ce:	4603      	mov	r3, r0
 80076d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	2bff      	cmp	r3, #255	@ 0xff
 80076d6:	d025      	beq.n	8007724 <USBD_LL_DataInStage+0x15a>
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d122      	bne.n	8007724 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d11c      	bne.n	8007724 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80076ea:	7dfa      	ldrb	r2, [r7, #23]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	32ae      	adds	r2, #174	@ 0xae
 80076f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d014      	beq.n	8007724 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80076fa:	7dfa      	ldrb	r2, [r7, #23]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007702:	7dfa      	ldrb	r2, [r7, #23]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	32ae      	adds	r2, #174	@ 0xae
 8007708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	7afa      	ldrb	r2, [r7, #11]
 8007710:	4611      	mov	r1, r2
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	4798      	blx	r3
 8007716:	4603      	mov	r3, r0
 8007718:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800771a:	7dbb      	ldrb	r3, [r7, #22]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007720:	7dbb      	ldrb	r3, [r7, #22]
 8007722:	e000      	b.n	8007726 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d014      	beq.n	8007794 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00e      	beq.n	8007794 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6852      	ldr	r2, [r2, #4]
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	4611      	mov	r1, r2
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007790:	2303      	movs	r3, #3
 8007792:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007794:	2340      	movs	r3, #64	@ 0x40
 8007796:	2200      	movs	r2, #0
 8007798:	2100      	movs	r1, #0
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 fc7d 	bl	800909a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2240      	movs	r2, #64	@ 0x40
 80077ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077b0:	2340      	movs	r3, #64	@ 0x40
 80077b2:	2200      	movs	r2, #0
 80077b4:	2180      	movs	r1, #128	@ 0x80
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 fc6f 	bl	800909a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2240      	movs	r2, #64	@ 0x40
 80077c6:	621a      	str	r2, [r3, #32]

  return ret;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b04      	cmp	r3, #4
 8007804:	d006      	beq.n	8007814 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800780c:	b2da      	uxtb	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2204      	movs	r2, #4
 8007818:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b04      	cmp	r3, #4
 800783c:	d106      	bne.n	800784c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007844:	b2da      	uxtb	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b03      	cmp	r3, #3
 800786c:	d110      	bne.n	8007890 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d005      	beq.n	8007890 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	460b      	mov	r3, r1
 80078a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	32ae      	adds	r2, #174	@ 0xae
 80078b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e01c      	b.n	80078f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d115      	bne.n	80078f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	32ae      	adds	r2, #174	@ 0xae
 80078d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	32ae      	adds	r2, #174	@ 0xae
 80078e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	78fa      	ldrb	r2, [r7, #3]
 80078ee:	4611      	mov	r1, r2
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	32ae      	adds	r2, #174	@ 0xae
 8007914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800791c:	2303      	movs	r3, #3
 800791e:	e01c      	b.n	800795a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b03      	cmp	r3, #3
 800792a:	d115      	bne.n	8007958 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	32ae      	adds	r2, #174	@ 0xae
 8007936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	32ae      	adds	r2, #174	@ 0xae
 800794a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007950:	78fa      	ldrb	r2, [r7, #3]
 8007952:	4611      	mov	r1, r2
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00e      	beq.n	80079b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6852      	ldr	r2, [r2, #4]
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	4611      	mov	r1, r2
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80079b0:	2303      	movs	r3, #3
 80079b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b086      	sub	sp, #24
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	460b      	mov	r3, r1
 80079fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	885b      	ldrh	r3, [r3, #2]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	7812      	ldrb	r2, [r2, #0]
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d91f      	bls.n	8007a58 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a1e:	e013      	b.n	8007a48 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a20:	f107 030a 	add.w	r3, r7, #10
 8007a24:	4619      	mov	r1, r3
 8007a26:	6978      	ldr	r0, [r7, #20]
 8007a28:	f000 f81b 	bl	8007a62 <USBD_GetNextDesc>
 8007a2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	d108      	bne.n	8007a48 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	789b      	ldrb	r3, [r3, #2]
 8007a3e:	78fa      	ldrb	r2, [r7, #3]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d008      	beq.n	8007a56 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	885b      	ldrh	r3, [r3, #2]
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	897b      	ldrh	r3, [r7, #10]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d8e5      	bhi.n	8007a20 <USBD_GetEpDesc+0x2e>
 8007a54:	e000      	b.n	8007a58 <USBD_GetEpDesc+0x66>
          break;
 8007a56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a58:	693b      	ldr	r3, [r7, #16]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	7812      	ldrb	r2, [r2, #0]
 8007a78:	4413      	add	r3, r2
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b087      	sub	sp, #28
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ab8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	b21a      	sxth	r2, r3
 8007ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	b21b      	sxth	r3, r3
 8007ac8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007aca:	89fb      	ldrh	r3, [r7, #14]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	371c      	adds	r7, #28
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007aee:	2b40      	cmp	r3, #64	@ 0x40
 8007af0:	d005      	beq.n	8007afe <USBD_StdDevReq+0x26>
 8007af2:	2b40      	cmp	r3, #64	@ 0x40
 8007af4:	d857      	bhi.n	8007ba6 <USBD_StdDevReq+0xce>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00f      	beq.n	8007b1a <USBD_StdDevReq+0x42>
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d153      	bne.n	8007ba6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	32ae      	adds	r2, #174	@ 0xae
 8007b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]
      break;
 8007b18:	e04a      	b.n	8007bb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	2b09      	cmp	r3, #9
 8007b20:	d83b      	bhi.n	8007b9a <USBD_StdDevReq+0xc2>
 8007b22:	a201      	add	r2, pc, #4	@ (adr r2, 8007b28 <USBD_StdDevReq+0x50>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b7d 	.word	0x08007b7d
 8007b2c:	08007b91 	.word	0x08007b91
 8007b30:	08007b9b 	.word	0x08007b9b
 8007b34:	08007b87 	.word	0x08007b87
 8007b38:	08007b9b 	.word	0x08007b9b
 8007b3c:	08007b5b 	.word	0x08007b5b
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b9b 	.word	0x08007b9b
 8007b48:	08007b73 	.word	0x08007b73
 8007b4c:	08007b65 	.word	0x08007b65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fa3c 	bl	8007fd0 <USBD_GetDescriptor>
          break;
 8007b58:	e024      	b.n	8007ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fba1 	bl	80082a4 <USBD_SetAddress>
          break;
 8007b62:	e01f      	b.n	8007ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fbe0 	bl	800832c <USBD_SetConfig>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]
          break;
 8007b70:	e018      	b.n	8007ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fc83 	bl	8008480 <USBD_GetConfig>
          break;
 8007b7a:	e013      	b.n	8007ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fcb4 	bl	80084ec <USBD_GetStatus>
          break;
 8007b84:	e00e      	b.n	8007ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fce3 	bl	8008554 <USBD_SetFeature>
          break;
 8007b8e:	e009      	b.n	8007ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fd07 	bl	80085a6 <USBD_ClrFeature>
          break;
 8007b98:	e004      	b.n	8007ba4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fd5e 	bl	800865e <USBD_CtlError>
          break;
 8007ba2:	bf00      	nop
      }
      break;
 8007ba4:	e004      	b.n	8007bb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fd58 	bl	800865e <USBD_CtlError>
      break;
 8007bae:	bf00      	nop
  }

  return ret;
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop

08007bbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bd2:	2b40      	cmp	r3, #64	@ 0x40
 8007bd4:	d005      	beq.n	8007be2 <USBD_StdItfReq+0x26>
 8007bd6:	2b40      	cmp	r3, #64	@ 0x40
 8007bd8:	d852      	bhi.n	8007c80 <USBD_StdItfReq+0xc4>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <USBD_StdItfReq+0x26>
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d14e      	bne.n	8007c80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	3b01      	subs	r3, #1
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d840      	bhi.n	8007c72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	889b      	ldrh	r3, [r3, #4]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d836      	bhi.n	8007c68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	889b      	ldrh	r3, [r3, #4]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff fedb 	bl	80079be <USBD_CoreFindIF>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	2bff      	cmp	r3, #255	@ 0xff
 8007c10:	d01d      	beq.n	8007c4e <USBD_StdItfReq+0x92>
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d11a      	bne.n	8007c4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c18:	7bba      	ldrb	r2, [r7, #14]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	32ae      	adds	r2, #174	@ 0xae
 8007c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00f      	beq.n	8007c48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c28:	7bba      	ldrb	r2, [r7, #14]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c30:	7bba      	ldrb	r2, [r7, #14]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	32ae      	adds	r2, #174	@ 0xae
 8007c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	4798      	blx	r3
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c46:	e004      	b.n	8007c52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c4c:	e001      	b.n	8007c52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	88db      	ldrh	r3, [r3, #6]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d110      	bne.n	8007c7c <USBD_StdItfReq+0xc0>
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10d      	bne.n	8007c7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fdd3 	bl	800880c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c66:	e009      	b.n	8007c7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fcf7 	bl	800865e <USBD_CtlError>
          break;
 8007c70:	e004      	b.n	8007c7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fcf2 	bl	800865e <USBD_CtlError>
          break;
 8007c7a:	e000      	b.n	8007c7e <USBD_StdItfReq+0xc2>
          break;
 8007c7c:	bf00      	nop
      }
      break;
 8007c7e:	e004      	b.n	8007c8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fceb 	bl	800865e <USBD_CtlError>
      break;
 8007c88:	bf00      	nop
  }

  return ret;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	889b      	ldrh	r3, [r3, #4]
 8007ca6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cb0:	2b40      	cmp	r3, #64	@ 0x40
 8007cb2:	d007      	beq.n	8007cc4 <USBD_StdEPReq+0x30>
 8007cb4:	2b40      	cmp	r3, #64	@ 0x40
 8007cb6:	f200 817f 	bhi.w	8007fb8 <USBD_StdEPReq+0x324>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d02a      	beq.n	8007d14 <USBD_StdEPReq+0x80>
 8007cbe:	2b20      	cmp	r3, #32
 8007cc0:	f040 817a 	bne.w	8007fb8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff fe85 	bl	80079d8 <USBD_CoreFindEP>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cd2:	7b7b      	ldrb	r3, [r7, #13]
 8007cd4:	2bff      	cmp	r3, #255	@ 0xff
 8007cd6:	f000 8174 	beq.w	8007fc2 <USBD_StdEPReq+0x32e>
 8007cda:	7b7b      	ldrb	r3, [r7, #13]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f040 8170 	bne.w	8007fc2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007ce2:	7b7a      	ldrb	r2, [r7, #13]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007cea:	7b7a      	ldrb	r2, [r7, #13]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	32ae      	adds	r2, #174	@ 0xae
 8007cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 8163 	beq.w	8007fc2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007cfc:	7b7a      	ldrb	r2, [r7, #13]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	32ae      	adds	r2, #174	@ 0xae
 8007d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d12:	e156      	b.n	8007fc2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d008      	beq.n	8007d2e <USBD_StdEPReq+0x9a>
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	f300 8145 	bgt.w	8007fac <USBD_StdEPReq+0x318>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 809b 	beq.w	8007e5e <USBD_StdEPReq+0x1ca>
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d03c      	beq.n	8007da6 <USBD_StdEPReq+0x112>
 8007d2c:	e13e      	b.n	8007fac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d002      	beq.n	8007d40 <USBD_StdEPReq+0xac>
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d016      	beq.n	8007d6c <USBD_StdEPReq+0xd8>
 8007d3e:	e02c      	b.n	8007d9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00d      	beq.n	8007d62 <USBD_StdEPReq+0xce>
 8007d46:	7bbb      	ldrb	r3, [r7, #14]
 8007d48:	2b80      	cmp	r3, #128	@ 0x80
 8007d4a:	d00a      	beq.n	8007d62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 f9e7 	bl	8009124 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d56:	2180      	movs	r1, #128	@ 0x80
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 f9e3 	bl	8009124 <USBD_LL_StallEP>
 8007d5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d60:	e020      	b.n	8007da4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fc7a 	bl	800865e <USBD_CtlError>
              break;
 8007d6a:	e01b      	b.n	8007da4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	885b      	ldrh	r3, [r3, #2]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10e      	bne.n	8007d92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00b      	beq.n	8007d92 <USBD_StdEPReq+0xfe>
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	2b80      	cmp	r3, #128	@ 0x80
 8007d7e:	d008      	beq.n	8007d92 <USBD_StdEPReq+0xfe>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	88db      	ldrh	r3, [r3, #6]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d104      	bne.n	8007d92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f9c9 	bl	8009124 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fd3a 	bl	800880c <USBD_CtlSendStatus>

              break;
 8007d98:	e004      	b.n	8007da4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fc5e 	bl	800865e <USBD_CtlError>
              break;
 8007da2:	bf00      	nop
          }
          break;
 8007da4:	e107      	b.n	8007fb6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d002      	beq.n	8007db8 <USBD_StdEPReq+0x124>
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d016      	beq.n	8007de4 <USBD_StdEPReq+0x150>
 8007db6:	e04b      	b.n	8007e50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00d      	beq.n	8007dda <USBD_StdEPReq+0x146>
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	2b80      	cmp	r3, #128	@ 0x80
 8007dc2:	d00a      	beq.n	8007dda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 f9ab 	bl	8009124 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dce:	2180      	movs	r1, #128	@ 0x80
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 f9a7 	bl	8009124 <USBD_LL_StallEP>
 8007dd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dd8:	e040      	b.n	8007e5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fc3e 	bl	800865e <USBD_CtlError>
              break;
 8007de2:	e03b      	b.n	8007e5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	885b      	ldrh	r3, [r3, #2]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d136      	bne.n	8007e5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d004      	beq.n	8007e00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f9b1 	bl	8009162 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fd03 	bl	800880c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff fde4 	bl	80079d8 <USBD_CoreFindEP>
 8007e10:	4603      	mov	r3, r0
 8007e12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e14:	7b7b      	ldrb	r3, [r7, #13]
 8007e16:	2bff      	cmp	r3, #255	@ 0xff
 8007e18:	d01f      	beq.n	8007e5a <USBD_StdEPReq+0x1c6>
 8007e1a:	7b7b      	ldrb	r3, [r7, #13]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d11c      	bne.n	8007e5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e20:	7b7a      	ldrb	r2, [r7, #13]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e28:	7b7a      	ldrb	r2, [r7, #13]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	32ae      	adds	r2, #174	@ 0xae
 8007e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d010      	beq.n	8007e5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e38:	7b7a      	ldrb	r2, [r7, #13]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	32ae      	adds	r2, #174	@ 0xae
 8007e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e4e:	e004      	b.n	8007e5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fc03 	bl	800865e <USBD_CtlError>
              break;
 8007e58:	e000      	b.n	8007e5c <USBD_StdEPReq+0x1c8>
              break;
 8007e5a:	bf00      	nop
          }
          break;
 8007e5c:	e0ab      	b.n	8007fb6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d002      	beq.n	8007e70 <USBD_StdEPReq+0x1dc>
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d032      	beq.n	8007ed4 <USBD_StdEPReq+0x240>
 8007e6e:	e097      	b.n	8007fa0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d007      	beq.n	8007e86 <USBD_StdEPReq+0x1f2>
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b80      	cmp	r3, #128	@ 0x80
 8007e7a:	d004      	beq.n	8007e86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fbed 	bl	800865e <USBD_CtlError>
                break;
 8007e84:	e091      	b.n	8007faa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	da0b      	bge.n	8007ea6 <USBD_StdEPReq+0x212>
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	3310      	adds	r3, #16
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	e00b      	b.n	8007ebe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	4413      	add	r3, r2
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fc43 	bl	8008758 <USBD_CtlSendData>
              break;
 8007ed2:	e06a      	b.n	8007faa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	da11      	bge.n	8007f00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	f003 020f 	and.w	r2, r3, #15
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	3324      	adds	r3, #36	@ 0x24
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d117      	bne.n	8007f26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fbb0 	bl	800865e <USBD_CtlError>
                  break;
 8007efe:	e054      	b.n	8007faa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	f003 020f 	and.w	r2, r3, #15
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	440b      	add	r3, r1
 8007f12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d104      	bne.n	8007f26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fb9d 	bl	800865e <USBD_CtlError>
                  break;
 8007f24:	e041      	b.n	8007faa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da0b      	bge.n	8007f46 <USBD_StdEPReq+0x2b2>
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	3310      	adds	r3, #16
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	4413      	add	r3, r2
 8007f42:	3304      	adds	r3, #4
 8007f44:	e00b      	b.n	8007f5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <USBD_StdEPReq+0x2d8>
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b80      	cmp	r3, #128	@ 0x80
 8007f6a:	d103      	bne.n	8007f74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	e00e      	b.n	8007f92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 f911 	bl	80091a0 <USBD_LL_IsStallEP>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2201      	movs	r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	e002      	b.n	8007f92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2202      	movs	r2, #2
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fbdd 	bl	8008758 <USBD_CtlSendData>
              break;
 8007f9e:	e004      	b.n	8007faa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fb5b 	bl	800865e <USBD_CtlError>
              break;
 8007fa8:	bf00      	nop
          }
          break;
 8007faa:	e004      	b.n	8007fb6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fb55 	bl	800865e <USBD_CtlError>
          break;
 8007fb4:	bf00      	nop
      }
      break;
 8007fb6:	e005      	b.n	8007fc4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fb4f 	bl	800865e <USBD_CtlError>
      break;
 8007fc0:	e000      	b.n	8007fc4 <USBD_StdEPReq+0x330>
      break;
 8007fc2:	bf00      	nop
  }

  return ret;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	0a1b      	lsrs	r3, r3, #8
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	2b06      	cmp	r3, #6
 8007ff2:	f200 8128 	bhi.w	8008246 <USBD_GetDescriptor+0x276>
 8007ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ffc <USBD_GetDescriptor+0x2c>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	08008019 	.word	0x08008019
 8008000:	08008031 	.word	0x08008031
 8008004:	08008071 	.word	0x08008071
 8008008:	08008247 	.word	0x08008247
 800800c:	08008247 	.word	0x08008247
 8008010:	080081e7 	.word	0x080081e7
 8008014:	08008213 	.word	0x08008213
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	7c12      	ldrb	r2, [r2, #16]
 8008024:	f107 0108 	add.w	r1, r7, #8
 8008028:	4610      	mov	r0, r2
 800802a:	4798      	blx	r3
 800802c:	60f8      	str	r0, [r7, #12]
      break;
 800802e:	e112      	b.n	8008256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	7c1b      	ldrb	r3, [r3, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10d      	bne.n	8008054 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800803e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008040:	f107 0208 	add.w	r2, r7, #8
 8008044:	4610      	mov	r0, r2
 8008046:	4798      	blx	r3
 8008048:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3301      	adds	r3, #1
 800804e:	2202      	movs	r2, #2
 8008050:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008052:	e100      	b.n	8008256 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	f107 0208 	add.w	r2, r7, #8
 8008060:	4610      	mov	r0, r2
 8008062:	4798      	blx	r3
 8008064:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3301      	adds	r3, #1
 800806a:	2202      	movs	r2, #2
 800806c:	701a      	strb	r2, [r3, #0]
      break;
 800806e:	e0f2      	b.n	8008256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	885b      	ldrh	r3, [r3, #2]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b05      	cmp	r3, #5
 8008078:	f200 80ac 	bhi.w	80081d4 <USBD_GetDescriptor+0x204>
 800807c:	a201      	add	r2, pc, #4	@ (adr r2, 8008084 <USBD_GetDescriptor+0xb4>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	0800809d 	.word	0x0800809d
 8008088:	080080d1 	.word	0x080080d1
 800808c:	08008105 	.word	0x08008105
 8008090:	08008139 	.word	0x08008139
 8008094:	0800816d 	.word	0x0800816d
 8008098:	080081a1 	.word	0x080081a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	7c12      	ldrb	r2, [r2, #16]
 80080b4:	f107 0108 	add.w	r1, r7, #8
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080be:	e091      	b.n	80081e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 facb 	bl	800865e <USBD_CtlError>
            err++;
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	3301      	adds	r3, #1
 80080cc:	72fb      	strb	r3, [r7, #11]
          break;
 80080ce:	e089      	b.n	80081e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	7c12      	ldrb	r2, [r2, #16]
 80080e8:	f107 0108 	add.w	r1, r7, #8
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080f2:	e077      	b.n	80081e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fab1 	bl	800865e <USBD_CtlError>
            err++;
 80080fc:	7afb      	ldrb	r3, [r7, #11]
 80080fe:	3301      	adds	r3, #1
 8008100:	72fb      	strb	r3, [r7, #11]
          break;
 8008102:	e06f      	b.n	80081e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	7c12      	ldrb	r2, [r2, #16]
 800811c:	f107 0108 	add.w	r1, r7, #8
 8008120:	4610      	mov	r0, r2
 8008122:	4798      	blx	r3
 8008124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008126:	e05d      	b.n	80081e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa97 	bl	800865e <USBD_CtlError>
            err++;
 8008130:	7afb      	ldrb	r3, [r7, #11]
 8008132:	3301      	adds	r3, #1
 8008134:	72fb      	strb	r3, [r7, #11]
          break;
 8008136:	e055      	b.n	80081e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	7c12      	ldrb	r2, [r2, #16]
 8008150:	f107 0108 	add.w	r1, r7, #8
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
 8008158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800815a:	e043      	b.n	80081e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa7d 	bl	800865e <USBD_CtlError>
            err++;
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	3301      	adds	r3, #1
 8008168:	72fb      	strb	r3, [r7, #11]
          break;
 800816a:	e03b      	b.n	80081e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	7c12      	ldrb	r2, [r2, #16]
 8008184:	f107 0108 	add.w	r1, r7, #8
 8008188:	4610      	mov	r0, r2
 800818a:	4798      	blx	r3
 800818c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800818e:	e029      	b.n	80081e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa63 	bl	800865e <USBD_CtlError>
            err++;
 8008198:	7afb      	ldrb	r3, [r7, #11]
 800819a:	3301      	adds	r3, #1
 800819c:	72fb      	strb	r3, [r7, #11]
          break;
 800819e:	e021      	b.n	80081e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	7c12      	ldrb	r2, [r2, #16]
 80081b8:	f107 0108 	add.w	r1, r7, #8
 80081bc:	4610      	mov	r0, r2
 80081be:	4798      	blx	r3
 80081c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081c2:	e00f      	b.n	80081e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa49 	bl	800865e <USBD_CtlError>
            err++;
 80081cc:	7afb      	ldrb	r3, [r7, #11]
 80081ce:	3301      	adds	r3, #1
 80081d0:	72fb      	strb	r3, [r7, #11]
          break;
 80081d2:	e007      	b.n	80081e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa41 	bl	800865e <USBD_CtlError>
          err++;
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	3301      	adds	r3, #1
 80081e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80081e2:	bf00      	nop
      }
      break;
 80081e4:	e037      	b.n	8008256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	7c1b      	ldrb	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d109      	bne.n	8008202 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081f6:	f107 0208 	add.w	r2, r7, #8
 80081fa:	4610      	mov	r0, r2
 80081fc:	4798      	blx	r3
 80081fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008200:	e029      	b.n	8008256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fa2a 	bl	800865e <USBD_CtlError>
        err++;
 800820a:	7afb      	ldrb	r3, [r7, #11]
 800820c:	3301      	adds	r3, #1
 800820e:	72fb      	strb	r3, [r7, #11]
      break;
 8008210:	e021      	b.n	8008256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	7c1b      	ldrb	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10d      	bne.n	8008236 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008222:	f107 0208 	add.w	r2, r7, #8
 8008226:	4610      	mov	r0, r2
 8008228:	4798      	blx	r3
 800822a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	3301      	adds	r3, #1
 8008230:	2207      	movs	r2, #7
 8008232:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008234:	e00f      	b.n	8008256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa10 	bl	800865e <USBD_CtlError>
        err++;
 800823e:	7afb      	ldrb	r3, [r7, #11]
 8008240:	3301      	adds	r3, #1
 8008242:	72fb      	strb	r3, [r7, #11]
      break;
 8008244:	e007      	b.n	8008256 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fa08 	bl	800865e <USBD_CtlError>
      err++;
 800824e:	7afb      	ldrb	r3, [r7, #11]
 8008250:	3301      	adds	r3, #1
 8008252:	72fb      	strb	r3, [r7, #11]
      break;
 8008254:	bf00      	nop
  }

  if (err != 0U)
 8008256:	7afb      	ldrb	r3, [r7, #11]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d11e      	bne.n	800829a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	88db      	ldrh	r3, [r3, #6]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d016      	beq.n	8008292 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008264:	893b      	ldrh	r3, [r7, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00e      	beq.n	8008288 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	88da      	ldrh	r2, [r3, #6]
 800826e:	893b      	ldrh	r3, [r7, #8]
 8008270:	4293      	cmp	r3, r2
 8008272:	bf28      	it	cs
 8008274:	4613      	movcs	r3, r2
 8008276:	b29b      	uxth	r3, r3
 8008278:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800827a:	893b      	ldrh	r3, [r7, #8]
 800827c:	461a      	mov	r2, r3
 800827e:	68f9      	ldr	r1, [r7, #12]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fa69 	bl	8008758 <USBD_CtlSendData>
 8008286:	e009      	b.n	800829c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f9e7 	bl	800865e <USBD_CtlError>
 8008290:	e004      	b.n	800829c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 faba 	bl	800880c <USBD_CtlSendStatus>
 8008298:	e000      	b.n	800829c <USBD_GetDescriptor+0x2cc>
    return;
 800829a:	bf00      	nop
  }
}
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop

080082a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	889b      	ldrh	r3, [r3, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d131      	bne.n	800831a <USBD_SetAddress+0x76>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	88db      	ldrh	r3, [r3, #6]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d12d      	bne.n	800831a <USBD_SetAddress+0x76>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	885b      	ldrh	r3, [r3, #2]
 80082c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80082c4:	d829      	bhi.n	800831a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	885b      	ldrh	r3, [r3, #2]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d104      	bne.n	80082e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f9bc 	bl	800865e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e6:	e01d      	b.n	8008324 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	7bfa      	ldrb	r2, [r7, #15]
 80082ec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 ff7f 	bl	80091f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fa86 	bl	800880c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d004      	beq.n	8008310 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2202      	movs	r2, #2
 800830a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800830e:	e009      	b.n	8008324 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008318:	e004      	b.n	8008324 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f99e 	bl	800865e <USBD_CtlError>
  }
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	885b      	ldrh	r3, [r3, #2]
 800833e:	b2da      	uxtb	r2, r3
 8008340:	4b4e      	ldr	r3, [pc, #312]	@ (800847c <USBD_SetConfig+0x150>)
 8008342:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008344:	4b4d      	ldr	r3, [pc, #308]	@ (800847c <USBD_SetConfig+0x150>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d905      	bls.n	8008358 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f985 	bl	800865e <USBD_CtlError>
    return USBD_FAIL;
 8008354:	2303      	movs	r3, #3
 8008356:	e08c      	b.n	8008472 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d002      	beq.n	800836a <USBD_SetConfig+0x3e>
 8008364:	2b03      	cmp	r3, #3
 8008366:	d029      	beq.n	80083bc <USBD_SetConfig+0x90>
 8008368:	e075      	b.n	8008456 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800836a:	4b44      	ldr	r3, [pc, #272]	@ (800847c <USBD_SetConfig+0x150>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d020      	beq.n	80083b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008372:	4b42      	ldr	r3, [pc, #264]	@ (800847c <USBD_SetConfig+0x150>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800837c:	4b3f      	ldr	r3, [pc, #252]	@ (800847c <USBD_SetConfig+0x150>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7fe ffe3 	bl	800734e <USBD_SetClassConfig>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f962 	bl	800865e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2202      	movs	r2, #2
 800839e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083a2:	e065      	b.n	8008470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fa31 	bl	800880c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2203      	movs	r2, #3
 80083ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80083b2:	e05d      	b.n	8008470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fa29 	bl	800880c <USBD_CtlSendStatus>
      break;
 80083ba:	e059      	b.n	8008470 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083bc:	4b2f      	ldr	r3, [pc, #188]	@ (800847c <USBD_SetConfig+0x150>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d112      	bne.n	80083ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80083cc:	4b2b      	ldr	r3, [pc, #172]	@ (800847c <USBD_SetConfig+0x150>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083d6:	4b29      	ldr	r3, [pc, #164]	@ (800847c <USBD_SetConfig+0x150>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7fe ffd2 	bl	8007386 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa12 	bl	800880c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083e8:	e042      	b.n	8008470 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80083ea:	4b24      	ldr	r3, [pc, #144]	@ (800847c <USBD_SetConfig+0x150>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d02a      	beq.n	800844e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7fe ffc0 	bl	8007386 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008406:	4b1d      	ldr	r3, [pc, #116]	@ (800847c <USBD_SetConfig+0x150>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008410:	4b1a      	ldr	r3, [pc, #104]	@ (800847c <USBD_SetConfig+0x150>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7fe ff99 	bl	800734e <USBD_SetClassConfig>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00f      	beq.n	8008446 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f918 	bl	800865e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7fe ffa5 	bl	8007386 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008444:	e014      	b.n	8008470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f9e0 	bl	800880c <USBD_CtlSendStatus>
      break;
 800844c:	e010      	b.n	8008470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f9dc 	bl	800880c <USBD_CtlSendStatus>
      break;
 8008454:	e00c      	b.n	8008470 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f900 	bl	800865e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800845e:	4b07      	ldr	r3, [pc, #28]	@ (800847c <USBD_SetConfig+0x150>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7fe ff8e 	bl	8007386 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800846a:	2303      	movs	r3, #3
 800846c:	73fb      	strb	r3, [r7, #15]
      break;
 800846e:	bf00      	nop
  }

  return ret;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20000370 	.word	0x20000370

08008480 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	88db      	ldrh	r3, [r3, #6]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d004      	beq.n	800849c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f8e2 	bl	800865e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800849a:	e023      	b.n	80084e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	dc02      	bgt.n	80084ae <USBD_GetConfig+0x2e>
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dc03      	bgt.n	80084b4 <USBD_GetConfig+0x34>
 80084ac:	e015      	b.n	80084da <USBD_GetConfig+0x5a>
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d00b      	beq.n	80084ca <USBD_GetConfig+0x4a>
 80084b2:	e012      	b.n	80084da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3308      	adds	r3, #8
 80084be:	2201      	movs	r2, #1
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f948 	bl	8008758 <USBD_CtlSendData>
        break;
 80084c8:	e00c      	b.n	80084e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3304      	adds	r3, #4
 80084ce:	2201      	movs	r2, #1
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f940 	bl	8008758 <USBD_CtlSendData>
        break;
 80084d8:	e004      	b.n	80084e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f8be 	bl	800865e <USBD_CtlError>
        break;
 80084e2:	bf00      	nop
}
 80084e4:	bf00      	nop
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	2b02      	cmp	r3, #2
 8008502:	d81e      	bhi.n	8008542 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	88db      	ldrh	r3, [r3, #6]
 8008508:	2b02      	cmp	r3, #2
 800850a:	d004      	beq.n	8008516 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f8a5 	bl	800865e <USBD_CtlError>
        break;
 8008514:	e01a      	b.n	800854c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	f043 0202 	orr.w	r2, r3, #2
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	330c      	adds	r3, #12
 8008536:	2202      	movs	r2, #2
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f90c 	bl	8008758 <USBD_CtlSendData>
      break;
 8008540:	e004      	b.n	800854c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f88a 	bl	800865e <USBD_CtlError>
      break;
 800854a:	bf00      	nop
  }
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	885b      	ldrh	r3, [r3, #2]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d107      	bne.n	8008576 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f94c 	bl	800880c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008574:	e013      	b.n	800859e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	885b      	ldrh	r3, [r3, #2]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d10b      	bne.n	8008596 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	889b      	ldrh	r3, [r3, #4]
 8008582:	0a1b      	lsrs	r3, r3, #8
 8008584:	b29b      	uxth	r3, r3
 8008586:	b2da      	uxtb	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f93c 	bl	800880c <USBD_CtlSendStatus>
}
 8008594:	e003      	b.n	800859e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f860 	bl	800865e <USBD_CtlError>
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	3b01      	subs	r3, #1
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d80b      	bhi.n	80085d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	885b      	ldrh	r3, [r3, #2]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d10c      	bne.n	80085e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f91c 	bl	800880c <USBD_CtlSendStatus>
      }
      break;
 80085d4:	e004      	b.n	80085e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f840 	bl	800865e <USBD_CtlError>
      break;
 80085de:	e000      	b.n	80085e2 <USBD_ClrFeature+0x3c>
      break;
 80085e0:	bf00      	nop
  }
}
 80085e2:	bf00      	nop
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	781a      	ldrb	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	781a      	ldrb	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3301      	adds	r3, #1
 8008612:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f7ff fa40 	bl	8007a9a <SWAPBYTE>
 800861a:	4603      	mov	r3, r0
 800861c:	461a      	mov	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	3301      	adds	r3, #1
 8008626:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3301      	adds	r3, #1
 800862c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7ff fa33 	bl	8007a9a <SWAPBYTE>
 8008634:	4603      	mov	r3, r0
 8008636:	461a      	mov	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3301      	adds	r3, #1
 8008640:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3301      	adds	r3, #1
 8008646:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7ff fa26 	bl	8007a9a <SWAPBYTE>
 800864e:	4603      	mov	r3, r0
 8008650:	461a      	mov	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	80da      	strh	r2, [r3, #6]
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008668:	2180      	movs	r1, #128	@ 0x80
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fd5a 	bl	8009124 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008670:	2100      	movs	r1, #0
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fd56 	bl	8009124 <USBD_LL_StallEP>
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800868c:	2300      	movs	r3, #0
 800868e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d042      	beq.n	800871c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800869a:	6938      	ldr	r0, [r7, #16]
 800869c:	f000 f842 	bl	8008724 <USBD_GetLen>
 80086a0:	4603      	mov	r3, r0
 80086a2:	3301      	adds	r3, #1
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086aa:	d808      	bhi.n	80086be <USBD_GetString+0x3e>
 80086ac:	6938      	ldr	r0, [r7, #16]
 80086ae:	f000 f839 	bl	8008724 <USBD_GetLen>
 80086b2:	4603      	mov	r3, r0
 80086b4:	3301      	adds	r3, #1
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	e001      	b.n	80086c2 <USBD_GetString+0x42>
 80086be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	4413      	add	r3, r2
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	7812      	ldrb	r2, [r2, #0]
 80086d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	3301      	adds	r3, #1
 80086d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	4413      	add	r3, r2
 80086de:	2203      	movs	r2, #3
 80086e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	3301      	adds	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086e8:	e013      	b.n	8008712 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	4413      	add	r3, r2
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	7812      	ldrb	r2, [r2, #0]
 80086f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	3301      	adds	r3, #1
 80086fa:	613b      	str	r3, [r7, #16]
    idx++;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	3301      	adds	r3, #1
 8008700:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	4413      	add	r3, r2
 8008708:	2200      	movs	r2, #0
 800870a:	701a      	strb	r2, [r3, #0]
    idx++;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	3301      	adds	r3, #1
 8008710:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1e7      	bne.n	80086ea <USBD_GetString+0x6a>
 800871a:	e000      	b.n	800871e <USBD_GetString+0x9e>
    return;
 800871c:	bf00      	nop
  }
}
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008734:	e005      	b.n	8008742 <USBD_GetLen+0x1e>
  {
    len++;
 8008736:	7bfb      	ldrb	r3, [r7, #15]
 8008738:	3301      	adds	r3, #1
 800873a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	3301      	adds	r3, #1
 8008740:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1f5      	bne.n	8008736 <USBD_GetLen+0x12>
  }

  return len;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2202      	movs	r2, #2
 8008768:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	2100      	movs	r1, #0
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 fd59 	bl	8009236 <USBD_LL_Transmit>

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	2100      	movs	r1, #0
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fd48 	bl	8009236 <USBD_LL_Transmit>

  return USBD_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2203      	movs	r2, #3
 80087c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	2100      	movs	r1, #0
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 fd4c 	bl	8009278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	60b9      	str	r1, [r7, #8]
 80087f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	2100      	movs	r1, #0
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 fd3b 	bl	8009278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2204      	movs	r2, #4
 8008818:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800881c:	2300      	movs	r3, #0
 800881e:	2200      	movs	r2, #0
 8008820:	2100      	movs	r1, #0
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fd07 	bl	8009236 <USBD_LL_Transmit>

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2205      	movs	r2, #5
 800883e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008842:	2300      	movs	r3, #0
 8008844:	2200      	movs	r2, #0
 8008846:	2100      	movs	r1, #0
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fd15 	bl	8009278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800885c:	2200      	movs	r2, #0
 800885e:	4912      	ldr	r1, [pc, #72]	@ (80088a8 <MX_USB_DEVICE_Init+0x50>)
 8008860:	4812      	ldr	r0, [pc, #72]	@ (80088ac <MX_USB_DEVICE_Init+0x54>)
 8008862:	f7fe fcf7 	bl	8007254 <USBD_Init>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800886c:	f7f8 fa80 	bl	8000d70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008870:	490f      	ldr	r1, [pc, #60]	@ (80088b0 <MX_USB_DEVICE_Init+0x58>)
 8008872:	480e      	ldr	r0, [pc, #56]	@ (80088ac <MX_USB_DEVICE_Init+0x54>)
 8008874:	f7fe fd1e 	bl	80072b4 <USBD_RegisterClass>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800887e:	f7f8 fa77 	bl	8000d70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008882:	490c      	ldr	r1, [pc, #48]	@ (80088b4 <MX_USB_DEVICE_Init+0x5c>)
 8008884:	4809      	ldr	r0, [pc, #36]	@ (80088ac <MX_USB_DEVICE_Init+0x54>)
 8008886:	f7fe fc15 	bl	80070b4 <USBD_CDC_RegisterInterface>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008890:	f7f8 fa6e 	bl	8000d70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008894:	4805      	ldr	r0, [pc, #20]	@ (80088ac <MX_USB_DEVICE_Init+0x54>)
 8008896:	f7fe fd43 	bl	8007320 <USBD_Start>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088a0:	f7f8 fa66 	bl	8000d70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088a4:	bf00      	nop
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	200000b4 	.word	0x200000b4
 80088ac:	20000374 	.word	0x20000374
 80088b0:	20000020 	.word	0x20000020
 80088b4:	200000a0 	.word	0x200000a0

080088b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088bc:	2200      	movs	r2, #0
 80088be:	4905      	ldr	r1, [pc, #20]	@ (80088d4 <CDC_Init_FS+0x1c>)
 80088c0:	4805      	ldr	r0, [pc, #20]	@ (80088d8 <CDC_Init_FS+0x20>)
 80088c2:	f7fe fc11 	bl	80070e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088c6:	4905      	ldr	r1, [pc, #20]	@ (80088dc <CDC_Init_FS+0x24>)
 80088c8:	4803      	ldr	r0, [pc, #12]	@ (80088d8 <CDC_Init_FS+0x20>)
 80088ca:	f7fe fc2f 	bl	800712c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20000e50 	.word	0x20000e50
 80088d8:	20000374 	.word	0x20000374
 80088dc:	20000650 	.word	0x20000650

080088e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	71fb      	strb	r3, [r7, #7]
 80088fc:	4613      	mov	r3, r2
 80088fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	2b23      	cmp	r3, #35	@ 0x23
 8008904:	d84a      	bhi.n	800899c <CDC_Control_FS+0xac>
 8008906:	a201      	add	r2, pc, #4	@ (adr r2, 800890c <CDC_Control_FS+0x1c>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	0800899d 	.word	0x0800899d
 8008910:	0800899d 	.word	0x0800899d
 8008914:	0800899d 	.word	0x0800899d
 8008918:	0800899d 	.word	0x0800899d
 800891c:	0800899d 	.word	0x0800899d
 8008920:	0800899d 	.word	0x0800899d
 8008924:	0800899d 	.word	0x0800899d
 8008928:	0800899d 	.word	0x0800899d
 800892c:	0800899d 	.word	0x0800899d
 8008930:	0800899d 	.word	0x0800899d
 8008934:	0800899d 	.word	0x0800899d
 8008938:	0800899d 	.word	0x0800899d
 800893c:	0800899d 	.word	0x0800899d
 8008940:	0800899d 	.word	0x0800899d
 8008944:	0800899d 	.word	0x0800899d
 8008948:	0800899d 	.word	0x0800899d
 800894c:	0800899d 	.word	0x0800899d
 8008950:	0800899d 	.word	0x0800899d
 8008954:	0800899d 	.word	0x0800899d
 8008958:	0800899d 	.word	0x0800899d
 800895c:	0800899d 	.word	0x0800899d
 8008960:	0800899d 	.word	0x0800899d
 8008964:	0800899d 	.word	0x0800899d
 8008968:	0800899d 	.word	0x0800899d
 800896c:	0800899d 	.word	0x0800899d
 8008970:	0800899d 	.word	0x0800899d
 8008974:	0800899d 	.word	0x0800899d
 8008978:	0800899d 	.word	0x0800899d
 800897c:	0800899d 	.word	0x0800899d
 8008980:	0800899d 	.word	0x0800899d
 8008984:	0800899d 	.word	0x0800899d
 8008988:	0800899d 	.word	0x0800899d
 800898c:	0800899d 	.word	0x0800899d
 8008990:	0800899d 	.word	0x0800899d
 8008994:	0800899d 	.word	0x0800899d
 8008998:	0800899d 	.word	0x0800899d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800899c:	bf00      	nop
  }

  return (USBD_OK);
 800899e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <QHsm_state>:
static inline QStateHandler QHsm_state(QHsm const * const me) {
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
    return me->super.state.fun;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <CDC_Receive_FS>:
#include "elevator.h"
#include "qpc.h"                 // QP/C real-time embedded framework
#include "bsp.h"

static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
if (*Len > 1U) {
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d856      	bhi.n	8008a84 <CDC_Receive_FS+0xc0>
//  }
//  while (CDC_Transmit_FS((uint8_t*)Buf, *Len) != USBD_OK) {
//      HAL_Delay(4);
//  }

} else if ((char)Buf[0] >= '0' && (char)Buf[0] <= '9') {
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b2f      	cmp	r3, #47	@ 0x2f
 80089dc:	d926      	bls.n	8008a2c <CDC_Receive_FS+0x68>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	2b39      	cmp	r3, #57	@ 0x39
 80089e4:	d822      	bhi.n	8008a2c <CDC_Receive_FS+0x68>
	requestEvt * RequestEve = Q_NEW(requestEvt ,REQUEST_SIG);
 80089e6:	220a      	movs	r2, #10
 80089e8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80089ec:	2006      	movs	r0, #6
 80089ee:	f7f9 fb9f 	bl	8002130 <QF_newX_>
 80089f2:	60f8      	str	r0, [r7, #12]
	RequestEve->level = (uint8_t)((char)Buf[0] - '0');
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	3b30      	subs	r3, #48	@ 0x30
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	711a      	strb	r2, [r3, #4]

	if (!already_requested(RequestEve->level)){
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	791b      	ldrb	r3, [r3, #4]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7f7 ff1d 	bl	8000844 <already_requested>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d138      	bne.n	8008a82 <CDC_Receive_FS+0xbe>
		register_request(RequestEve->level);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	791b      	ldrb	r3, [r3, #4]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7f7 ff2f 	bl	8000878 <register_request>
		QACTIVE_POST(AOElevator, (QEvtPtr)RequestEve, (void*)0U);
 8008a1a:	4b20      	ldr	r3, [pc, #128]	@ (8008a9c <CDC_Receive_FS+0xd8>)
 8008a1c:	6818      	ldr	r0, [r3, #0]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a24:	68f9      	ldr	r1, [r7, #12]
 8008a26:	f7f9 f9d5 	bl	8001dd4 <QActive_post_>
} else if ((char)Buf[0] >= '0' && (char)Buf[0] <= '9') {
 8008a2a:	e02a      	b.n	8008a82 <CDC_Receive_FS+0xbe>

	}
} else if ((char)Buf[0] == 'I' || (char)Buf[0] == 'i') {
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b49      	cmp	r3, #73	@ 0x49
 8008a32:	d003      	beq.n	8008a3c <CDC_Receive_FS+0x78>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b69      	cmp	r3, #105	@ 0x69
 8008a3a:	d108      	bne.n	8008a4e <CDC_Receive_FS+0x8a>
	static QEvt const intPress = QEVT_INITIALIZER(CLOSE_INTERRUPT_SIG);
	QACTIVE_POST(AOElevator, &intPress, (void*)0);
 8008a3c:	4b17      	ldr	r3, [pc, #92]	@ (8008a9c <CDC_Receive_FS+0xd8>)
 8008a3e:	6818      	ldr	r0, [r3, #0]
 8008a40:	2300      	movs	r3, #0
 8008a42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a46:	4916      	ldr	r1, [pc, #88]	@ (8008aa0 <CDC_Receive_FS+0xdc>)
 8008a48:	f7f9 f9c4 	bl	8001dd4 <QActive_post_>
} else if ((char)Buf[0] == 'I' || (char)Buf[0] == 'i') {
 8008a4c:	e01a      	b.n	8008a84 <CDC_Receive_FS+0xc0>

} else if ((char)Buf[0] == 'C' || (char)Buf[0] == 'c') {
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b43      	cmp	r3, #67	@ 0x43
 8008a54:	d003      	beq.n	8008a5e <CDC_Receive_FS+0x9a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2b63      	cmp	r3, #99	@ 0x63
 8008a5c:	d112      	bne.n	8008a84 <CDC_Receive_FS+0xc0>
	requests = 0U;
 8008a5e:	4b11      	ldr	r3, [pc, #68]	@ (8008aa4 <CDC_Receive_FS+0xe0>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	801a      	strh	r2, [r3, #0]
	if (QHsm_state((QHsm *)&AOElevator) != (QStateHandler)Elevator_closed) {
 8008a64:	480d      	ldr	r0, [pc, #52]	@ (8008a9c <CDC_Receive_FS+0xd8>)
 8008a66:	f7ff ffa1 	bl	80089ac <QHsm_state>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8008aa8 <CDC_Receive_FS+0xe4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d008      	beq.n	8008a84 <CDC_Receive_FS+0xc0>
	    // The current state is 'Elevator_closed'
	    // Perform relevant actions here
		register_request((uint16_t)(((Elevator*)AOElevator)->next));
 8008a72:	4b0a      	ldr	r3, [pc, #40]	@ (8008a9c <CDC_Receive_FS+0xd8>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7f7 fefc 	bl	8000878 <register_request>
 8008a80:	e000      	b.n	8008a84 <CDC_Receive_FS+0xc0>
} else if ((char)Buf[0] >= '0' && (char)Buf[0] <= '9') {
 8008a82:	bf00      	nop
//	  while (CDC_Transmit_FS((uint8_t*)Buf, *Len) != USBD_OK) {
//	      HAL_Delay(4);
//	  }
//}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	4809      	ldr	r0, [pc, #36]	@ (8008aac <CDC_Receive_FS+0xe8>)
 8008a88:	f7fe fb50 	bl	800712c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a8c:	4807      	ldr	r0, [pc, #28]	@ (8008aac <CDC_Receive_FS+0xe8>)
 8008a8e:	f7fe fbab 	bl	80071e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a92:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20000004 	.word	0x20000004
 8008aa0:	0800a074 	.word	0x0800a074
 8008aa4:	20000280 	.word	0x20000280
 8008aa8:	080011a5 	.word	0x080011a5
 8008aac:	20000374 	.word	0x20000374

08008ab0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8008af8 <CDC_Transmit_FS+0x48>)
 8008ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ac6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e00b      	b.n	8008aee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ad6:	887b      	ldrh	r3, [r7, #2]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	4806      	ldr	r0, [pc, #24]	@ (8008af8 <CDC_Transmit_FS+0x48>)
 8008ade:	f7fe fb03 	bl	80070e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ae2:	4805      	ldr	r0, [pc, #20]	@ (8008af8 <CDC_Transmit_FS+0x48>)
 8008ae4:	f7fe fb40 	bl	8007168 <USBD_CDC_TransmitPacket>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000374 	.word	0x20000374

08008afc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	4613      	mov	r3, r2
 8008b08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
	...

08008b20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	6039      	str	r1, [r7, #0]
 8008b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2212      	movs	r2, #18
 8008b30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b32:	4b03      	ldr	r3, [pc, #12]	@ (8008b40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	200000d0 	.word	0x200000d0

08008b44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	6039      	str	r1, [r7, #0]
 8008b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2204      	movs	r2, #4
 8008b54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b56:	4b03      	ldr	r3, [pc, #12]	@ (8008b64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	200000e4 	.word	0x200000e4

08008b68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d105      	bne.n	8008b86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	4907      	ldr	r1, [pc, #28]	@ (8008b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b7e:	4808      	ldr	r0, [pc, #32]	@ (8008ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b80:	f7ff fd7e 	bl	8008680 <USBD_GetString>
 8008b84:	e004      	b.n	8008b90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4904      	ldr	r1, [pc, #16]	@ (8008b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b8a:	4805      	ldr	r0, [pc, #20]	@ (8008ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b8c:	f7ff fd78 	bl	8008680 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b90:	4b02      	ldr	r3, [pc, #8]	@ (8008b9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20001650 	.word	0x20001650
 8008ba0:	08009f60 	.word	0x08009f60

08008ba4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4603      	mov	r3, r0
 8008bac:	6039      	str	r1, [r7, #0]
 8008bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	4904      	ldr	r1, [pc, #16]	@ (8008bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008bb4:	4804      	ldr	r0, [pc, #16]	@ (8008bc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008bb6:	f7ff fd63 	bl	8008680 <USBD_GetString>
  return USBD_StrDesc;
 8008bba:	4b02      	ldr	r3, [pc, #8]	@ (8008bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	20001650 	.word	0x20001650
 8008bc8:	08009f78 	.word	0x08009f78

08008bcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	6039      	str	r1, [r7, #0]
 8008bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	221a      	movs	r2, #26
 8008bdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bde:	f000 f843 	bl	8008c68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008be2:	4b02      	ldr	r3, [pc, #8]	@ (8008bec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	200000e8 	.word	0x200000e8

08008bf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d105      	bne.n	8008c0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4907      	ldr	r1, [pc, #28]	@ (8008c24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c06:	4808      	ldr	r0, [pc, #32]	@ (8008c28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c08:	f7ff fd3a 	bl	8008680 <USBD_GetString>
 8008c0c:	e004      	b.n	8008c18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	4904      	ldr	r1, [pc, #16]	@ (8008c24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c12:	4805      	ldr	r0, [pc, #20]	@ (8008c28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c14:	f7ff fd34 	bl	8008680 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c18:	4b02      	ldr	r3, [pc, #8]	@ (8008c24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20001650 	.word	0x20001650
 8008c28:	08009f8c 	.word	0x08009f8c

08008c2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c38:	79fb      	ldrb	r3, [r7, #7]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d105      	bne.n	8008c4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	4907      	ldr	r1, [pc, #28]	@ (8008c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c42:	4808      	ldr	r0, [pc, #32]	@ (8008c64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c44:	f7ff fd1c 	bl	8008680 <USBD_GetString>
 8008c48:	e004      	b.n	8008c54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	4904      	ldr	r1, [pc, #16]	@ (8008c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c4e:	4805      	ldr	r0, [pc, #20]	@ (8008c64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c50:	f7ff fd16 	bl	8008680 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c54:	4b02      	ldr	r3, [pc, #8]	@ (8008c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20001650 	.word	0x20001650
 8008c64:	08009f98 	.word	0x08009f98

08008c68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008cac <Get_SerialNum+0x44>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c74:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb0 <Get_SerialNum+0x48>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb4 <Get_SerialNum+0x4c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4413      	add	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d009      	beq.n	8008ca2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c8e:	2208      	movs	r2, #8
 8008c90:	4909      	ldr	r1, [pc, #36]	@ (8008cb8 <Get_SerialNum+0x50>)
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f814 	bl	8008cc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c98:	2204      	movs	r2, #4
 8008c9a:	4908      	ldr	r1, [pc, #32]	@ (8008cbc <Get_SerialNum+0x54>)
 8008c9c:	68b8      	ldr	r0, [r7, #8]
 8008c9e:	f000 f80f 	bl	8008cc0 <IntToUnicode>
  }
}
 8008ca2:	bf00      	nop
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	1fff7a10 	.word	0x1fff7a10
 8008cb0:	1fff7a14 	.word	0x1fff7a14
 8008cb4:	1fff7a18 	.word	0x1fff7a18
 8008cb8:	200000ea 	.word	0x200000ea
 8008cbc:	200000fa 	.word	0x200000fa

08008cc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	75fb      	strb	r3, [r7, #23]
 8008cd6:	e027      	b.n	8008d28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	0f1b      	lsrs	r3, r3, #28
 8008cdc:	2b09      	cmp	r3, #9
 8008cde:	d80b      	bhi.n	8008cf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	0f1b      	lsrs	r3, r3, #28
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	4619      	mov	r1, r3
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	440b      	add	r3, r1
 8008cf0:	3230      	adds	r2, #48	@ 0x30
 8008cf2:	b2d2      	uxtb	r2, r2
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	e00a      	b.n	8008d0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	0f1b      	lsrs	r3, r3, #28
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	4619      	mov	r1, r3
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	440b      	add	r3, r1
 8008d08:	3237      	adds	r2, #55	@ 0x37
 8008d0a:	b2d2      	uxtb	r2, r2
 8008d0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	011b      	lsls	r3, r3, #4
 8008d12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	3301      	adds	r3, #1
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	2200      	movs	r2, #0
 8008d20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	3301      	adds	r3, #1
 8008d26:	75fb      	strb	r3, [r7, #23]
 8008d28:	7dfa      	ldrb	r2, [r7, #23]
 8008d2a:	79fb      	ldrb	r3, [r7, #7]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d3d3      	bcc.n	8008cd8 <IntToUnicode+0x18>
  }
}
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
	...

08008d40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08a      	sub	sp, #40	@ 0x28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d48:	f107 0314 	add.w	r3, r7, #20
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	605a      	str	r2, [r3, #4]
 8008d52:	609a      	str	r2, [r3, #8]
 8008d54:	60da      	str	r2, [r3, #12]
 8008d56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d60:	d13a      	bne.n	8008dd8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d62:	2300      	movs	r3, #0
 8008d64:	613b      	str	r3, [r7, #16]
 8008d66:	4b1e      	ldr	r3, [pc, #120]	@ (8008de0 <HAL_PCD_MspInit+0xa0>)
 8008d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8008de0 <HAL_PCD_MspInit+0xa0>)
 8008d6c:	f043 0301 	orr.w	r3, r3, #1
 8008d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d72:	4b1b      	ldr	r3, [pc, #108]	@ (8008de0 <HAL_PCD_MspInit+0xa0>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	613b      	str	r3, [r7, #16]
 8008d7c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d7e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d84:	2302      	movs	r3, #2
 8008d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d90:	230a      	movs	r3, #10
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d94:	f107 0314 	add.w	r3, r7, #20
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4812      	ldr	r0, [pc, #72]	@ (8008de4 <HAL_PCD_MspInit+0xa4>)
 8008d9c:	f7fa f9b2 	bl	8003104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008da0:	4b0f      	ldr	r3, [pc, #60]	@ (8008de0 <HAL_PCD_MspInit+0xa0>)
 8008da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008da4:	4a0e      	ldr	r2, [pc, #56]	@ (8008de0 <HAL_PCD_MspInit+0xa0>)
 8008da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008daa:	6353      	str	r3, [r2, #52]	@ 0x34
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	4b0b      	ldr	r3, [pc, #44]	@ (8008de0 <HAL_PCD_MspInit+0xa0>)
 8008db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008db4:	4a0a      	ldr	r2, [pc, #40]	@ (8008de0 <HAL_PCD_MspInit+0xa0>)
 8008db6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008dba:	6453      	str	r3, [r2, #68]	@ 0x44
 8008dbc:	4b08      	ldr	r3, [pc, #32]	@ (8008de0 <HAL_PCD_MspInit+0xa0>)
 8008dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2100      	movs	r1, #0
 8008dcc:	2043      	movs	r0, #67	@ 0x43
 8008dce:	f7fa f962 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008dd2:	2043      	movs	r0, #67	@ 0x43
 8008dd4:	f7fa f97b 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3728      	adds	r7, #40	@ 0x28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	40023800 	.word	0x40023800
 8008de4:	40020000 	.word	0x40020000

08008de8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	f7fe fadb 	bl	80073ba <USBD_LL_SetupStage>
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008e1e:	78fa      	ldrb	r2, [r7, #3]
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	4613      	mov	r3, r2
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	440b      	add	r3, r1
 8008e2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	78fb      	ldrb	r3, [r7, #3]
 8008e34:	4619      	mov	r1, r3
 8008e36:	f7fe fb15 	bl	8007464 <USBD_LL_DataOutStage>
}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b082      	sub	sp, #8
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008e54:	78fa      	ldrb	r2, [r7, #3]
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	4413      	add	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	440b      	add	r3, r1
 8008e62:	3320      	adds	r3, #32
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7fe fbae 	bl	80075ca <USBD_LL_DataInStage>
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fe fce8 	bl	800785a <USBD_LL_SOF>
}
 8008e8a:	bf00      	nop
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	79db      	ldrb	r3, [r3, #7]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d102      	bne.n	8008eac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]
 8008eaa:	e008      	b.n	8008ebe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	79db      	ldrb	r3, [r3, #7]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d102      	bne.n	8008eba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	73fb      	strb	r3, [r7, #15]
 8008eb8:	e001      	b.n	8008ebe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008eba:	f7f7 ff59 	bl	8000d70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ec4:	7bfa      	ldrb	r2, [r7, #15]
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fe fc82 	bl	80077d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fc2a 	bl	800772e <USBD_LL_Reset>
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe fc7d 	bl	80077f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6812      	ldr	r2, [r2, #0]
 8008f06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f0a:	f043 0301 	orr.w	r3, r3, #1
 8008f0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	7adb      	ldrb	r3, [r3, #11]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d005      	beq.n	8008f24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f18:	4b04      	ldr	r3, [pc, #16]	@ (8008f2c <HAL_PCD_SuspendCallback+0x48>)
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	4a03      	ldr	r2, [pc, #12]	@ (8008f2c <HAL_PCD_SuspendCallback+0x48>)
 8008f1e:	f043 0306 	orr.w	r3, r3, #6
 8008f22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	e000ed00 	.word	0xe000ed00

08008f30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe fc73 	bl	800782a <USBD_LL_Resume>
}
 8008f44:	bf00      	nop
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f5e:	78fa      	ldrb	r2, [r7, #3]
 8008f60:	4611      	mov	r1, r2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fccb 	bl	80078fe <USBD_LL_IsoOUTIncomplete>
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f82:	78fa      	ldrb	r2, [r7, #3]
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fc87 	bl	800789a <USBD_LL_IsoINIncomplete>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe fcdd 	bl	8007962 <USBD_LL_DevConnected>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fcda 	bl	8007978 <USBD_LL_DevDisconnected>
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d13c      	bne.n	8009056 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008fdc:	4a20      	ldr	r2, [pc, #128]	@ (8009060 <USBD_LL_Init+0x94>)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8009060 <USBD_LL_Init+0x94>)
 8008fe8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fec:	4b1c      	ldr	r3, [pc, #112]	@ (8009060 <USBD_LL_Init+0x94>)
 8008fee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008ff2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8009060 <USBD_LL_Init+0x94>)
 8008ff6:	2204      	movs	r2, #4
 8008ff8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ffa:	4b19      	ldr	r3, [pc, #100]	@ (8009060 <USBD_LL_Init+0x94>)
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009000:	4b17      	ldr	r3, [pc, #92]	@ (8009060 <USBD_LL_Init+0x94>)
 8009002:	2200      	movs	r2, #0
 8009004:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009006:	4b16      	ldr	r3, [pc, #88]	@ (8009060 <USBD_LL_Init+0x94>)
 8009008:	2202      	movs	r2, #2
 800900a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800900c:	4b14      	ldr	r3, [pc, #80]	@ (8009060 <USBD_LL_Init+0x94>)
 800900e:	2200      	movs	r2, #0
 8009010:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009012:	4b13      	ldr	r3, [pc, #76]	@ (8009060 <USBD_LL_Init+0x94>)
 8009014:	2200      	movs	r2, #0
 8009016:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009018:	4b11      	ldr	r3, [pc, #68]	@ (8009060 <USBD_LL_Init+0x94>)
 800901a:	2200      	movs	r2, #0
 800901c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800901e:	4b10      	ldr	r3, [pc, #64]	@ (8009060 <USBD_LL_Init+0x94>)
 8009020:	2200      	movs	r2, #0
 8009022:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009024:	4b0e      	ldr	r3, [pc, #56]	@ (8009060 <USBD_LL_Init+0x94>)
 8009026:	2200      	movs	r2, #0
 8009028:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800902a:	480d      	ldr	r0, [pc, #52]	@ (8009060 <USBD_LL_Init+0x94>)
 800902c:	f7fa fa38 	bl	80034a0 <HAL_PCD_Init>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009036:	f7f7 fe9b 	bl	8000d70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800903a:	2180      	movs	r1, #128	@ 0x80
 800903c:	4808      	ldr	r0, [pc, #32]	@ (8009060 <USBD_LL_Init+0x94>)
 800903e:	f7fb fc64 	bl	800490a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009042:	2240      	movs	r2, #64	@ 0x40
 8009044:	2100      	movs	r1, #0
 8009046:	4806      	ldr	r0, [pc, #24]	@ (8009060 <USBD_LL_Init+0x94>)
 8009048:	f7fb fc18 	bl	800487c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800904c:	2280      	movs	r2, #128	@ 0x80
 800904e:	2101      	movs	r1, #1
 8009050:	4803      	ldr	r0, [pc, #12]	@ (8009060 <USBD_LL_Init+0x94>)
 8009052:	f7fb fc13 	bl	800487c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	20001850 	.word	0x20001850

08009064 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800907a:	4618      	mov	r0, r3
 800907c:	f7fa fb1f 	bl	80036be <HAL_PCD_Start>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f942 	bl	8009310 <USBD_Get_USB_Status>
 800908c:	4603      	mov	r3, r0
 800908e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009090:	7bbb      	ldrb	r3, [r7, #14]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	4608      	mov	r0, r1
 80090a4:	4611      	mov	r1, r2
 80090a6:	461a      	mov	r2, r3
 80090a8:	4603      	mov	r3, r0
 80090aa:	70fb      	strb	r3, [r7, #3]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70bb      	strb	r3, [r7, #2]
 80090b0:	4613      	mov	r3, r2
 80090b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80090c2:	78bb      	ldrb	r3, [r7, #2]
 80090c4:	883a      	ldrh	r2, [r7, #0]
 80090c6:	78f9      	ldrb	r1, [r7, #3]
 80090c8:	f7fa fff3 	bl	80040b2 <HAL_PCD_EP_Open>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f91c 	bl	8009310 <USBD_Get_USB_Status>
 80090d8:	4603      	mov	r3, r0
 80090da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009100:	78fa      	ldrb	r2, [r7, #3]
 8009102:	4611      	mov	r1, r2
 8009104:	4618      	mov	r0, r3
 8009106:	f7fb f83e 	bl	8004186 <HAL_PCD_EP_Close>
 800910a:	4603      	mov	r3, r0
 800910c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 f8fd 	bl	8009310 <USBD_Get_USB_Status>
 8009116:	4603      	mov	r3, r0
 8009118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911a:	7bbb      	ldrb	r3, [r7, #14]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800913e:	78fa      	ldrb	r2, [r7, #3]
 8009140:	4611      	mov	r1, r2
 8009142:	4618      	mov	r0, r3
 8009144:	f7fb f8f6 	bl	8004334 <HAL_PCD_EP_SetStall>
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	4618      	mov	r0, r3
 8009150:	f000 f8de 	bl	8009310 <USBD_Get_USB_Status>
 8009154:	4603      	mov	r3, r0
 8009156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009158:	7bbb      	ldrb	r3, [r7, #14]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800917c:	78fa      	ldrb	r2, [r7, #3]
 800917e:	4611      	mov	r1, r2
 8009180:	4618      	mov	r0, r3
 8009182:	f7fb f93a 	bl	80043fa <HAL_PCD_EP_ClrStall>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f8bf 	bl	8009310 <USBD_Get_USB_Status>
 8009192:	4603      	mov	r3, r0
 8009194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009196:	7bbb      	ldrb	r3, [r7, #14]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80091b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	da0b      	bge.n	80091d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091c2:	68f9      	ldr	r1, [r7, #12]
 80091c4:	4613      	mov	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	3316      	adds	r3, #22
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	e00b      	b.n	80091ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091da:	68f9      	ldr	r1, [r7, #12]
 80091dc:	4613      	mov	r3, r2
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80091ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009212:	78fa      	ldrb	r2, [r7, #3]
 8009214:	4611      	mov	r1, r2
 8009216:	4618      	mov	r0, r3
 8009218:	f7fa ff27 	bl	800406a <HAL_PCD_SetAddress>
 800921c:	4603      	mov	r3, r0
 800921e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	4618      	mov	r0, r3
 8009224:	f000 f874 	bl	8009310 <USBD_Get_USB_Status>
 8009228:	4603      	mov	r3, r0
 800922a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922c:	7bbb      	ldrb	r3, [r7, #14]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b086      	sub	sp, #24
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	603b      	str	r3, [r7, #0]
 8009242:	460b      	mov	r3, r1
 8009244:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009254:	7af9      	ldrb	r1, [r7, #11]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	f7fb f831 	bl	80042c0 <HAL_PCD_EP_Transmit>
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	4618      	mov	r0, r3
 8009266:	f000 f853 	bl	8009310 <USBD_Get_USB_Status>
 800926a:	4603      	mov	r3, r0
 800926c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800926e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	603b      	str	r3, [r7, #0]
 8009284:	460b      	mov	r3, r1
 8009286:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009296:	7af9      	ldrb	r1, [r7, #11]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	f7fa ffbd 	bl	800421a <HAL_PCD_EP_Receive>
 80092a0:	4603      	mov	r3, r0
 80092a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f832 	bl	8009310 <USBD_Get_USB_Status>
 80092ac:	4603      	mov	r3, r0
 80092ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	460b      	mov	r3, r1
 80092c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092cc:	78fa      	ldrb	r2, [r7, #3]
 80092ce:	4611      	mov	r1, r2
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fa ffdd 	bl	8004290 <HAL_PCD_EP_GetRxCount>
 80092d6:	4603      	mov	r3, r0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092e8:	4b03      	ldr	r3, [pc, #12]	@ (80092f8 <USBD_static_malloc+0x18>)
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	20001d34 	.word	0x20001d34

080092fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]

}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800931e:	79fb      	ldrb	r3, [r7, #7]
 8009320:	2b03      	cmp	r3, #3
 8009322:	d817      	bhi.n	8009354 <USBD_Get_USB_Status+0x44>
 8009324:	a201      	add	r2, pc, #4	@ (adr r2, 800932c <USBD_Get_USB_Status+0x1c>)
 8009326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932a:	bf00      	nop
 800932c:	0800933d 	.word	0x0800933d
 8009330:	08009343 	.word	0x08009343
 8009334:	08009349 	.word	0x08009349
 8009338:	0800934f 	.word	0x0800934f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	73fb      	strb	r3, [r7, #15]
    break;
 8009340:	e00b      	b.n	800935a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009342:	2303      	movs	r3, #3
 8009344:	73fb      	strb	r3, [r7, #15]
    break;
 8009346:	e008      	b.n	800935a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009348:	2301      	movs	r3, #1
 800934a:	73fb      	strb	r3, [r7, #15]
    break;
 800934c:	e005      	b.n	800935a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800934e:	2303      	movs	r3, #3
 8009350:	73fb      	strb	r3, [r7, #15]
    break;
 8009352:	e002      	b.n	800935a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009354:	2303      	movs	r3, #3
 8009356:	73fb      	strb	r3, [r7, #15]
    break;
 8009358:	bf00      	nop
  }
  return usb_status;
 800935a:	7bfb      	ldrb	r3, [r7, #15]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <sniprintf>:
 8009368:	b40c      	push	{r2, r3}
 800936a:	b530      	push	{r4, r5, lr}
 800936c:	4b18      	ldr	r3, [pc, #96]	@ (80093d0 <sniprintf+0x68>)
 800936e:	1e0c      	subs	r4, r1, #0
 8009370:	681d      	ldr	r5, [r3, #0]
 8009372:	b09d      	sub	sp, #116	@ 0x74
 8009374:	da08      	bge.n	8009388 <sniprintf+0x20>
 8009376:	238b      	movs	r3, #139	@ 0x8b
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800937e:	b01d      	add	sp, #116	@ 0x74
 8009380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009384:	b002      	add	sp, #8
 8009386:	4770      	bx	lr
 8009388:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800938c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009390:	f04f 0300 	mov.w	r3, #0
 8009394:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009396:	bf14      	ite	ne
 8009398:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800939c:	4623      	moveq	r3, r4
 800939e:	9304      	str	r3, [sp, #16]
 80093a0:	9307      	str	r3, [sp, #28]
 80093a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093a6:	9002      	str	r0, [sp, #8]
 80093a8:	9006      	str	r0, [sp, #24]
 80093aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80093b0:	ab21      	add	r3, sp, #132	@ 0x84
 80093b2:	a902      	add	r1, sp, #8
 80093b4:	4628      	mov	r0, r5
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	f000 f994 	bl	80096e4 <_svfiprintf_r>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	bfbc      	itt	lt
 80093c0:	238b      	movlt	r3, #139	@ 0x8b
 80093c2:	602b      	strlt	r3, [r5, #0]
 80093c4:	2c00      	cmp	r4, #0
 80093c6:	d0da      	beq.n	800937e <sniprintf+0x16>
 80093c8:	9b02      	ldr	r3, [sp, #8]
 80093ca:	2200      	movs	r2, #0
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	e7d6      	b.n	800937e <sniprintf+0x16>
 80093d0:	20000104 	.word	0x20000104

080093d4 <memset>:
 80093d4:	4402      	add	r2, r0
 80093d6:	4603      	mov	r3, r0
 80093d8:	4293      	cmp	r3, r2
 80093da:	d100      	bne.n	80093de <memset+0xa>
 80093dc:	4770      	bx	lr
 80093de:	f803 1b01 	strb.w	r1, [r3], #1
 80093e2:	e7f9      	b.n	80093d8 <memset+0x4>

080093e4 <__errno>:
 80093e4:	4b01      	ldr	r3, [pc, #4]	@ (80093ec <__errno+0x8>)
 80093e6:	6818      	ldr	r0, [r3, #0]
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	20000104 	.word	0x20000104

080093f0 <__libc_init_array>:
 80093f0:	b570      	push	{r4, r5, r6, lr}
 80093f2:	4d0d      	ldr	r5, [pc, #52]	@ (8009428 <__libc_init_array+0x38>)
 80093f4:	4c0d      	ldr	r4, [pc, #52]	@ (800942c <__libc_init_array+0x3c>)
 80093f6:	1b64      	subs	r4, r4, r5
 80093f8:	10a4      	asrs	r4, r4, #2
 80093fa:	2600      	movs	r6, #0
 80093fc:	42a6      	cmp	r6, r4
 80093fe:	d109      	bne.n	8009414 <__libc_init_array+0x24>
 8009400:	4d0b      	ldr	r5, [pc, #44]	@ (8009430 <__libc_init_array+0x40>)
 8009402:	4c0c      	ldr	r4, [pc, #48]	@ (8009434 <__libc_init_array+0x44>)
 8009404:	f000 fc64 	bl	8009cd0 <_init>
 8009408:	1b64      	subs	r4, r4, r5
 800940a:	10a4      	asrs	r4, r4, #2
 800940c:	2600      	movs	r6, #0
 800940e:	42a6      	cmp	r6, r4
 8009410:	d105      	bne.n	800941e <__libc_init_array+0x2e>
 8009412:	bd70      	pop	{r4, r5, r6, pc}
 8009414:	f855 3b04 	ldr.w	r3, [r5], #4
 8009418:	4798      	blx	r3
 800941a:	3601      	adds	r6, #1
 800941c:	e7ee      	b.n	80093fc <__libc_init_array+0xc>
 800941e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009422:	4798      	blx	r3
 8009424:	3601      	adds	r6, #1
 8009426:	e7f2      	b.n	800940e <__libc_init_array+0x1e>
 8009428:	0800a0b4 	.word	0x0800a0b4
 800942c:	0800a0b4 	.word	0x0800a0b4
 8009430:	0800a0b4 	.word	0x0800a0b4
 8009434:	0800a0b8 	.word	0x0800a0b8

08009438 <__retarget_lock_acquire_recursive>:
 8009438:	4770      	bx	lr

0800943a <__retarget_lock_release_recursive>:
 800943a:	4770      	bx	lr

0800943c <_free_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4605      	mov	r5, r0
 8009440:	2900      	cmp	r1, #0
 8009442:	d041      	beq.n	80094c8 <_free_r+0x8c>
 8009444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009448:	1f0c      	subs	r4, r1, #4
 800944a:	2b00      	cmp	r3, #0
 800944c:	bfb8      	it	lt
 800944e:	18e4      	addlt	r4, r4, r3
 8009450:	f000 f8e0 	bl	8009614 <__malloc_lock>
 8009454:	4a1d      	ldr	r2, [pc, #116]	@ (80094cc <_free_r+0x90>)
 8009456:	6813      	ldr	r3, [r2, #0]
 8009458:	b933      	cbnz	r3, 8009468 <_free_r+0x2c>
 800945a:	6063      	str	r3, [r4, #4]
 800945c:	6014      	str	r4, [r2, #0]
 800945e:	4628      	mov	r0, r5
 8009460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009464:	f000 b8dc 	b.w	8009620 <__malloc_unlock>
 8009468:	42a3      	cmp	r3, r4
 800946a:	d908      	bls.n	800947e <_free_r+0x42>
 800946c:	6820      	ldr	r0, [r4, #0]
 800946e:	1821      	adds	r1, r4, r0
 8009470:	428b      	cmp	r3, r1
 8009472:	bf01      	itttt	eq
 8009474:	6819      	ldreq	r1, [r3, #0]
 8009476:	685b      	ldreq	r3, [r3, #4]
 8009478:	1809      	addeq	r1, r1, r0
 800947a:	6021      	streq	r1, [r4, #0]
 800947c:	e7ed      	b.n	800945a <_free_r+0x1e>
 800947e:	461a      	mov	r2, r3
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	b10b      	cbz	r3, 8009488 <_free_r+0x4c>
 8009484:	42a3      	cmp	r3, r4
 8009486:	d9fa      	bls.n	800947e <_free_r+0x42>
 8009488:	6811      	ldr	r1, [r2, #0]
 800948a:	1850      	adds	r0, r2, r1
 800948c:	42a0      	cmp	r0, r4
 800948e:	d10b      	bne.n	80094a8 <_free_r+0x6c>
 8009490:	6820      	ldr	r0, [r4, #0]
 8009492:	4401      	add	r1, r0
 8009494:	1850      	adds	r0, r2, r1
 8009496:	4283      	cmp	r3, r0
 8009498:	6011      	str	r1, [r2, #0]
 800949a:	d1e0      	bne.n	800945e <_free_r+0x22>
 800949c:	6818      	ldr	r0, [r3, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	6053      	str	r3, [r2, #4]
 80094a2:	4408      	add	r0, r1
 80094a4:	6010      	str	r0, [r2, #0]
 80094a6:	e7da      	b.n	800945e <_free_r+0x22>
 80094a8:	d902      	bls.n	80094b0 <_free_r+0x74>
 80094aa:	230c      	movs	r3, #12
 80094ac:	602b      	str	r3, [r5, #0]
 80094ae:	e7d6      	b.n	800945e <_free_r+0x22>
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	1821      	adds	r1, r4, r0
 80094b4:	428b      	cmp	r3, r1
 80094b6:	bf04      	itt	eq
 80094b8:	6819      	ldreq	r1, [r3, #0]
 80094ba:	685b      	ldreq	r3, [r3, #4]
 80094bc:	6063      	str	r3, [r4, #4]
 80094be:	bf04      	itt	eq
 80094c0:	1809      	addeq	r1, r1, r0
 80094c2:	6021      	streq	r1, [r4, #0]
 80094c4:	6054      	str	r4, [r2, #4]
 80094c6:	e7ca      	b.n	800945e <_free_r+0x22>
 80094c8:	bd38      	pop	{r3, r4, r5, pc}
 80094ca:	bf00      	nop
 80094cc:	20002098 	.word	0x20002098

080094d0 <sbrk_aligned>:
 80094d0:	b570      	push	{r4, r5, r6, lr}
 80094d2:	4e0f      	ldr	r6, [pc, #60]	@ (8009510 <sbrk_aligned+0x40>)
 80094d4:	460c      	mov	r4, r1
 80094d6:	6831      	ldr	r1, [r6, #0]
 80094d8:	4605      	mov	r5, r0
 80094da:	b911      	cbnz	r1, 80094e2 <sbrk_aligned+0x12>
 80094dc:	f000 fba4 	bl	8009c28 <_sbrk_r>
 80094e0:	6030      	str	r0, [r6, #0]
 80094e2:	4621      	mov	r1, r4
 80094e4:	4628      	mov	r0, r5
 80094e6:	f000 fb9f 	bl	8009c28 <_sbrk_r>
 80094ea:	1c43      	adds	r3, r0, #1
 80094ec:	d103      	bne.n	80094f6 <sbrk_aligned+0x26>
 80094ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80094f2:	4620      	mov	r0, r4
 80094f4:	bd70      	pop	{r4, r5, r6, pc}
 80094f6:	1cc4      	adds	r4, r0, #3
 80094f8:	f024 0403 	bic.w	r4, r4, #3
 80094fc:	42a0      	cmp	r0, r4
 80094fe:	d0f8      	beq.n	80094f2 <sbrk_aligned+0x22>
 8009500:	1a21      	subs	r1, r4, r0
 8009502:	4628      	mov	r0, r5
 8009504:	f000 fb90 	bl	8009c28 <_sbrk_r>
 8009508:	3001      	adds	r0, #1
 800950a:	d1f2      	bne.n	80094f2 <sbrk_aligned+0x22>
 800950c:	e7ef      	b.n	80094ee <sbrk_aligned+0x1e>
 800950e:	bf00      	nop
 8009510:	20002094 	.word	0x20002094

08009514 <_malloc_r>:
 8009514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009518:	1ccd      	adds	r5, r1, #3
 800951a:	f025 0503 	bic.w	r5, r5, #3
 800951e:	3508      	adds	r5, #8
 8009520:	2d0c      	cmp	r5, #12
 8009522:	bf38      	it	cc
 8009524:	250c      	movcc	r5, #12
 8009526:	2d00      	cmp	r5, #0
 8009528:	4606      	mov	r6, r0
 800952a:	db01      	blt.n	8009530 <_malloc_r+0x1c>
 800952c:	42a9      	cmp	r1, r5
 800952e:	d904      	bls.n	800953a <_malloc_r+0x26>
 8009530:	230c      	movs	r3, #12
 8009532:	6033      	str	r3, [r6, #0]
 8009534:	2000      	movs	r0, #0
 8009536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800953a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009610 <_malloc_r+0xfc>
 800953e:	f000 f869 	bl	8009614 <__malloc_lock>
 8009542:	f8d8 3000 	ldr.w	r3, [r8]
 8009546:	461c      	mov	r4, r3
 8009548:	bb44      	cbnz	r4, 800959c <_malloc_r+0x88>
 800954a:	4629      	mov	r1, r5
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff ffbf 	bl	80094d0 <sbrk_aligned>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	4604      	mov	r4, r0
 8009556:	d158      	bne.n	800960a <_malloc_r+0xf6>
 8009558:	f8d8 4000 	ldr.w	r4, [r8]
 800955c:	4627      	mov	r7, r4
 800955e:	2f00      	cmp	r7, #0
 8009560:	d143      	bne.n	80095ea <_malloc_r+0xd6>
 8009562:	2c00      	cmp	r4, #0
 8009564:	d04b      	beq.n	80095fe <_malloc_r+0xea>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	4639      	mov	r1, r7
 800956a:	4630      	mov	r0, r6
 800956c:	eb04 0903 	add.w	r9, r4, r3
 8009570:	f000 fb5a 	bl	8009c28 <_sbrk_r>
 8009574:	4581      	cmp	r9, r0
 8009576:	d142      	bne.n	80095fe <_malloc_r+0xea>
 8009578:	6821      	ldr	r1, [r4, #0]
 800957a:	1a6d      	subs	r5, r5, r1
 800957c:	4629      	mov	r1, r5
 800957e:	4630      	mov	r0, r6
 8009580:	f7ff ffa6 	bl	80094d0 <sbrk_aligned>
 8009584:	3001      	adds	r0, #1
 8009586:	d03a      	beq.n	80095fe <_malloc_r+0xea>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	442b      	add	r3, r5
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	f8d8 3000 	ldr.w	r3, [r8]
 8009592:	685a      	ldr	r2, [r3, #4]
 8009594:	bb62      	cbnz	r2, 80095f0 <_malloc_r+0xdc>
 8009596:	f8c8 7000 	str.w	r7, [r8]
 800959a:	e00f      	b.n	80095bc <_malloc_r+0xa8>
 800959c:	6822      	ldr	r2, [r4, #0]
 800959e:	1b52      	subs	r2, r2, r5
 80095a0:	d420      	bmi.n	80095e4 <_malloc_r+0xd0>
 80095a2:	2a0b      	cmp	r2, #11
 80095a4:	d917      	bls.n	80095d6 <_malloc_r+0xc2>
 80095a6:	1961      	adds	r1, r4, r5
 80095a8:	42a3      	cmp	r3, r4
 80095aa:	6025      	str	r5, [r4, #0]
 80095ac:	bf18      	it	ne
 80095ae:	6059      	strne	r1, [r3, #4]
 80095b0:	6863      	ldr	r3, [r4, #4]
 80095b2:	bf08      	it	eq
 80095b4:	f8c8 1000 	streq.w	r1, [r8]
 80095b8:	5162      	str	r2, [r4, r5]
 80095ba:	604b      	str	r3, [r1, #4]
 80095bc:	4630      	mov	r0, r6
 80095be:	f000 f82f 	bl	8009620 <__malloc_unlock>
 80095c2:	f104 000b 	add.w	r0, r4, #11
 80095c6:	1d23      	adds	r3, r4, #4
 80095c8:	f020 0007 	bic.w	r0, r0, #7
 80095cc:	1ac2      	subs	r2, r0, r3
 80095ce:	bf1c      	itt	ne
 80095d0:	1a1b      	subne	r3, r3, r0
 80095d2:	50a3      	strne	r3, [r4, r2]
 80095d4:	e7af      	b.n	8009536 <_malloc_r+0x22>
 80095d6:	6862      	ldr	r2, [r4, #4]
 80095d8:	42a3      	cmp	r3, r4
 80095da:	bf0c      	ite	eq
 80095dc:	f8c8 2000 	streq.w	r2, [r8]
 80095e0:	605a      	strne	r2, [r3, #4]
 80095e2:	e7eb      	b.n	80095bc <_malloc_r+0xa8>
 80095e4:	4623      	mov	r3, r4
 80095e6:	6864      	ldr	r4, [r4, #4]
 80095e8:	e7ae      	b.n	8009548 <_malloc_r+0x34>
 80095ea:	463c      	mov	r4, r7
 80095ec:	687f      	ldr	r7, [r7, #4]
 80095ee:	e7b6      	b.n	800955e <_malloc_r+0x4a>
 80095f0:	461a      	mov	r2, r3
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	d1fb      	bne.n	80095f0 <_malloc_r+0xdc>
 80095f8:	2300      	movs	r3, #0
 80095fa:	6053      	str	r3, [r2, #4]
 80095fc:	e7de      	b.n	80095bc <_malloc_r+0xa8>
 80095fe:	230c      	movs	r3, #12
 8009600:	6033      	str	r3, [r6, #0]
 8009602:	4630      	mov	r0, r6
 8009604:	f000 f80c 	bl	8009620 <__malloc_unlock>
 8009608:	e794      	b.n	8009534 <_malloc_r+0x20>
 800960a:	6005      	str	r5, [r0, #0]
 800960c:	e7d6      	b.n	80095bc <_malloc_r+0xa8>
 800960e:	bf00      	nop
 8009610:	20002098 	.word	0x20002098

08009614 <__malloc_lock>:
 8009614:	4801      	ldr	r0, [pc, #4]	@ (800961c <__malloc_lock+0x8>)
 8009616:	f7ff bf0f 	b.w	8009438 <__retarget_lock_acquire_recursive>
 800961a:	bf00      	nop
 800961c:	20002090 	.word	0x20002090

08009620 <__malloc_unlock>:
 8009620:	4801      	ldr	r0, [pc, #4]	@ (8009628 <__malloc_unlock+0x8>)
 8009622:	f7ff bf0a 	b.w	800943a <__retarget_lock_release_recursive>
 8009626:	bf00      	nop
 8009628:	20002090 	.word	0x20002090

0800962c <__ssputs_r>:
 800962c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	688e      	ldr	r6, [r1, #8]
 8009632:	461f      	mov	r7, r3
 8009634:	42be      	cmp	r6, r7
 8009636:	680b      	ldr	r3, [r1, #0]
 8009638:	4682      	mov	sl, r0
 800963a:	460c      	mov	r4, r1
 800963c:	4690      	mov	r8, r2
 800963e:	d82d      	bhi.n	800969c <__ssputs_r+0x70>
 8009640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009648:	d026      	beq.n	8009698 <__ssputs_r+0x6c>
 800964a:	6965      	ldr	r5, [r4, #20]
 800964c:	6909      	ldr	r1, [r1, #16]
 800964e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009652:	eba3 0901 	sub.w	r9, r3, r1
 8009656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800965a:	1c7b      	adds	r3, r7, #1
 800965c:	444b      	add	r3, r9
 800965e:	106d      	asrs	r5, r5, #1
 8009660:	429d      	cmp	r5, r3
 8009662:	bf38      	it	cc
 8009664:	461d      	movcc	r5, r3
 8009666:	0553      	lsls	r3, r2, #21
 8009668:	d527      	bpl.n	80096ba <__ssputs_r+0x8e>
 800966a:	4629      	mov	r1, r5
 800966c:	f7ff ff52 	bl	8009514 <_malloc_r>
 8009670:	4606      	mov	r6, r0
 8009672:	b360      	cbz	r0, 80096ce <__ssputs_r+0xa2>
 8009674:	6921      	ldr	r1, [r4, #16]
 8009676:	464a      	mov	r2, r9
 8009678:	f000 fae6 	bl	8009c48 <memcpy>
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	6126      	str	r6, [r4, #16]
 800968a:	6165      	str	r5, [r4, #20]
 800968c:	444e      	add	r6, r9
 800968e:	eba5 0509 	sub.w	r5, r5, r9
 8009692:	6026      	str	r6, [r4, #0]
 8009694:	60a5      	str	r5, [r4, #8]
 8009696:	463e      	mov	r6, r7
 8009698:	42be      	cmp	r6, r7
 800969a:	d900      	bls.n	800969e <__ssputs_r+0x72>
 800969c:	463e      	mov	r6, r7
 800969e:	6820      	ldr	r0, [r4, #0]
 80096a0:	4632      	mov	r2, r6
 80096a2:	4641      	mov	r1, r8
 80096a4:	f000 faa6 	bl	8009bf4 <memmove>
 80096a8:	68a3      	ldr	r3, [r4, #8]
 80096aa:	1b9b      	subs	r3, r3, r6
 80096ac:	60a3      	str	r3, [r4, #8]
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	4433      	add	r3, r6
 80096b2:	6023      	str	r3, [r4, #0]
 80096b4:	2000      	movs	r0, #0
 80096b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ba:	462a      	mov	r2, r5
 80096bc:	f000 fad2 	bl	8009c64 <_realloc_r>
 80096c0:	4606      	mov	r6, r0
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d1e0      	bne.n	8009688 <__ssputs_r+0x5c>
 80096c6:	6921      	ldr	r1, [r4, #16]
 80096c8:	4650      	mov	r0, sl
 80096ca:	f7ff feb7 	bl	800943c <_free_r>
 80096ce:	230c      	movs	r3, #12
 80096d0:	f8ca 3000 	str.w	r3, [sl]
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096e0:	e7e9      	b.n	80096b6 <__ssputs_r+0x8a>
	...

080096e4 <_svfiprintf_r>:
 80096e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e8:	4698      	mov	r8, r3
 80096ea:	898b      	ldrh	r3, [r1, #12]
 80096ec:	061b      	lsls	r3, r3, #24
 80096ee:	b09d      	sub	sp, #116	@ 0x74
 80096f0:	4607      	mov	r7, r0
 80096f2:	460d      	mov	r5, r1
 80096f4:	4614      	mov	r4, r2
 80096f6:	d510      	bpl.n	800971a <_svfiprintf_r+0x36>
 80096f8:	690b      	ldr	r3, [r1, #16]
 80096fa:	b973      	cbnz	r3, 800971a <_svfiprintf_r+0x36>
 80096fc:	2140      	movs	r1, #64	@ 0x40
 80096fe:	f7ff ff09 	bl	8009514 <_malloc_r>
 8009702:	6028      	str	r0, [r5, #0]
 8009704:	6128      	str	r0, [r5, #16]
 8009706:	b930      	cbnz	r0, 8009716 <_svfiprintf_r+0x32>
 8009708:	230c      	movs	r3, #12
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009710:	b01d      	add	sp, #116	@ 0x74
 8009712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009716:	2340      	movs	r3, #64	@ 0x40
 8009718:	616b      	str	r3, [r5, #20]
 800971a:	2300      	movs	r3, #0
 800971c:	9309      	str	r3, [sp, #36]	@ 0x24
 800971e:	2320      	movs	r3, #32
 8009720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009724:	f8cd 800c 	str.w	r8, [sp, #12]
 8009728:	2330      	movs	r3, #48	@ 0x30
 800972a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098c8 <_svfiprintf_r+0x1e4>
 800972e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009732:	f04f 0901 	mov.w	r9, #1
 8009736:	4623      	mov	r3, r4
 8009738:	469a      	mov	sl, r3
 800973a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800973e:	b10a      	cbz	r2, 8009744 <_svfiprintf_r+0x60>
 8009740:	2a25      	cmp	r2, #37	@ 0x25
 8009742:	d1f9      	bne.n	8009738 <_svfiprintf_r+0x54>
 8009744:	ebba 0b04 	subs.w	fp, sl, r4
 8009748:	d00b      	beq.n	8009762 <_svfiprintf_r+0x7e>
 800974a:	465b      	mov	r3, fp
 800974c:	4622      	mov	r2, r4
 800974e:	4629      	mov	r1, r5
 8009750:	4638      	mov	r0, r7
 8009752:	f7ff ff6b 	bl	800962c <__ssputs_r>
 8009756:	3001      	adds	r0, #1
 8009758:	f000 80a7 	beq.w	80098aa <_svfiprintf_r+0x1c6>
 800975c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800975e:	445a      	add	r2, fp
 8009760:	9209      	str	r2, [sp, #36]	@ 0x24
 8009762:	f89a 3000 	ldrb.w	r3, [sl]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 809f 	beq.w	80098aa <_svfiprintf_r+0x1c6>
 800976c:	2300      	movs	r3, #0
 800976e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009776:	f10a 0a01 	add.w	sl, sl, #1
 800977a:	9304      	str	r3, [sp, #16]
 800977c:	9307      	str	r3, [sp, #28]
 800977e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009782:	931a      	str	r3, [sp, #104]	@ 0x68
 8009784:	4654      	mov	r4, sl
 8009786:	2205      	movs	r2, #5
 8009788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978c:	484e      	ldr	r0, [pc, #312]	@ (80098c8 <_svfiprintf_r+0x1e4>)
 800978e:	f7f6 fd27 	bl	80001e0 <memchr>
 8009792:	9a04      	ldr	r2, [sp, #16]
 8009794:	b9d8      	cbnz	r0, 80097ce <_svfiprintf_r+0xea>
 8009796:	06d0      	lsls	r0, r2, #27
 8009798:	bf44      	itt	mi
 800979a:	2320      	movmi	r3, #32
 800979c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097a0:	0711      	lsls	r1, r2, #28
 80097a2:	bf44      	itt	mi
 80097a4:	232b      	movmi	r3, #43	@ 0x2b
 80097a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097aa:	f89a 3000 	ldrb.w	r3, [sl]
 80097ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80097b0:	d015      	beq.n	80097de <_svfiprintf_r+0xfa>
 80097b2:	9a07      	ldr	r2, [sp, #28]
 80097b4:	4654      	mov	r4, sl
 80097b6:	2000      	movs	r0, #0
 80097b8:	f04f 0c0a 	mov.w	ip, #10
 80097bc:	4621      	mov	r1, r4
 80097be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097c2:	3b30      	subs	r3, #48	@ 0x30
 80097c4:	2b09      	cmp	r3, #9
 80097c6:	d94b      	bls.n	8009860 <_svfiprintf_r+0x17c>
 80097c8:	b1b0      	cbz	r0, 80097f8 <_svfiprintf_r+0x114>
 80097ca:	9207      	str	r2, [sp, #28]
 80097cc:	e014      	b.n	80097f8 <_svfiprintf_r+0x114>
 80097ce:	eba0 0308 	sub.w	r3, r0, r8
 80097d2:	fa09 f303 	lsl.w	r3, r9, r3
 80097d6:	4313      	orrs	r3, r2
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	46a2      	mov	sl, r4
 80097dc:	e7d2      	b.n	8009784 <_svfiprintf_r+0xa0>
 80097de:	9b03      	ldr	r3, [sp, #12]
 80097e0:	1d19      	adds	r1, r3, #4
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	9103      	str	r1, [sp, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	bfbb      	ittet	lt
 80097ea:	425b      	neglt	r3, r3
 80097ec:	f042 0202 	orrlt.w	r2, r2, #2
 80097f0:	9307      	strge	r3, [sp, #28]
 80097f2:	9307      	strlt	r3, [sp, #28]
 80097f4:	bfb8      	it	lt
 80097f6:	9204      	strlt	r2, [sp, #16]
 80097f8:	7823      	ldrb	r3, [r4, #0]
 80097fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80097fc:	d10a      	bne.n	8009814 <_svfiprintf_r+0x130>
 80097fe:	7863      	ldrb	r3, [r4, #1]
 8009800:	2b2a      	cmp	r3, #42	@ 0x2a
 8009802:	d132      	bne.n	800986a <_svfiprintf_r+0x186>
 8009804:	9b03      	ldr	r3, [sp, #12]
 8009806:	1d1a      	adds	r2, r3, #4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	9203      	str	r2, [sp, #12]
 800980c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009810:	3402      	adds	r4, #2
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098d8 <_svfiprintf_r+0x1f4>
 8009818:	7821      	ldrb	r1, [r4, #0]
 800981a:	2203      	movs	r2, #3
 800981c:	4650      	mov	r0, sl
 800981e:	f7f6 fcdf 	bl	80001e0 <memchr>
 8009822:	b138      	cbz	r0, 8009834 <_svfiprintf_r+0x150>
 8009824:	9b04      	ldr	r3, [sp, #16]
 8009826:	eba0 000a 	sub.w	r0, r0, sl
 800982a:	2240      	movs	r2, #64	@ 0x40
 800982c:	4082      	lsls	r2, r0
 800982e:	4313      	orrs	r3, r2
 8009830:	3401      	adds	r4, #1
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009838:	4824      	ldr	r0, [pc, #144]	@ (80098cc <_svfiprintf_r+0x1e8>)
 800983a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800983e:	2206      	movs	r2, #6
 8009840:	f7f6 fcce 	bl	80001e0 <memchr>
 8009844:	2800      	cmp	r0, #0
 8009846:	d036      	beq.n	80098b6 <_svfiprintf_r+0x1d2>
 8009848:	4b21      	ldr	r3, [pc, #132]	@ (80098d0 <_svfiprintf_r+0x1ec>)
 800984a:	bb1b      	cbnz	r3, 8009894 <_svfiprintf_r+0x1b0>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	3307      	adds	r3, #7
 8009850:	f023 0307 	bic.w	r3, r3, #7
 8009854:	3308      	adds	r3, #8
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800985a:	4433      	add	r3, r6
 800985c:	9309      	str	r3, [sp, #36]	@ 0x24
 800985e:	e76a      	b.n	8009736 <_svfiprintf_r+0x52>
 8009860:	fb0c 3202 	mla	r2, ip, r2, r3
 8009864:	460c      	mov	r4, r1
 8009866:	2001      	movs	r0, #1
 8009868:	e7a8      	b.n	80097bc <_svfiprintf_r+0xd8>
 800986a:	2300      	movs	r3, #0
 800986c:	3401      	adds	r4, #1
 800986e:	9305      	str	r3, [sp, #20]
 8009870:	4619      	mov	r1, r3
 8009872:	f04f 0c0a 	mov.w	ip, #10
 8009876:	4620      	mov	r0, r4
 8009878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800987c:	3a30      	subs	r2, #48	@ 0x30
 800987e:	2a09      	cmp	r2, #9
 8009880:	d903      	bls.n	800988a <_svfiprintf_r+0x1a6>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d0c6      	beq.n	8009814 <_svfiprintf_r+0x130>
 8009886:	9105      	str	r1, [sp, #20]
 8009888:	e7c4      	b.n	8009814 <_svfiprintf_r+0x130>
 800988a:	fb0c 2101 	mla	r1, ip, r1, r2
 800988e:	4604      	mov	r4, r0
 8009890:	2301      	movs	r3, #1
 8009892:	e7f0      	b.n	8009876 <_svfiprintf_r+0x192>
 8009894:	ab03      	add	r3, sp, #12
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	462a      	mov	r2, r5
 800989a:	4b0e      	ldr	r3, [pc, #56]	@ (80098d4 <_svfiprintf_r+0x1f0>)
 800989c:	a904      	add	r1, sp, #16
 800989e:	4638      	mov	r0, r7
 80098a0:	f3af 8000 	nop.w
 80098a4:	1c42      	adds	r2, r0, #1
 80098a6:	4606      	mov	r6, r0
 80098a8:	d1d6      	bne.n	8009858 <_svfiprintf_r+0x174>
 80098aa:	89ab      	ldrh	r3, [r5, #12]
 80098ac:	065b      	lsls	r3, r3, #25
 80098ae:	f53f af2d 	bmi.w	800970c <_svfiprintf_r+0x28>
 80098b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098b4:	e72c      	b.n	8009710 <_svfiprintf_r+0x2c>
 80098b6:	ab03      	add	r3, sp, #12
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	462a      	mov	r2, r5
 80098bc:	4b05      	ldr	r3, [pc, #20]	@ (80098d4 <_svfiprintf_r+0x1f0>)
 80098be:	a904      	add	r1, sp, #16
 80098c0:	4638      	mov	r0, r7
 80098c2:	f000 f879 	bl	80099b8 <_printf_i>
 80098c6:	e7ed      	b.n	80098a4 <_svfiprintf_r+0x1c0>
 80098c8:	0800a078 	.word	0x0800a078
 80098cc:	0800a082 	.word	0x0800a082
 80098d0:	00000000 	.word	0x00000000
 80098d4:	0800962d 	.word	0x0800962d
 80098d8:	0800a07e 	.word	0x0800a07e

080098dc <_printf_common>:
 80098dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e0:	4616      	mov	r6, r2
 80098e2:	4698      	mov	r8, r3
 80098e4:	688a      	ldr	r2, [r1, #8]
 80098e6:	690b      	ldr	r3, [r1, #16]
 80098e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	bfb8      	it	lt
 80098f0:	4613      	movlt	r3, r2
 80098f2:	6033      	str	r3, [r6, #0]
 80098f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098f8:	4607      	mov	r7, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	b10a      	cbz	r2, 8009902 <_printf_common+0x26>
 80098fe:	3301      	adds	r3, #1
 8009900:	6033      	str	r3, [r6, #0]
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	0699      	lsls	r1, r3, #26
 8009906:	bf42      	ittt	mi
 8009908:	6833      	ldrmi	r3, [r6, #0]
 800990a:	3302      	addmi	r3, #2
 800990c:	6033      	strmi	r3, [r6, #0]
 800990e:	6825      	ldr	r5, [r4, #0]
 8009910:	f015 0506 	ands.w	r5, r5, #6
 8009914:	d106      	bne.n	8009924 <_printf_common+0x48>
 8009916:	f104 0a19 	add.w	sl, r4, #25
 800991a:	68e3      	ldr	r3, [r4, #12]
 800991c:	6832      	ldr	r2, [r6, #0]
 800991e:	1a9b      	subs	r3, r3, r2
 8009920:	42ab      	cmp	r3, r5
 8009922:	dc26      	bgt.n	8009972 <_printf_common+0x96>
 8009924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009928:	6822      	ldr	r2, [r4, #0]
 800992a:	3b00      	subs	r3, #0
 800992c:	bf18      	it	ne
 800992e:	2301      	movne	r3, #1
 8009930:	0692      	lsls	r2, r2, #26
 8009932:	d42b      	bmi.n	800998c <_printf_common+0xb0>
 8009934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009938:	4641      	mov	r1, r8
 800993a:	4638      	mov	r0, r7
 800993c:	47c8      	blx	r9
 800993e:	3001      	adds	r0, #1
 8009940:	d01e      	beq.n	8009980 <_printf_common+0xa4>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	6922      	ldr	r2, [r4, #16]
 8009946:	f003 0306 	and.w	r3, r3, #6
 800994a:	2b04      	cmp	r3, #4
 800994c:	bf02      	ittt	eq
 800994e:	68e5      	ldreq	r5, [r4, #12]
 8009950:	6833      	ldreq	r3, [r6, #0]
 8009952:	1aed      	subeq	r5, r5, r3
 8009954:	68a3      	ldr	r3, [r4, #8]
 8009956:	bf0c      	ite	eq
 8009958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800995c:	2500      	movne	r5, #0
 800995e:	4293      	cmp	r3, r2
 8009960:	bfc4      	itt	gt
 8009962:	1a9b      	subgt	r3, r3, r2
 8009964:	18ed      	addgt	r5, r5, r3
 8009966:	2600      	movs	r6, #0
 8009968:	341a      	adds	r4, #26
 800996a:	42b5      	cmp	r5, r6
 800996c:	d11a      	bne.n	80099a4 <_printf_common+0xc8>
 800996e:	2000      	movs	r0, #0
 8009970:	e008      	b.n	8009984 <_printf_common+0xa8>
 8009972:	2301      	movs	r3, #1
 8009974:	4652      	mov	r2, sl
 8009976:	4641      	mov	r1, r8
 8009978:	4638      	mov	r0, r7
 800997a:	47c8      	blx	r9
 800997c:	3001      	adds	r0, #1
 800997e:	d103      	bne.n	8009988 <_printf_common+0xac>
 8009980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009988:	3501      	adds	r5, #1
 800998a:	e7c6      	b.n	800991a <_printf_common+0x3e>
 800998c:	18e1      	adds	r1, r4, r3
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	2030      	movs	r0, #48	@ 0x30
 8009992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009996:	4422      	add	r2, r4
 8009998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800999c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099a0:	3302      	adds	r3, #2
 80099a2:	e7c7      	b.n	8009934 <_printf_common+0x58>
 80099a4:	2301      	movs	r3, #1
 80099a6:	4622      	mov	r2, r4
 80099a8:	4641      	mov	r1, r8
 80099aa:	4638      	mov	r0, r7
 80099ac:	47c8      	blx	r9
 80099ae:	3001      	adds	r0, #1
 80099b0:	d0e6      	beq.n	8009980 <_printf_common+0xa4>
 80099b2:	3601      	adds	r6, #1
 80099b4:	e7d9      	b.n	800996a <_printf_common+0x8e>
	...

080099b8 <_printf_i>:
 80099b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099bc:	7e0f      	ldrb	r7, [r1, #24]
 80099be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099c0:	2f78      	cmp	r7, #120	@ 0x78
 80099c2:	4691      	mov	r9, r2
 80099c4:	4680      	mov	r8, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	469a      	mov	sl, r3
 80099ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099ce:	d807      	bhi.n	80099e0 <_printf_i+0x28>
 80099d0:	2f62      	cmp	r7, #98	@ 0x62
 80099d2:	d80a      	bhi.n	80099ea <_printf_i+0x32>
 80099d4:	2f00      	cmp	r7, #0
 80099d6:	f000 80d1 	beq.w	8009b7c <_printf_i+0x1c4>
 80099da:	2f58      	cmp	r7, #88	@ 0x58
 80099dc:	f000 80b8 	beq.w	8009b50 <_printf_i+0x198>
 80099e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099e8:	e03a      	b.n	8009a60 <_printf_i+0xa8>
 80099ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099ee:	2b15      	cmp	r3, #21
 80099f0:	d8f6      	bhi.n	80099e0 <_printf_i+0x28>
 80099f2:	a101      	add	r1, pc, #4	@ (adr r1, 80099f8 <_printf_i+0x40>)
 80099f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099f8:	08009a51 	.word	0x08009a51
 80099fc:	08009a65 	.word	0x08009a65
 8009a00:	080099e1 	.word	0x080099e1
 8009a04:	080099e1 	.word	0x080099e1
 8009a08:	080099e1 	.word	0x080099e1
 8009a0c:	080099e1 	.word	0x080099e1
 8009a10:	08009a65 	.word	0x08009a65
 8009a14:	080099e1 	.word	0x080099e1
 8009a18:	080099e1 	.word	0x080099e1
 8009a1c:	080099e1 	.word	0x080099e1
 8009a20:	080099e1 	.word	0x080099e1
 8009a24:	08009b63 	.word	0x08009b63
 8009a28:	08009a8f 	.word	0x08009a8f
 8009a2c:	08009b1d 	.word	0x08009b1d
 8009a30:	080099e1 	.word	0x080099e1
 8009a34:	080099e1 	.word	0x080099e1
 8009a38:	08009b85 	.word	0x08009b85
 8009a3c:	080099e1 	.word	0x080099e1
 8009a40:	08009a8f 	.word	0x08009a8f
 8009a44:	080099e1 	.word	0x080099e1
 8009a48:	080099e1 	.word	0x080099e1
 8009a4c:	08009b25 	.word	0x08009b25
 8009a50:	6833      	ldr	r3, [r6, #0]
 8009a52:	1d1a      	adds	r2, r3, #4
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6032      	str	r2, [r6, #0]
 8009a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a60:	2301      	movs	r3, #1
 8009a62:	e09c      	b.n	8009b9e <_printf_i+0x1e6>
 8009a64:	6833      	ldr	r3, [r6, #0]
 8009a66:	6820      	ldr	r0, [r4, #0]
 8009a68:	1d19      	adds	r1, r3, #4
 8009a6a:	6031      	str	r1, [r6, #0]
 8009a6c:	0606      	lsls	r6, r0, #24
 8009a6e:	d501      	bpl.n	8009a74 <_printf_i+0xbc>
 8009a70:	681d      	ldr	r5, [r3, #0]
 8009a72:	e003      	b.n	8009a7c <_printf_i+0xc4>
 8009a74:	0645      	lsls	r5, r0, #25
 8009a76:	d5fb      	bpl.n	8009a70 <_printf_i+0xb8>
 8009a78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a7c:	2d00      	cmp	r5, #0
 8009a7e:	da03      	bge.n	8009a88 <_printf_i+0xd0>
 8009a80:	232d      	movs	r3, #45	@ 0x2d
 8009a82:	426d      	negs	r5, r5
 8009a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a88:	4858      	ldr	r0, [pc, #352]	@ (8009bec <_printf_i+0x234>)
 8009a8a:	230a      	movs	r3, #10
 8009a8c:	e011      	b.n	8009ab2 <_printf_i+0xfa>
 8009a8e:	6821      	ldr	r1, [r4, #0]
 8009a90:	6833      	ldr	r3, [r6, #0]
 8009a92:	0608      	lsls	r0, r1, #24
 8009a94:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a98:	d402      	bmi.n	8009aa0 <_printf_i+0xe8>
 8009a9a:	0649      	lsls	r1, r1, #25
 8009a9c:	bf48      	it	mi
 8009a9e:	b2ad      	uxthmi	r5, r5
 8009aa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009aa2:	4852      	ldr	r0, [pc, #328]	@ (8009bec <_printf_i+0x234>)
 8009aa4:	6033      	str	r3, [r6, #0]
 8009aa6:	bf14      	ite	ne
 8009aa8:	230a      	movne	r3, #10
 8009aaa:	2308      	moveq	r3, #8
 8009aac:	2100      	movs	r1, #0
 8009aae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ab2:	6866      	ldr	r6, [r4, #4]
 8009ab4:	60a6      	str	r6, [r4, #8]
 8009ab6:	2e00      	cmp	r6, #0
 8009ab8:	db05      	blt.n	8009ac6 <_printf_i+0x10e>
 8009aba:	6821      	ldr	r1, [r4, #0]
 8009abc:	432e      	orrs	r6, r5
 8009abe:	f021 0104 	bic.w	r1, r1, #4
 8009ac2:	6021      	str	r1, [r4, #0]
 8009ac4:	d04b      	beq.n	8009b5e <_printf_i+0x1a6>
 8009ac6:	4616      	mov	r6, r2
 8009ac8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009acc:	fb03 5711 	mls	r7, r3, r1, r5
 8009ad0:	5dc7      	ldrb	r7, [r0, r7]
 8009ad2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ad6:	462f      	mov	r7, r5
 8009ad8:	42bb      	cmp	r3, r7
 8009ada:	460d      	mov	r5, r1
 8009adc:	d9f4      	bls.n	8009ac8 <_printf_i+0x110>
 8009ade:	2b08      	cmp	r3, #8
 8009ae0:	d10b      	bne.n	8009afa <_printf_i+0x142>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	07df      	lsls	r7, r3, #31
 8009ae6:	d508      	bpl.n	8009afa <_printf_i+0x142>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	6861      	ldr	r1, [r4, #4]
 8009aec:	4299      	cmp	r1, r3
 8009aee:	bfde      	ittt	le
 8009af0:	2330      	movle	r3, #48	@ 0x30
 8009af2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009af6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009afa:	1b92      	subs	r2, r2, r6
 8009afc:	6122      	str	r2, [r4, #16]
 8009afe:	f8cd a000 	str.w	sl, [sp]
 8009b02:	464b      	mov	r3, r9
 8009b04:	aa03      	add	r2, sp, #12
 8009b06:	4621      	mov	r1, r4
 8009b08:	4640      	mov	r0, r8
 8009b0a:	f7ff fee7 	bl	80098dc <_printf_common>
 8009b0e:	3001      	adds	r0, #1
 8009b10:	d14a      	bne.n	8009ba8 <_printf_i+0x1f0>
 8009b12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b16:	b004      	add	sp, #16
 8009b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	f043 0320 	orr.w	r3, r3, #32
 8009b22:	6023      	str	r3, [r4, #0]
 8009b24:	4832      	ldr	r0, [pc, #200]	@ (8009bf0 <_printf_i+0x238>)
 8009b26:	2778      	movs	r7, #120	@ 0x78
 8009b28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	6831      	ldr	r1, [r6, #0]
 8009b30:	061f      	lsls	r7, r3, #24
 8009b32:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b36:	d402      	bmi.n	8009b3e <_printf_i+0x186>
 8009b38:	065f      	lsls	r7, r3, #25
 8009b3a:	bf48      	it	mi
 8009b3c:	b2ad      	uxthmi	r5, r5
 8009b3e:	6031      	str	r1, [r6, #0]
 8009b40:	07d9      	lsls	r1, r3, #31
 8009b42:	bf44      	itt	mi
 8009b44:	f043 0320 	orrmi.w	r3, r3, #32
 8009b48:	6023      	strmi	r3, [r4, #0]
 8009b4a:	b11d      	cbz	r5, 8009b54 <_printf_i+0x19c>
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	e7ad      	b.n	8009aac <_printf_i+0xf4>
 8009b50:	4826      	ldr	r0, [pc, #152]	@ (8009bec <_printf_i+0x234>)
 8009b52:	e7e9      	b.n	8009b28 <_printf_i+0x170>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	f023 0320 	bic.w	r3, r3, #32
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	e7f6      	b.n	8009b4c <_printf_i+0x194>
 8009b5e:	4616      	mov	r6, r2
 8009b60:	e7bd      	b.n	8009ade <_printf_i+0x126>
 8009b62:	6833      	ldr	r3, [r6, #0]
 8009b64:	6825      	ldr	r5, [r4, #0]
 8009b66:	6961      	ldr	r1, [r4, #20]
 8009b68:	1d18      	adds	r0, r3, #4
 8009b6a:	6030      	str	r0, [r6, #0]
 8009b6c:	062e      	lsls	r6, r5, #24
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	d501      	bpl.n	8009b76 <_printf_i+0x1be>
 8009b72:	6019      	str	r1, [r3, #0]
 8009b74:	e002      	b.n	8009b7c <_printf_i+0x1c4>
 8009b76:	0668      	lsls	r0, r5, #25
 8009b78:	d5fb      	bpl.n	8009b72 <_printf_i+0x1ba>
 8009b7a:	8019      	strh	r1, [r3, #0]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	4616      	mov	r6, r2
 8009b82:	e7bc      	b.n	8009afe <_printf_i+0x146>
 8009b84:	6833      	ldr	r3, [r6, #0]
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	6032      	str	r2, [r6, #0]
 8009b8a:	681e      	ldr	r6, [r3, #0]
 8009b8c:	6862      	ldr	r2, [r4, #4]
 8009b8e:	2100      	movs	r1, #0
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7f6 fb25 	bl	80001e0 <memchr>
 8009b96:	b108      	cbz	r0, 8009b9c <_printf_i+0x1e4>
 8009b98:	1b80      	subs	r0, r0, r6
 8009b9a:	6060      	str	r0, [r4, #4]
 8009b9c:	6863      	ldr	r3, [r4, #4]
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ba6:	e7aa      	b.n	8009afe <_printf_i+0x146>
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	4632      	mov	r2, r6
 8009bac:	4649      	mov	r1, r9
 8009bae:	4640      	mov	r0, r8
 8009bb0:	47d0      	blx	sl
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d0ad      	beq.n	8009b12 <_printf_i+0x15a>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	079b      	lsls	r3, r3, #30
 8009bba:	d413      	bmi.n	8009be4 <_printf_i+0x22c>
 8009bbc:	68e0      	ldr	r0, [r4, #12]
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	4298      	cmp	r0, r3
 8009bc2:	bfb8      	it	lt
 8009bc4:	4618      	movlt	r0, r3
 8009bc6:	e7a6      	b.n	8009b16 <_printf_i+0x15e>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	4632      	mov	r2, r6
 8009bcc:	4649      	mov	r1, r9
 8009bce:	4640      	mov	r0, r8
 8009bd0:	47d0      	blx	sl
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	d09d      	beq.n	8009b12 <_printf_i+0x15a>
 8009bd6:	3501      	adds	r5, #1
 8009bd8:	68e3      	ldr	r3, [r4, #12]
 8009bda:	9903      	ldr	r1, [sp, #12]
 8009bdc:	1a5b      	subs	r3, r3, r1
 8009bde:	42ab      	cmp	r3, r5
 8009be0:	dcf2      	bgt.n	8009bc8 <_printf_i+0x210>
 8009be2:	e7eb      	b.n	8009bbc <_printf_i+0x204>
 8009be4:	2500      	movs	r5, #0
 8009be6:	f104 0619 	add.w	r6, r4, #25
 8009bea:	e7f5      	b.n	8009bd8 <_printf_i+0x220>
 8009bec:	0800a089 	.word	0x0800a089
 8009bf0:	0800a09a 	.word	0x0800a09a

08009bf4 <memmove>:
 8009bf4:	4288      	cmp	r0, r1
 8009bf6:	b510      	push	{r4, lr}
 8009bf8:	eb01 0402 	add.w	r4, r1, r2
 8009bfc:	d902      	bls.n	8009c04 <memmove+0x10>
 8009bfe:	4284      	cmp	r4, r0
 8009c00:	4623      	mov	r3, r4
 8009c02:	d807      	bhi.n	8009c14 <memmove+0x20>
 8009c04:	1e43      	subs	r3, r0, #1
 8009c06:	42a1      	cmp	r1, r4
 8009c08:	d008      	beq.n	8009c1c <memmove+0x28>
 8009c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c12:	e7f8      	b.n	8009c06 <memmove+0x12>
 8009c14:	4402      	add	r2, r0
 8009c16:	4601      	mov	r1, r0
 8009c18:	428a      	cmp	r2, r1
 8009c1a:	d100      	bne.n	8009c1e <memmove+0x2a>
 8009c1c:	bd10      	pop	{r4, pc}
 8009c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c26:	e7f7      	b.n	8009c18 <memmove+0x24>

08009c28 <_sbrk_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d06      	ldr	r5, [pc, #24]	@ (8009c44 <_sbrk_r+0x1c>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	f7f8 fff0 	bl	8002c18 <_sbrk>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_sbrk_r+0x1a>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_sbrk_r+0x1a>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	2000208c 	.word	0x2000208c

08009c48 <memcpy>:
 8009c48:	440a      	add	r2, r1
 8009c4a:	4291      	cmp	r1, r2
 8009c4c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009c50:	d100      	bne.n	8009c54 <memcpy+0xc>
 8009c52:	4770      	bx	lr
 8009c54:	b510      	push	{r4, lr}
 8009c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c5e:	4291      	cmp	r1, r2
 8009c60:	d1f9      	bne.n	8009c56 <memcpy+0xe>
 8009c62:	bd10      	pop	{r4, pc}

08009c64 <_realloc_r>:
 8009c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c68:	4607      	mov	r7, r0
 8009c6a:	4614      	mov	r4, r2
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	b921      	cbnz	r1, 8009c7a <_realloc_r+0x16>
 8009c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c74:	4611      	mov	r1, r2
 8009c76:	f7ff bc4d 	b.w	8009514 <_malloc_r>
 8009c7a:	b92a      	cbnz	r2, 8009c88 <_realloc_r+0x24>
 8009c7c:	f7ff fbde 	bl	800943c <_free_r>
 8009c80:	4625      	mov	r5, r4
 8009c82:	4628      	mov	r0, r5
 8009c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c88:	f000 f81a 	bl	8009cc0 <_malloc_usable_size_r>
 8009c8c:	4284      	cmp	r4, r0
 8009c8e:	4606      	mov	r6, r0
 8009c90:	d802      	bhi.n	8009c98 <_realloc_r+0x34>
 8009c92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c96:	d8f4      	bhi.n	8009c82 <_realloc_r+0x1e>
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	f7ff fc3a 	bl	8009514 <_malloc_r>
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	b908      	cbnz	r0, 8009ca8 <_realloc_r+0x44>
 8009ca4:	4645      	mov	r5, r8
 8009ca6:	e7ec      	b.n	8009c82 <_realloc_r+0x1e>
 8009ca8:	42b4      	cmp	r4, r6
 8009caa:	4622      	mov	r2, r4
 8009cac:	4629      	mov	r1, r5
 8009cae:	bf28      	it	cs
 8009cb0:	4632      	movcs	r2, r6
 8009cb2:	f7ff ffc9 	bl	8009c48 <memcpy>
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f7ff fbbf 	bl	800943c <_free_r>
 8009cbe:	e7f1      	b.n	8009ca4 <_realloc_r+0x40>

08009cc0 <_malloc_usable_size_r>:
 8009cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc4:	1f18      	subs	r0, r3, #4
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bfbc      	itt	lt
 8009cca:	580b      	ldrlt	r3, [r1, r0]
 8009ccc:	18c0      	addlt	r0, r0, r3
 8009cce:	4770      	bx	lr

08009cd0 <_init>:
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd2:	bf00      	nop
 8009cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd6:	bc08      	pop	{r3}
 8009cd8:	469e      	mov	lr, r3
 8009cda:	4770      	bx	lr

08009cdc <_fini>:
 8009cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cde:	bf00      	nop
 8009ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce2:	bc08      	pop	{r3}
 8009ce4:	469e      	mov	lr, r3
 8009ce6:	4770      	bx	lr
