//$file${../include::elevator.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: elevetor.qm
// File:  ${../include::elevator.h}
//
// This code has been generated by QM 7.0.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${../include::elevator.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef elevator_h_
#define elevator_h_
#include "qpc.h"
//$declare${shared::MAX_LEVELS} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${shared::MAX_LEVELS} ......................................................
#define MAX_LEVELS ((uint8_t)9U)
//$enddecl${shared::MAX_LEVELS} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef BSP_TICKS_PER_SEC
#define BSP_TICKS_PER_SEC 100U // Define a constant value for BSP_TICKS_PER_SEC
#endif

//$declare${shared} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${shared::requestEvt} ......................................................
typedef struct {
// protected:
    QEvt super;

// public:
    uint8_t level;
} requestEvt;

//${shared::MAX_LEVELS} ......................................................
#define MAX_LEVELS ((uint8_t)9U)

//${shared::app_sigs} ........................................................
enum app_sigs {
    mTIMEOUT_SIG = Q_USER_SIG,
    sTIMEOUT_SIG,
    PAUSE_SIG,
    RESUME_SIG,
    SWITCH_SIG,
    ENTER_REQUEST_SIG,
    EXIT_REQUEST_SIG,
    INSIDE_REQUEST_SIG,
    CLOSE_INTERRUPT_SIG,
    MAX_SIG,
};

//${shared::timeMacros} ......................................................
enum timeMacros {
    CLOSING_TIME = 2U * BSP_TICKS_PER_SEC,
    OPENNING_TIME= CLOSING_TIME,
    OPENED_WAIT_TIME = 4U * BSP_TICKS_PER_SEC,
    TRANSITION_INTERVAL = 3U * BSP_TICKS_PER_SEC,
};

//${shared::requests} ........................................................
extern uint16_t requests;
//$enddecl${shared} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


//$declare${AOs::Elevator} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Elevator} ...........................................................
typedef struct {
// protected:
    QActive super;

// private:
    uint8_t current;
    uint8_t next;
    QTimeEvt stationaryTEvt;
    QTimeEvt motionTEvt;

// private state histories
    QStateHandler hist_motion;
} Elevator;

// protected:
QState Elevator_initial(Elevator * const me, void const * const par);
QState Elevator_operational(Elevator * const me, QEvt const * const e);
QState Elevator_Stationary(Elevator * const me, QEvt const * const e);
QState Elevator_Closing(Elevator * const me, QEvt const * const e);
QState Elevator_Openning(Elevator * const me, QEvt const * const e);
QState Elevator_Opened(Elevator * const me, QEvt const * const e);
QState Elevator_closed(Elevator * const me, QEvt const * const e);
QState Elevator_motion(Elevator * const me, QEvt const * const e);
QState Elevator_upWards(Elevator * const me, QEvt const * const e);
QState Elevator_downWards(Elevator * const me, QEvt const * const e);
//$enddecl${AOs::Elevator} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${AOs::AOElevator} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AOElevator} .........................................................
extern QActive * AOElevator;
//$enddecl${AOs::AOElevator} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${AOs::Elevator_Ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Elevator_Ctor} ......................................................
void Elevator_Ctor(void);
//$enddecl${AOs::Elevator_Ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$declare${AOs::Requestor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Requestor} ..........................................................
typedef struct {
// protected:
    QActive super;
} Requestor;

// protected:
QState Requestor_initial(Requestor * const me, void const * const par);
QState Requestor_requesting_state(Requestor * const me, QEvt const * const e);
//$enddecl${AOs::Requestor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${AOs::Requestor_Ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Requestor_Ctor} .....................................................
void Requestor_Ctor(void);
//$enddecl${AOs::Requestor_Ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${AOs::AORequestor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AORequestor} ........................................................
extern QActive * AORequestor;
//$enddecl${AOs::AORequestor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



#endif
