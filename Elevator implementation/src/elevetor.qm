<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.1" links="0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <framework name="qpc"/>
 <package name="shared" stereotype="0x01">
  <class name="requestEvt" superclass="qpc::QEvt">
   <attribute name="level" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <attribute name="MAX_LEVELS" type="uint8_t" visibility="0x03" properties="0x00">
   <code>((uint8_t)9U)</code>
  </attribute>
  <attribute name="app_sigs" type="enum" visibility="0x04" properties="0x00">
   <code>{
    mTIMEOUT_SIG = Q_USER_SIG,
    sTIMEOUT_SIG,
    PAUSE_SIG,
    RESUME_SIG,
    SWITCH_SIG,
    ENTER_REQUEST_SIG,
    EXIT_REQUEST_SIG,
    INSIDE_REQUEST_SIG,
    CLOSE_INTERRUPT_SIG,
    MAX_SIG,
};</code>
  </attribute>
  <attribute name="timeMacros" type="enum" visibility="0x04" properties="0x00">
   <code>{
    CLOSING_TIME = 2U * BSP_TICKS_PER_SEC,
    OPENNING_TIME= CLOSING_TIME,
    OPENED_WAIT_TIME = 4U * BSP_TICKS_PER_SEC,
    TRANSITION_INTERVAL = 3U * BSP_TICKS_PER_SEC,
};</code>
  </attribute>
  <attribute name="requests" type="uint16_t" visibility="0x00" properties="0x00">
   <code>=0U;</code>
  </attribute>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="Elevator" superclass="qpc::QActive">
   <attribute name="current" type="uint8_t" visibility="0x02" properties="0x00">
    <code>= 0XFFU;</code>
   </attribute>
   <attribute name="next" type="uint8_t" visibility="0x02" properties="0x00">
    <code>=0XFFU;</code>
   </attribute>
   <attribute name="stationaryTEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="motionTEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <statechart properties="0x00">
    <initial target="../1">
     <initial_glyph conn="43,3,5,0,11,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="operational">
     <initial target="../1">
      <initial_glyph conn="18,13,5,0,27,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="Stationary">
      <exit>QTimeEvt_disarm(&amp;me-&gt;stationaryTEvt);
orangeOn();
</exit>
      <initial target="../4">
       <initial_glyph conn="35,22,5,0,-14,3">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <state name="Closing">
       <entry>QTimeEvt_armX(&amp;me-&gt;stationaryTEvt, CLOSING_TIME, 0U); /*&lt;== one shot */
</entry>
       <tran trig="sTIMEOUT">
        <action>unregister_request(me-&gt;current);</action>
        <choice target="../../../4">
         <guard>registry_Empyt()</guard>
         <choice_glyph conn="39,51,5,2,-19,-4">
          <action box="-15,-3,13,3"/>
         </choice_glyph>
        </choice>
        <choice target="../../../../2" cpref="../../../../2/1">
         <guard>else</guard>
         <choice_glyph conn="39,51,4,0,9,-2,2">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="39,46,2,-1,5">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="CLOSE_INTERRUPT" target="../../2">
        <action>QTimeEvt_disarm(&amp;me-&gt;stationaryTEvt); 
</action>
        <tran_glyph conn="34,32,0,3,-4,11">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="28,32,15,14">
        <entry box="0,3,6,2"/>
       </state_glyph>
      </state>
      <state name="Openning">
       <entry>orangeOff();
QTimeEvt_armX(&amp;me-&gt;stationaryTEvt, OPENNING_TIME, 0U); /*&lt;== one shot */</entry>
       <tran trig="sTIMEOUT" target="../../3">
        <tran_glyph conn="59,29,1,3,8">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="45,25,14,16">
        <entry box="0,3,6,2"/>
       </state_glyph>
      </state>
      <state name="Opened">
       <entry>redOn();
QTimeEvt_armX(&amp;me-&gt;stationaryTEvt, OPENED_WAIT_TIME, 0U); /*&lt;== one shot */</entry>
       <exit>redOff();</exit>
       <tran trig="sTIMEOUT" target="../../1">
        <tran_glyph conn="67,44,3,1,-24">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="67,23,14,27">
        <entry box="0,3,6,2"/>
        <exit box="0,5,6,2"/>
       </state_glyph>
      </state>
      <state name="closed">
       <entry>orangeOn();
</entry>
       <tran trig="RESUME" target="../../../2" cpref="../../../2/1">
        <tran_glyph conn="16,37,3,0,2,19,19,6">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="16,25,10,22">
        <entry box="0,3,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="14,17,71,36">
       <exit box="0,3,6,2"/>
      </state_glyph>
     </state>
     <state name="motion">
      <initial target="../2">
       <initial_glyph conn="22,72,4,3,8,6">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <history type="shallow" target="../2">
       <history_glyph color="2" conn="37,63,0,0,5"/>
      </history>
      <state name="upWards">
       <entry>greenOn();
me-&gt;next = getLowestRequest(me-&gt;current);
//........................................................

if(me-&gt;next &lt; me-&gt;current ){
    static const QEvt sitchEvt = QEVT_INITIALIZER(SWITCH_SIG);
    QACTIVE_POST_LIFO(AOElevator, &amp;sitchEvt);
}else {
    QTimeEvt_armX(&amp;me-&gt;motionTEvt, TRANSITION_INTERVAL, TRANSITION_INTERVAL);
}

//........................................................
</entry>
       <exit>greenOff();
QTimeEvt_disarm(&amp;me-&gt;motionTEvt);</exit>
       <tran trig="mTIMEOUT">
        <action>me-&gt;current++;</action>
        <choice target="../../../../1/2">
         <guard>me-&gt;current == me-&gt;next</guard>
         <choice_glyph conn="36,76,4,2,-3,13,-32">
          <action box="16,-17,21,4"/>
         </choice_glyph>
        </choice>
        <choice target="../../../3">
         <guard>me-&gt;current == (uint8_t) MAX_LEVELS</guard>
         <choice_glyph conn="36,76,5,3,21">
          <action box="1,0,14,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="28,84,3,-1,8,-8">
         <action box="-5,1,14,2"/>
        </tran_glyph>
       </tran>
       <tran trig="ENTER_REQUEST">
        <choice>
         <guard brief="closerThanNext">me-&gt;next &gt; Q_EVT_CAST(requestEvt)-&gt;level &amp;&amp; Q_EVT_CAST(requestEvt)-&gt;level &gt; me-&gt;current
</guard>
         <action>uint8_t assetion = already_requested( Q_EVT_CAST(requestEvt)-&gt;level);
Q_ASSERT(assetion);
me-&gt;next = Q_EVT_CAST(requestEvt)-&gt;level;
</action>
         <choice_glyph conn="39,96,5,-1,3,-5">
          <action box="1,0,16,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="28,96,3,-1,11">
         <action box="-6,-3,16,3"/>
        </tran_glyph>
       </tran>
       <tran trig="EXIT_REQUEST">
        <choice>
         <guard brief="closerThanNext">me-&gt;next &gt;= Q_EVT_CAST(requestEvt)-&gt;level &amp;&amp; Q_EVT_CAST(requestEvt)-&gt;level &gt; me-&gt;current</guard>
         <action>uint8_t assetion = already_requested( Q_EVT_CAST(requestEvt)-&gt;level);
Q_ASSERT(assetion);

me-&gt;next = Q_EVT_CAST(requestEvt)-&gt;level;
</action>
         <choice_glyph conn="39,101,5,-1,5,5">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="28,101,3,-1,11">
         <action box="-4,0,17,3"/>
        </tran_glyph>
       </tran>
       <tran trig="SWITCH" target="../../3">
        <tran_glyph conn="52,88,1,3,5">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="28,68,24,42">
        <entry box="0,3,6,2"/>
        <exit box="0,5,6,2"/>
       </state_glyph>
      </state>
      <state name="downWards">
       <entry>blueOn();
me-&gt;next = getHighestRequest(me-&gt;current);
//........................................................

if(me-&gt;next &gt; me-&gt;current ){
    static const QEvt sitchEvt = QEVT_INITIALIZER(SWITCH_SIG);
    QACTIVE_POST_LIFO(AOElevator, &amp;sitchEvt);
}else {
    QTimeEvt_armX(&amp;me-&gt;motionTEvt, TRANSITION_INTERVAL, TRANSITION_INTERVAL);
}
//........................................................

</entry>
       <exit>blueOff();
QTimeEvt_disarm(&amp;me-&gt;motionTEvt);
</exit>
       <tran trig="ENTER_REQUEST">
        <choice>
         <guard brief="closerThanNext">me-&gt;next &lt; Q_EVT_CAST(requestEvt)-&gt;level &amp;&amp; Q_EVT_CAST(requestEvt)-&gt;level &lt; me-&gt;current</guard>
         <action>Q_ASSERT(already_requested( Q_EVT_CAST(requestEvt)-&gt;level));
me-&gt;next = Q_EVT_CAST(requestEvt)-&gt;level;
</action>
         <choice_glyph conn="69,104,5,-1,3,-5">
          <action box="1,0,16,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="57,104,3,-1,12">
         <action box="-1,-4,16,3"/>
        </tran_glyph>
       </tran>
       <tran trig="EXIT_REQUEST">
        <choice>
         <guard brief="closerThanNext">me-&gt;next &lt; Q_EVT_CAST(requestEvt)-&gt;level &amp;&amp; Q_EVT_CAST(requestEvt)-&gt;level &lt; me-&gt;current
</guard>
         <action>Q_ASSERT(already_requested( Q_EVT_CAST(requestEvt)-&gt;level));
me-&gt;next = Q_EVT_CAST(requestEvt)-&gt;level;
</action>
         <choice_glyph conn="71,92,5,-1,5,5">
          <action box="6,2,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="57,92,3,-1,14">
         <action box="1,2,17,3"/>
        </tran_glyph>
       </tran>
       <tran trig="mTIMEOUT">
        <action>me-&gt;current--;</action>
        <choice target="../../../../1/2">
         <guard>me-&gt;current == me-&gt;next</guard>
         <choice_glyph conn="64,80,4,1,-41,-5">
          <action box="-4,-25,21,4"/>
         </choice_glyph>
        </choice>
        <choice target="../../../2">
         <guard>me-&gt;current == (uint8_t) 1U</guard>
         <choice_glyph conn="64,80,5,1,-12">
          <action box="-15,2,20,6"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="81,80,1,-1,-17">
         <action box="-5,1,14,2"/>
        </tran_glyph>
       </tran>
       <tran trig="SWITCH" target="../../2">
        <tran_glyph conn="57,94,3,1,-5">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="57,68,24,42">
        <entry box="0,3,6,2"/>
        <exit box="0,5,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="12,63,77,52"/>
     </state>
     <state_glyph node="6,7,89,115"/>
    </state>
    <state_diagram size="132,144"/>
   </statechart>
  </class>
  <operation name="Elevator_Ctor" type="void" visibility="0x00" properties="0x00">
   <code>Elevator * me = &amp;Elevator_inst;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Elevator_initial));
QTimeEvt_ctorX(&amp;me-&gt;motionTEvt, &amp;me-&gt;super, mTIMEOUT_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;stationaryTEvt, &amp;me-&gt;super, sTIMEOUT_SIG, 0U);</code>
  </operation>
  <attribute name="Elevator_inst" type="Elevator" visibility="0x02" properties="0x00"/>
  <attribute name="AOElevator" type="QActive *" visibility="0x00" properties="0x00">
   <code>= &amp;Elevator_inst.super;</code>
  </attribute>
  <class name="Requestor" superclass="qpc::QActive">
   <statechart properties="0x00">
    <initial target="../1">
     <initial_glyph conn="27,4,5,0,19,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="requesting_state">
     <tran trig="ENTER_REQUEST">
      <action>request(ENTER_REQUEST_SIG);
</action>
      <tran_glyph conn="15,17,3,-1,18">
       <action box="0,1,19,5"/>
      </tran_glyph>
     </tran>
     <tran trig="EXIT_REQUEST">
      <action>request(EXIT_REQUEST_SIG);</action>
      <tran_glyph conn="59,32,1,-1,-16">
       <action box="-18,-5,19,5"/>
      </tran_glyph>
     </tran>
     <state_glyph node="15,8,44,30"/>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
  <operation name="Requestor_Ctor" type="void" visibility="0x00" properties="0x00">
   <code>Requestor * me = &amp;Requestor_inst;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Requestor_initial));
</code>
  </operation>
  <attribute name="Requestor_inst" type="Requestor" visibility="0x02" properties="0x00"/>
  <attribute name="AORequestor" type="QActive *" visibility="0x00" properties="0x00">
   <code>= &amp;Requestor_inst.super;</code>
  </attribute>
 </package>
 <directory name=".">
  <file name="elevator.c">
   <text>#include &quot;elevator.h&quot;
#include &quot;qpc.h&quot;
#include &quot;bsp.h&quot;
Q_DEFINE_THIS_FILE

$define${AOs::Elevator}

$define${AOs::Elevator_inst}

$define${AOs::Elevator_Ctor}

$define${AOs::AOElevator}

$define${AOs::Requestor}

$define${AOs::Requestor_inst}

$define${AOs::Requestor_Ctor}

$define${AOs::AORequestor}




$define${shared::requests}
</text>
  </file>
 </directory>
 <directory name="../include">
  <file name="elevator.h">
   <text>#ifndef elevator_h_
#define elevator_h_
#include &quot;qpc.h&quot;
$declare${shared::MAX_LEVELS}
#ifndef BSP_TICKS_PER_SEC
#define BSP_TICKS_PER_SEC 100U // Define a constant value for BSP_TICKS_PER_SEC
#endif

$declare${shared}


$declare${AOs::Elevator}
$declare${AOs::AOElevator}
$declare${AOs::Elevator_Ctor}

$declare${AOs::Requestor}
$declare${AOs::Requestor_Ctor}
$declare${AOs::AORequestor}



#endif</text>
  </file>
 </directory>
</model>
