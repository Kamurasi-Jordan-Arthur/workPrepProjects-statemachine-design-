//$file${Components::.::pelican.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: Pelican.qm
// File:  ${Components::.::pelican.h}
//
// This code has been generated by QM 7.0.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${Components::.::pelican.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef pelican_H_
#define pelican_H_
#include "qpc.h"
#include "safe_std.h" // portable "safe" <stdio.h>/<string.h> facilities

enum PelicanSignals {
    ON_SIG = Q_USER_SIG,
    OFF_SIG,
    PEDS_SIG,
    PEDS_TIME_SIG,
    CAR_TIME_SIG,
    FLASH_SIG,
};

//waiting on timers status enum
enum waitOnTimerStatus {
    WAITING_4_NONE,
    WAITING_CAR_GRACE,
};


//$declare${Components::Pelican} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Components::Pelican} .....................................................
typedef struct Pelican {
// protected:
    QActive super;

// private:
    enum waitOnTimerStatus timer_status;

// public:
    QTimeEvt car_timer;
    QTimeEvt ped_timer;

// private:
    uint8_t count;
} Pelican;

extern Pelican Pelican_inst;

// public:
void Pelican_const(Pelican * const me);

// protected:
QState Pelican_initial(Pelican * const me, void const * const par);
QState Pelican_operational(Pelican * const me, QEvt const * const e);
QState Pelican_no_peds(Pelican * const me, QEvt const * const e);
QState Pelican_peds_waiting(Pelican * const me, QEvt const * const e);
QState Pelican_onCarGracePeriod(Pelican * const me, QEvt const * const e);
QState Pelican_readyingToWalk(Pelican * const me, QEvt const * const e);
QState Pelican_walking(Pelican * const me, QEvt const * const e);
QState Pelican_walkLight(Pelican * const me, QEvt const * const e);
QState Pelican_dontWalkFlash(Pelican * const me, QEvt const * const e);
QState Pelican_Offline(Pelican * const me, QEvt const * const e);
//$enddecl${Components::Pelican} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

extern QActive * Pelican_AO;

void Pelican_start();
#endif // !pelican_H_
