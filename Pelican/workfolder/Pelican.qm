<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.1" links="0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <framework name="qpc"/>
 <package name="Components" stereotype="0x02">
  <class name="Pelican" superclass="qpc::QActive">
   <attribute name="timer_status" type="enum waitOnTimerStatus" visibility="0x02" properties="0x00">
    <documentation>HOW MANY MORE TIMERS ARE WE WAITNG FOR</documentation>
   </attribute>
   <attribute name="inst" type="Pelican" visibility="0x02" properties="0x01"/>
   <attribute name="car_timer" type="QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="ped_timer" type="QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="count" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>flash / count</documentation>
   </attribute>
   <operation name="const" type="void" visibility="0x00" properties="0x00">
    <code>(void) me;
QActive_ctor(&amp;Pelican_inst.super, Q_STATE_CAST(&amp;Pelican_initial));
QTimeEvt_ctorX(&amp;Pelican_inst.car_timer,   &amp;Pelican_inst.super, CAR_TIME_SIG,   0U);
QTimeEvt_ctorX(&amp;Pelican_inst.ped_timer, &amp;Pelican_inst.super, PEDS_TIME_SIG, 0U);

//me-&gt;Pelican_started =0U;
</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../2">
     <action brief="Pelican initial transition ">//The application initial transition 
(void)par; // unused parameter

PRINTF_S(&quot;\n%s\t\t\t%s\n&quot;, &quot;car_SMS&quot;, &quot;peds_SMS&quot;);
BSP_UP_DATE();
</action>
     <initial_glyph conn="106,25,5,0,-5,9">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="operational">
     <entry>//PRINTF_S(&quot;%s&quot;, &quot;OPERATIONAL-ENTRY;&quot;);
</entry>
     <exit>//PRINTF_S(&quot;%s&quot;, &quot;OPERATIONAL-EXIT;&quot;);
QTimeEvt_disarm(&amp;me-&gt;car_timer);
QTimeEvt_disarm(&amp;me-&gt;ped_timer);</exit>
     <initial target="../2">
      <action brief="#begins with cars moving an assumes no peds">//#begins with cars moving an assumes no peds
</action>
      <initial_glyph conn="5,9,5,3,1,7,3">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="OFF" target="../../2">
      <action brief="key borad press of &quot;esc&quot;">//key borad press of &quot;esc&quot;</action>
      <tran_glyph conn="91,50,1,3,5">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="no_peds">
      <entry>//Arm the car timer 
me-&gt;timer_status = WAITING_4_NONE;
bspCarsGreen();
QTimeEvt_armX(&amp;me-&gt;car_timer, 5U*BSP_TICKS_PER_SEC, 0U);
//PRINTF_S(&quot;%s\n&quot;, &quot;no_peds-ENTRY;&quot;);
</entry>
      <exit>//PRINTF_S(&quot;%s\n&quot;, &quot;no-peds-Exit;&quot;);</exit>
      <tran trig="CAR_TIME">
       <action brief="Car Grace Over">me-&gt;timer_status = WAITING_CAR_GRACE;</action>
       <tran_glyph conn="9,15,3,-1,19,2">
        <action box="4,-2,22,4"/>
       </tran_glyph>
      </tran>
      <tran trig="PEDS">
       <choice target="../../../3/0">
        <guard brief="stillCarGrace">me-&gt;timer_status == WAITING_4_NONE</guard>
        <choice_glyph conn="20,20,4,0,23">
         <action box="-10,4,10,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../3/1">
        <guard>else</guard>
        <choice_glyph conn="20,20,5,0,14,9,25,14">
         <action box="3,1,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="9,20,3,-1,11">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="9,10,23,18">
       <entry box="0,3,6,2"/>
       <exit box="0,5,6,2"/>
      </state_glyph>
     </state>
     <state name="peds_waiting">
      <entry>//PRINTF_S(&quot;%s&quot;, &quot;peds_waiting-ENTRY;&quot;);
</entry>
      <exit>//PRINTF_S(&quot;%s&quot;, &quot;peds_waiting-EXIT;&quot;);
bspCarsRed();</exit>
      <state name="onCarGracePeriod">
       <entry>//PRINTF_S(&quot;%s&quot;, &quot;onCarGracePeriod-ENTRY;&quot;);

me-&gt;timer_status = WAITING_CAR_GRACE;</entry>
       <exit>//PRINTF_S(&quot;%s&quot;, &quot;onCarGracePeriod-EXIT;&quot;);

me-&gt;timer_status = WAITING_4_NONE;</exit>
       <tran trig="CAR_TIME" target="../../1">
        <tran_glyph conn="38,52,1,3,18">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="10,43,28,15">
        <entry box="0,3,6,2"/>
        <exit box="0,5,6,2"/>
       </state_glyph>
      </state>
      <state name="readyingToWalk">
       <entry>//PRINTF_S(&quot;%s&quot;, &quot;readyingToWalk-ENTRY;&quot;);
bspCarsYellow();
QTimeEvt_armX(&amp;me-&gt;ped_timer, 2U*BSP_TICKS_PER_SEC, 0U);</entry>
       <exit>//PRINTF_S(&quot;%s&quot;, &quot;readyingToWalk-EXIT;&quot;);
</exit>
       <tran trig="PEDS_TIME" target="../../../4/0">
        <tran_glyph conn="56,54,3,2,-8,-34">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="56,43,26,15">
        <entry box="0,3,6,2"/>
        <exit box="0,5,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="6,37,81,23">
       <entry box="0,3,6,2"/>
       <exit box="0,5,6,2"/>
      </state_glyph>
     </state>
     <state name="walking">
      <entry>//PRINTF_S(&quot;%s&quot;, &quot;walking-ENTRY;&quot;);
bspWalk();

QTimeEvt_armX(&amp;me-&gt;ped_timer, 3U * BSP_TICKS_PER_SEC, 0U);
</entry>
      <exit>//PRINTF_S(&quot;%s&quot;, &quot;walking-EXIT;&quot;);

//bspDontWalk();
</exit>
      <state name="walkLight">
       <entry>//PRINTF_S(&quot;%s&quot;, &quot;walkLight-ENTRY;&quot;);

</entry>
       <exit>//PRINTF_S(&quot;%s&quot;, &quot;walkLight-EXIT;&quot;);
</exit>
       <tran trig="PEDS_TIME" target="../../1">
        <tran_glyph conn="53,16,1,0,18,1">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,13,17,7">
        <entry box="0,3,6,2"/>
        <exit box="0,5,6,2"/>
       </state_glyph>
      </state>
      <state name="dontWalkFlash">
       <entry>//PRINTF_S(&quot;%s&quot;, &quot;dontWalkFlash-ENTRY;&quot;);

me-&gt;count =0U;
QTimeEvt_armX(&amp;me-&gt;ped_timer, BSP_TICKS_PER_SEC / 2U , BSP_TICKS_PER_SEC / 2U);</entry>
       <exit>//PRINTF_S(&quot;%s&quot;, &quot;dontWalkFlash-EXIT;&quot;);
QTimeEvt_disarm(&amp;me-&gt;ped_timer);</exit>
       <tran trig="PEDS_TIME">
        <choice target="../../../../2">
         <guard brief="Flash three times">me-&gt;count &gt; 3U</guard>
         <choice_glyph conn="72,23,5,1,-40">
          <action box="-14,2,16,2"/>
         </choice_glyph>
        </choice>
        <choice>
         <guard brief="elseIncrementCounter">else</guard>
         <action>bspDontWalkFlash((me-&gt;count &lt;&lt; 7U) ^ 0U);
me-&gt;count ++;</action>
         <choice_glyph conn="72,23,4,-1,9,14">
          <action box="0,3,18,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="88,23,1,-1,-16">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="54,17,34,17">
        <entry box="0,3,6,2"/>
        <exit box="0,5,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="35,9,55,26">
       <entry box="0,3,6,2"/>
       <exit box="0,5,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="3,4,88,59">
      <entry box="0,3,6,2"/>
      <exit box="0,5,6,2"/>
     </state_glyph>
    </state>
    <state name="Offline">
     <entry>//PRINTF_S(&quot;%s\n&quot;, &quot;Offline-ENTRY;&quot;);
//QASSERT(TIMER_DISARM(&amp;me-&gt;car_timer) &amp;&amp; TIMER_DISARM(&amp;me-&gt;ped_timer));



// may need to trace the return values of the disarm here</entry>
     <exit>//PRINTF_S(&quot;%s\n&quot;, &quot;offline-EXIT;&quot;);</exit>
     <tran trig="ON" target="../../1">
      <tran_glyph conn="96,43,3,1,-5">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="96,34,13,22">
      <entry box="0,3,7,2"/>
      <exit box="0,5,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="111,65"/>
   </statechart>
  </class>
  <directory name=".">
   <file name="pelican.h">
    <text>#ifndef pelican_H_
#define pelican_H_
#include &quot;qpc.h&quot;
#include &quot;safe_std.h&quot; // portable &quot;safe&quot; &lt;stdio.h&gt;/&lt;string.h&gt; facilities

enum PelicanSignals {
    ON_SIG = Q_USER_SIG,
    OFF_SIG,
    PEDS_SIG,
    PEDS_TIME_SIG,
    CAR_TIME_SIG,
    FLASH_SIG,
};

//waiting on timers status enum
enum waitOnTimerStatus {
    WAITING_4_NONE,
    WAITING_CAR_GRACE,
};


$declare${Components::Pelican}

extern QActive * Pelican_AO;

void Pelican_start();
#endif // !pelican_H_</text>
   </file>
   <file name="Pelican.c">
    <text>#include &quot;pelican.h&quot;
#include &quot;bsp.h&quot;
#include &quot;qpc.h&quot;
#include &quot;safe_std.h&quot; // portable &quot;safe&quot; &lt;stdio.h&gt;/&lt;string.h&gt; facilities

Q_DEFINE_THIS_FILE


$define${Components::Pelican}

QActive * Pelican_AO = &amp;Pelican_inst.super;
</text>
   </file>
   <file name="bsp.h">
    <text>#ifndef BSP_H_
#define BSP_H_
#include &lt;stdint.h&gt;
#define BSP_TICKS_PER_SEC    100U  //TODO

#define WELCOME_SMS     printf(&quot;Wellcome to the pelican test example !!! \
    \nPress \&quot;1\&quot;  \t\t\t\t(To make the System Operational),\
    \nand \&quot;0\&quot; \t\t\t\t(To turn it to Off-line mode,\
    \nWhen Operational, Press \&quot;P or p\&quot;  \t(To create Pedestrians sig),\
    \n\n&quot;)

void BSP_init(int argc, char *argv[]);
void BSP_onKeyboardInput(uint8_t key); // process the keyboard scan code


void BSP_UP_DATE();

void bspCarsGreen();
void bspCarsYellow();
void bspCarsRed();

void bspWalk();
void bspDontWalk();
void bspDontWalkFlash(uint8_t flash);



#endif // BSP_H_</text>
   </file>
  </directory>
 </package>
</model>
