
dpp_Try_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08002288  08002288  00003288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800228c  0800228c  0000328c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stack        00000800  20000000  20000000  00004000  2**0
                  ALLOC
  5 .data         00000004  20000800  08002290  00003800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000184  20000804  08002294  00003804  2**2
                  ALLOC
  7 .heap         00000000  20000988  20000988  00003804  2**0
                  CONTENTS
  8 .ARM.attributes 00000028  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0000382c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006184  00000000  00000000  0000386f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002006  00000000  00000000  000099f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000508  00000000  00000000  0000b9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000003ab  00000000  00000000  0000bf01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000cab4  00000000  00000000  0000c2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00005687  00000000  00000000  00018d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0003ffd1  00000000  00000000  0001e3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00000e9c  00000000  00000000  0005e3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000804 	.word	0x20000804
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080000c0 	.word	0x080000c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000808 	.word	0x20000808
 8000104:	080000c0 	.word	0x080000c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <Reset_Handler>:
    extern unsigned const __data_load; /* initialization values for .data  */
    extern unsigned __bss_start__; /* start of .bss in the linker script */
    extern unsigned __bss_end__;   /* end of .bss in the linker script */
    extern void software_init_hook(void) __attribute__((weak));

    SystemInit(); /* CMSIS system initialization */
 8000220:	f000 f848 	bl	80002b4 <SystemInit>

    /* copy the data segment initializers from flash to RAM... */
    unsigned const *src = &__data_load;
 8000224:	4d10      	ldr	r5, [pc, #64]	@ (8000268 <Reset_Handler+0x48>)
    unsigned *dst;
    for (dst = &__data_start; dst < &__data_end__; ++dst, ++src) {
 8000226:	4c11      	ldr	r4, [pc, #68]	@ (800026c <Reset_Handler+0x4c>)
 8000228:	e003      	b.n	8000232 <Reset_Handler+0x12>
        *dst = *src;
 800022a:	682b      	ldr	r3, [r5, #0]
 800022c:	6023      	str	r3, [r4, #0]
    for (dst = &__data_start; dst < &__data_end__; ++dst, ++src) {
 800022e:	3404      	adds	r4, #4
 8000230:	3504      	adds	r5, #4
 8000232:	4b0f      	ldr	r3, [pc, #60]	@ (8000270 <Reset_Handler+0x50>)
 8000234:	429c      	cmp	r4, r3
 8000236:	d3f8      	bcc.n	800022a <Reset_Handler+0xa>
    }

    /* zero fill the .bss segment in RAM... */
    for (dst = &__bss_start__; dst < &__bss_end__; ++dst) {
 8000238:	4c0e      	ldr	r4, [pc, #56]	@ (8000274 <Reset_Handler+0x54>)
 800023a:	e002      	b.n	8000242 <Reset_Handler+0x22>
        *dst = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	6023      	str	r3, [r4, #0]
    for (dst = &__bss_start__; dst < &__bss_end__; ++dst) {
 8000240:	3404      	adds	r4, #4
 8000242:	4b0d      	ldr	r3, [pc, #52]	@ (8000278 <Reset_Handler+0x58>)
 8000244:	429c      	cmp	r4, r3
 8000246:	d3f9      	bcc.n	800023c <Reset_Handler+0x1c>
    }

    /* init hook provided? */
    if (&software_init_hook != (void (*)(void))(0)) {
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <Reset_Handler+0x5c>)
 800024a:	2b00      	cmp	r3, #0
 800024c:	d002      	beq.n	8000254 <Reset_Handler+0x34>
        /* give control to the RTOS */
        software_init_hook(); /* this will also call __libc_init_array */
 800024e:	e000      	b.n	8000252 <Reset_Handler+0x32>
 8000250:	bf00      	nop
 8000252:	e003      	b.n	800025c <Reset_Handler+0x3c>
    }
    else {
        /* call all static constructors in C++ (harmless in C programs) */
        __libc_init_array();
 8000254:	f001 ff10 	bl	8002078 <__libc_init_array>
        (void)main(); /* application's entry point; should never return! */
 8000258:	f000 fa88 	bl	800076c <main>
    }

    /* the previous code should not return, but assert just in case... */
    __asm volatile ("  CPSID i");
 800025c:	b672      	cpsid	i
    assert_failed("Reset_Handler", 1U);
 800025e:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <Reset_Handler+0x60>)
 8000260:	2101      	movs	r1, #1
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fb2d 	bl	80008c2 <assert_failed>
 8000268:	08002290 	.word	0x08002290
 800026c:	20000800 	.word	0x20000800
 8000270:	20000804 	.word	0x20000804
 8000274:	20000804 	.word	0x20000804
 8000278:	20000988 	.word	0x20000988
 800027c:	00000000 	.word	0x00000000
 8000280:	080020c0 	.word	0x080020c0

08000284 <HardFault_Handler>:
}
/*..........................................................................*/
__attribute__((naked)) void HardFault_Handler(void);
void HardFault_Handler(void) {
    /* disable interrupts and reset SP in case of stack overflow */
    __asm volatile ("  CPSID i\n  MOV   sp,%0" : : "r" (&__stack_end__));
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <HardFault_Handler+0x10>)
 8000286:	b672      	cpsid	i
 8000288:	469d      	mov	sp, r3
    assert_failed("HardFault", 1U);
 800028a:	4b03      	ldr	r3, [pc, #12]	@ (8000298 <HardFault_Handler+0x14>)
 800028c:	2101      	movs	r1, #1
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fb17 	bl	80008c2 <assert_failed>
 8000294:	20000800 	.word	0x20000800
 8000298:	080020d4 	.word	0x080020d4

0800029c <Default_Handler>:
}
/*..........................................................................*/
__attribute__((naked)) void Default_Handler(void);
void Default_Handler(void) {
    /* disable interrupts and reset SP in case of stack overflow */
    __asm volatile ("  CPSID i\n  MOV   sp,%0" : : "r" (&__stack_end__));
 800029c:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <Default_Handler+0x10>)
 800029e:	b672      	cpsid	i
 80002a0:	469d      	mov	sp, r3
    assert_failed("Default", 1U);
 80002a2:	4b03      	ldr	r3, [pc, #12]	@ (80002b0 <Default_Handler+0x14>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fb0b 	bl	80008c2 <assert_failed>
 80002ac:	20000800 	.word	0x20000800
 80002b0:	080020e0 	.word	0x080020e0

080002b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002b8:	4b03      	ldr	r3, [pc, #12]	@ (80002c8 <SystemInit+0x14>)
 80002ba:	2280      	movs	r2, #128	@ 0x80
 80002bc:	0512      	lsls	r2, r2, #20
 80002be:	609a      	str	r2, [r3, #8]
#endif
}
 80002c0:	46c0      	nop			@ (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	46c0      	nop			@ (mov r8, r8)
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80002d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <SystemCoreClockUpdate+0x84>)
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	2238      	movs	r2, #56	@ 0x38
 80002d8:	4013      	ands	r3, r2
 80002da:	2b20      	cmp	r3, #32
 80002dc:	d00e      	beq.n	80002fc <SystemCoreClockUpdate+0x30>
 80002de:	d812      	bhi.n	8000306 <SystemCoreClockUpdate+0x3a>
 80002e0:	2b08      	cmp	r3, #8
 80002e2:	d002      	beq.n	80002ea <SystemCoreClockUpdate+0x1e>
 80002e4:	2b18      	cmp	r3, #24
 80002e6:	d004      	beq.n	80002f2 <SystemCoreClockUpdate+0x26>
 80002e8:	e00d      	b.n	8000306 <SystemCoreClockUpdate+0x3a>
  {
    case RCC_CFGR_SWS_0:                /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80002ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000354 <SystemCoreClockUpdate+0x88>)
 80002ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000358 <SystemCoreClockUpdate+0x8c>)
 80002ee:	601a      	str	r2, [r3, #0]
      break;
 80002f0:	e01b      	b.n	800032a <SystemCoreClockUpdate+0x5e>

    case (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0):  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 80002f2:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <SystemCoreClockUpdate+0x88>)
 80002f4:	22fa      	movs	r2, #250	@ 0xfa
 80002f6:	01d2      	lsls	r2, r2, #7
 80002f8:	601a      	str	r2, [r3, #0]
      break;
 80002fa:	e016      	b.n	800032a <SystemCoreClockUpdate+0x5e>

    case RCC_CFGR_SWS_2:                /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 80002fc:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <SystemCoreClockUpdate+0x88>)
 80002fe:	2280      	movs	r2, #128	@ 0x80
 8000300:	0212      	lsls	r2, r2, #8
 8000302:	601a      	str	r2, [r3, #0]
      break;
 8000304:	e011      	b.n	800032a <SystemCoreClockUpdate+0x5e>

    case 0x00000000U:                   /* HSI used as system clock */
    default:                            /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8000306:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <SystemCoreClockUpdate+0x84>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	0adb      	lsrs	r3, r3, #11
 800030c:	2207      	movs	r2, #7
 800030e:	4013      	ands	r3, r2
 8000310:	2201      	movs	r2, #1
 8000312:	409a      	lsls	r2, r3
 8000314:	0013      	movs	r3, r2
 8000316:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 8000318:	6879      	ldr	r1, [r7, #4]
 800031a:	480f      	ldr	r0, [pc, #60]	@ (8000358 <SystemCoreClockUpdate+0x8c>)
 800031c:	f7ff fef4 	bl	8000108 <__udivsi3>
 8000320:	0003      	movs	r3, r0
 8000322:	001a      	movs	r2, r3
 8000324:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <SystemCoreClockUpdate+0x88>)
 8000326:	601a      	str	r2, [r3, #0]
      break;
 8000328:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800032a:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <SystemCoreClockUpdate+0x84>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	220f      	movs	r2, #15
 8000332:	401a      	ands	r2, r3
 8000334:	4b09      	ldr	r3, [pc, #36]	@ (800035c <SystemCoreClockUpdate+0x90>)
 8000336:	0092      	lsls	r2, r2, #2
 8000338:	58d3      	ldr	r3, [r2, r3]
 800033a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800033c:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <SystemCoreClockUpdate+0x88>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	40da      	lsrs	r2, r3
 8000344:	4b03      	ldr	r3, [pc, #12]	@ (8000354 <SystemCoreClockUpdate+0x88>)
 8000346:	601a      	str	r2, [r3, #0]
}
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b002      	add	sp, #8
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000
 8000354:	20000800 	.word	0x20000800
 8000358:	02dc6c00 	.word	0x02dc6c00
 800035c:	080020e8 	.word	0x080020e8

08000360 <AudioPlayer_initial>:
//$define${AOs} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AudioPlayer} ........................................................

//${AOs::AudioPlayer::SM} ....................................................
QState AudioPlayer_initial(AudioPlayer * const me, void const * const par) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
    //${AOs::AudioPlayer::SM::initial}
    me->vol = 3U;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	223c      	movs	r2, #60	@ 0x3c
 800036e:	2103      	movs	r1, #3
 8000370:	5499      	strb	r1, [r3, r2]
    me->volChanged = 0U;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	223d      	movs	r2, #61	@ 0x3d
 8000376:	2100      	movs	r1, #0
 8000378:	5499      	strb	r1, [r3, r2]
    QS_FUN_DICTIONARY(&AudioPlayer_Pairing);
    QS_FUN_DICTIONARY(&AudioPlayer_Pair);
    QS_FUN_DICTIONARY(&AudioPlayer_SD_card_Input);
    QS_FUN_DICTIONARY(&AudioPlayer_OFF);

    return Q_TRAN(&AudioPlayer_MODE);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a03      	ldr	r2, [pc, #12]	@ (800038c <AudioPlayer_initial+0x2c>)
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	2307      	movs	r3, #7
}
 8000382:	0018      	movs	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	b002      	add	sp, #8
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			@ (mov r8, r8)
 800038c:	08000391 	.word	0x08000391

08000390 <AudioPlayer_MODE>:

//${AOs::AudioPlayer::SM::MODE} ..............................................
QState AudioPlayer_MODE(AudioPlayer * const me, QEvt const * const e) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	3b03      	subs	r3, #3
 80003a0:	2b0a      	cmp	r3, #10
 80003a2:	d900      	bls.n	80003a6 <AudioPlayer_MODE+0x16>
 80003a4:	e073      	b.n	800048e <AudioPlayer_MODE+0xfe>
 80003a6:	009a      	lsls	r2, r3, #2
 80003a8:	4b3e      	ldr	r3, [pc, #248]	@ (80004a4 <AudioPlayer_MODE+0x114>)
 80003aa:	18d3      	adds	r3, r2, r3
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	469f      	mov	pc, r3
        //${AOs::AudioPlayer::SM::MODE::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&AudioPlayer_Radio);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a3d      	ldr	r2, [pc, #244]	@ (80004a8 <AudioPlayer_MODE+0x118>)
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	2307      	movs	r3, #7
 80003b8:	60fb      	str	r3, [r7, #12]
            break;
 80003ba:	e06e      	b.n	800049a <AudioPlayer_MODE+0x10a>
        }
        //${AOs::AudioPlayer::SM::MODE::PLUS}
        case PLUS_SIG: {
            QTimeEvt_armX(&me->volTimerEvt, VOL_INTERVAL, VOL_INTERVAL);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3324      	adds	r3, #36	@ 0x24
 80003c0:	2264      	movs	r2, #100	@ 0x64
 80003c2:	2164      	movs	r1, #100	@ 0x64
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fb4d 	bl	8001a64 <QTimeEvt_armX>
            me->sign = (uint8_t)PLUS;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	223e      	movs	r2, #62	@ 0x3e
 80003ce:	2100      	movs	r1, #0
 80003d0:	5499      	strb	r1, [r3, r2]

            status_ = Q_HANDLED();
 80003d2:	2302      	movs	r3, #2
 80003d4:	60fb      	str	r3, [r7, #12]
            break;
 80003d6:	e060      	b.n	800049a <AudioPlayer_MODE+0x10a>
        }
        //${AOs::AudioPlayer::SM::MODE::TIMEOUT}
        case TIMEOUT_SIG: {
            me->volChanged = 1U;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	223d      	movs	r2, #61	@ 0x3d
 80003dc:	2101      	movs	r1, #1
 80003de:	5499      	strb	r1, [r3, r2]
            //${AOs::AudioPlayer::SM::MODE::TIMEOUT::[me->sign==(uint8_t)PLUS]}
            if (me->sign == (uint8_t)PLUS) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	223e      	movs	r2, #62	@ 0x3e
 80003e4:	5c9b      	ldrb	r3, [r3, r2]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d10a      	bne.n	8000400 <AudioPlayer_MODE+0x70>
                me->vol++;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	223c      	movs	r2, #60	@ 0x3c
 80003ee:	5c9b      	ldrb	r3, [r3, r2]
 80003f0:	3301      	adds	r3, #1
 80003f2:	b2d9      	uxtb	r1, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	223c      	movs	r2, #60	@ 0x3c
 80003f8:	5499      	strb	r1, [r3, r2]

                status_ = Q_HANDLED();
 80003fa:	2302      	movs	r3, #2
 80003fc:	60fb      	str	r3, [r7, #12]
            //${AOs::AudioPlayer::SM::MODE::TIMEOUT::[else]}
            else {
                me->vol--;
                status_ = Q_HANDLED();
            }
            break;
 80003fe:	e04c      	b.n	800049a <AudioPlayer_MODE+0x10a>
                me->vol--;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	223c      	movs	r2, #60	@ 0x3c
 8000404:	5c9b      	ldrb	r3, [r3, r2]
 8000406:	3b01      	subs	r3, #1
 8000408:	b2d9      	uxtb	r1, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	223c      	movs	r2, #60	@ 0x3c
 800040e:	5499      	strb	r1, [r3, r2]
                status_ = Q_HANDLED();
 8000410:	2302      	movs	r3, #2
 8000412:	60fb      	str	r3, [r7, #12]
            break;
 8000414:	e041      	b.n	800049a <AudioPlayer_MODE+0x10a>
        }
        //${AOs::AudioPlayer::SM::MODE::MINUS}
        case MINUS_SIG: {
            QTimeEvt_armX(&me->volTimerEvt, VOL_INTERVAL, VOL_INTERVAL);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3324      	adds	r3, #36	@ 0x24
 800041a:	2264      	movs	r2, #100	@ 0x64
 800041c:	2164      	movs	r1, #100	@ 0x64
 800041e:	0018      	movs	r0, r3
 8000420:	f001 fb20 	bl	8001a64 <QTimeEvt_armX>
            me->sign = (uint8_t)MINUS;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	223e      	movs	r2, #62	@ 0x3e
 8000428:	2101      	movs	r1, #1
 800042a:	5499      	strb	r1, [r3, r2]

            status_ = Q_HANDLED();
 800042c:	2302      	movs	r3, #2
 800042e:	60fb      	str	r3, [r7, #12]
            break;
 8000430:	e033      	b.n	800049a <AudioPlayer_MODE+0x10a>
        }
        //${AOs::AudioPlayer::SM::MODE::RELEASE}
        case RELEASE_SIG: {
            QTimeEvt_disarm(&me->volTimerEvt);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3324      	adds	r3, #36	@ 0x24
 8000436:	0018      	movs	r0, r3
 8000438:	f001 fb6e 	bl	8001b18 <QTimeEvt_disarm>
            //${AOs::AudioPlayer::SM::MODE::RELEASE::[!me->volChanged]}
            if (!me->volChanged) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	223d      	movs	r2, #61	@ 0x3d
 8000440:	5c9b      	ldrb	r3, [r3, r2]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d116      	bne.n	8000474 <AudioPlayer_MODE+0xe4>
                //${AOs::AudioPlayer::SM::MODE::RELEASE::[!me->volChanged~::[me->sign==(uint8_t)PLUS]}
                if (me->sign == (uint8_t)PLUS) {
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	223e      	movs	r2, #62	@ 0x3e
 800044a:	5c9b      	ldrb	r3, [r3, r2]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d108      	bne.n	8000462 <AudioPlayer_MODE+0xd2>
                    static const QEvt nextEvt = QEVT_INITIALIZER(NEXT_SIG);
                    QACTIVE_POST(AO_AudioPlayer, &nextEvt, (void)0U);
 8000450:	4816      	ldr	r0, [pc, #88]	@ (80004ac <AudioPlayer_MODE+0x11c>)
 8000452:	4a17      	ldr	r2, [pc, #92]	@ (80004b0 <AudioPlayer_MODE+0x120>)
 8000454:	4917      	ldr	r1, [pc, #92]	@ (80004b4 <AudioPlayer_MODE+0x124>)
 8000456:	2300      	movs	r3, #0
 8000458:	f000 ffe4 	bl	8001424 <QActive_post_>
                    status_ = Q_HANDLED();
 800045c:	2302      	movs	r3, #2
 800045e:	60fb      	str	r3, [r7, #12]
            //${AOs::AudioPlayer::SM::MODE::RELEASE::[else]}
            else {
                me->volChanged = 0U;
                status_ = Q_HANDLED();
            }
            break;
 8000460:	e01b      	b.n	800049a <AudioPlayer_MODE+0x10a>
                    QACTIVE_POST(AO_AudioPlayer, &prevEvt, (void)0U);
 8000462:	4812      	ldr	r0, [pc, #72]	@ (80004ac <AudioPlayer_MODE+0x11c>)
 8000464:	4a12      	ldr	r2, [pc, #72]	@ (80004b0 <AudioPlayer_MODE+0x120>)
 8000466:	4914      	ldr	r1, [pc, #80]	@ (80004b8 <AudioPlayer_MODE+0x128>)
 8000468:	2300      	movs	r3, #0
 800046a:	f000 ffdb 	bl	8001424 <QActive_post_>
                    status_ = Q_HANDLED();
 800046e:	2302      	movs	r3, #2
 8000470:	60fb      	str	r3, [r7, #12]
            break;
 8000472:	e012      	b.n	800049a <AudioPlayer_MODE+0x10a>
                me->volChanged = 0U;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	223d      	movs	r2, #61	@ 0x3d
 8000478:	2100      	movs	r1, #0
 800047a:	5499      	strb	r1, [r3, r2]
                status_ = Q_HANDLED();
 800047c:	2302      	movs	r3, #2
 800047e:	60fb      	str	r3, [r7, #12]
            break;
 8000480:	e00b      	b.n	800049a <AudioPlayer_MODE+0x10a>
        }
        //${AOs::AudioPlayer::SM::MODE::TERMINATE}
        case TERMINATE_SIG: {
            status_ = Q_TRAN(&AudioPlayer_OFF);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a0d      	ldr	r2, [pc, #52]	@ (80004bc <AudioPlayer_MODE+0x12c>)
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	2307      	movs	r3, #7
 800048a:	60fb      	str	r3, [r7, #12]
            break;
 800048c:	e005      	b.n	800049a <AudioPlayer_MODE+0x10a>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a0b      	ldr	r2, [pc, #44]	@ (80004c0 <AudioPlayer_MODE+0x130>)
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
            break;
 8000498:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status_;
 800049a:	68fb      	ldr	r3, [r7, #12]
}
 800049c:	0018      	movs	r0, r3
 800049e:	46bd      	mov	sp, r7
 80004a0:	b004      	add	sp, #16
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	08002128 	.word	0x08002128
 80004a8:	080004c5 	.word	0x080004c5
 80004ac:	20000820 	.word	0x20000820
 80004b0:	0000ffff 	.word	0x0000ffff
 80004b4:	080021e8 	.word	0x080021e8
 80004b8:	080021ec 	.word	0x080021ec
 80004bc:	080006e5 	.word	0x080006e5
 80004c0:	08001071 	.word	0x08001071

080004c4 <AudioPlayer_Radio>:

//${AOs::AudioPlayer::SM::MODE::Radio} .......................................
QState AudioPlayer_Radio(AudioPlayer * const me, QEvt const * const e) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	2b0b      	cmp	r3, #11
 80004d4:	d81f      	bhi.n	8000516 <AudioPlayer_Radio+0x52>
 80004d6:	009a      	lsls	r2, r3, #2
 80004d8:	4b14      	ldr	r3, [pc, #80]	@ (800052c <AudioPlayer_Radio+0x68>)
 80004da:	18d3      	adds	r3, r2, r3
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	469f      	mov	pc, r3
        //${AOs::AudioPlayer::SM::MODE::Radio}
        case Q_ENTRY_SIG: {
            //Power the anttena
            status_ = Q_HANDLED();
 80004e0:	2302      	movs	r3, #2
 80004e2:	60fb      	str	r3, [r7, #12]
            break;
 80004e4:	e01d      	b.n	8000522 <AudioPlayer_Radio+0x5e>
        }
        //${AOs::AudioPlayer::SM::MODE::Radio}
        case Q_EXIT_SIG: {
            //Disconnect the Antenna
            status_ = Q_HANDLED();
 80004e6:	2302      	movs	r3, #2
 80004e8:	60fb      	str	r3, [r7, #12]
            break;
 80004ea:	e01a      	b.n	8000522 <AudioPlayer_Radio+0x5e>
        }
        //${AOs::AudioPlayer::SM::MODE::Radio::MODE}
        case MODE_SIG: {
            status_ = Q_TRAN(&AudioPlayer_Bluetooth);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a10      	ldr	r2, [pc, #64]	@ (8000530 <AudioPlayer_Radio+0x6c>)
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	2307      	movs	r3, #7
 80004f4:	60fb      	str	r3, [r7, #12]
            break;
 80004f6:	e014      	b.n	8000522 <AudioPlayer_Radio+0x5e>
        }
        //${AOs::AudioPlayer::SM::MODE::Radio::PLAYPAUSE}
        case PLAYPAUSE_SIG: {
            //Mute the speckers
            bspMute();
 80004f8:	f000 fb71 	bl	8000bde <bspMute>
            status_ = Q_HANDLED();
 80004fc:	2302      	movs	r3, #2
 80004fe:	60fb      	str	r3, [r7, #12]
            break;
 8000500:	e00f      	b.n	8000522 <AudioPlayer_Radio+0x5e>
        }
        //${AOs::AudioPlayer::SM::MODE::Radio::NEXT}
        case NEXT_SIG: {
            //Play next radio Satation
            BspSeekNext();
 8000502:	f000 fb71 	bl	8000be8 <BspSeekNext>
            status_ = Q_HANDLED();
 8000506:	2302      	movs	r3, #2
 8000508:	60fb      	str	r3, [r7, #12]
            break;
 800050a:	e00a      	b.n	8000522 <AudioPlayer_Radio+0x5e>
        }
        //${AOs::AudioPlayer::SM::MODE::Radio::PREV}
        case PREV_SIG: {
            //play previous station
            BspSeekPrev();
 800050c:	f000 fb71 	bl	8000bf2 <BspSeekPrev>
            status_ = Q_HANDLED();
 8000510:	2302      	movs	r3, #2
 8000512:	60fb      	str	r3, [r7, #12]
            break;
 8000514:	e005      	b.n	8000522 <AudioPlayer_Radio+0x5e>
        }
        default: {
            status_ = Q_SUPER(&AudioPlayer_MODE);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a06      	ldr	r2, [pc, #24]	@ (8000534 <AudioPlayer_Radio+0x70>)
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
            break;
 8000520:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status_;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	08002154 	.word	0x08002154
 8000530:	08000539 	.word	0x08000539
 8000534:	08000391 	.word	0x08000391

08000538 <AudioPlayer_Bluetooth>:

//${AOs::AudioPlayer::SM::MODE::Bluetooth} ...................................
QState AudioPlayer_Bluetooth(AudioPlayer * const me, QEvt const * const e) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	2b0b      	cmp	r3, #11
 8000548:	d822      	bhi.n	8000590 <AudioPlayer_Bluetooth+0x58>
 800054a:	009a      	lsls	r2, r3, #2
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <AudioPlayer_Bluetooth+0x70>)
 800054e:	18d3      	adds	r3, r2, r3
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	469f      	mov	pc, r3
        //${AOs::AudioPlayer::SM::MODE::Bluetooth}
        case Q_EXIT_SIG: {
            //DIs able the BT Module and
            status_ = Q_HANDLED();
 8000554:	2302      	movs	r3, #2
 8000556:	60fb      	str	r3, [r7, #12]
            break;
 8000558:	e020      	b.n	800059c <AudioPlayer_Bluetooth+0x64>
        }
        //${AOs::AudioPlayer::SM::MODE::Bluetooth::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&AudioPlayer_BT_Init);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a13      	ldr	r2, [pc, #76]	@ (80005ac <AudioPlayer_Bluetooth+0x74>)
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	2307      	movs	r3, #7
 8000562:	60fb      	str	r3, [r7, #12]
            break;
 8000564:	e01a      	b.n	800059c <AudioPlayer_Bluetooth+0x64>
        }
        //${AOs::AudioPlayer::SM::MODE::Bluetooth::MODE}
        case MODE_SIG: {
            status_ = Q_TRAN(&AudioPlayer_SD_card_Input);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a11      	ldr	r2, [pc, #68]	@ (80005b0 <AudioPlayer_Bluetooth+0x78>)
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	2307      	movs	r3, #7
 800056e:	60fb      	str	r3, [r7, #12]
            break;
 8000570:	e014      	b.n	800059c <AudioPlayer_Bluetooth+0x64>
        }
        //${AOs::AudioPlayer::SM::MODE::Bluetooth::PLAYPAUSE}
        case PLAYPAUSE_SIG: {
            //transmit the paly play sinal command to the Master
            BspTramitSignal();
 8000572:	f000 fb43 	bl	8000bfc <BspTramitSignal>
            status_ = Q_HANDLED();
 8000576:	2302      	movs	r3, #2
 8000578:	60fb      	str	r3, [r7, #12]
            break;
 800057a:	e00f      	b.n	800059c <AudioPlayer_Bluetooth+0x64>
        }
        //${AOs::AudioPlayer::SM::MODE::Bluetooth::NEXT}
        case NEXT_SIG: {
            //transmit the next signal command to master
            bspTrasNext();
 800057c:	f000 fb43 	bl	8000c06 <bspTrasNext>
            status_ = Q_HANDLED();
 8000580:	2302      	movs	r3, #2
 8000582:	60fb      	str	r3, [r7, #12]
            break;
 8000584:	e00a      	b.n	800059c <AudioPlayer_Bluetooth+0x64>
        }
        //${AOs::AudioPlayer::SM::MODE::Bluetooth::PREV}
        case PREV_SIG: {
            //transmit the previous signal command to master
            bspTrasPrev();
 8000586:	f000 fb43 	bl	8000c10 <bspTrasPrev>
            status_ = Q_HANDLED();
 800058a:	2302      	movs	r3, #2
 800058c:	60fb      	str	r3, [r7, #12]
            break;
 800058e:	e005      	b.n	800059c <AudioPlayer_Bluetooth+0x64>
        }
        default: {
            status_ = Q_SUPER(&AudioPlayer_MODE);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <AudioPlayer_Bluetooth+0x7c>)
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
            break;
 800059a:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status_;
 800059c:	68fb      	ldr	r3, [r7, #12]
}
 800059e:	0018      	movs	r0, r3
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b004      	add	sp, #16
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	08002184 	.word	0x08002184
 80005ac:	080005b9 	.word	0x080005b9
 80005b0:	08000661 	.word	0x08000661
 80005b4:	08000391 	.word	0x08000391

080005b8 <AudioPlayer_BT_Init>:

//${AOs::AudioPlayer::SM::MODE::Bluetooth::BT_Init} ..........................
QState AudioPlayer_BT_Init(AudioPlayer * const me, QEvt const * const e) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d002      	beq.n	80005d0 <AudioPlayer_BT_Init+0x18>
 80005ca:	2b09      	cmp	r3, #9
 80005cc:	d003      	beq.n	80005d6 <AudioPlayer_BT_Init+0x1e>
 80005ce:	e008      	b.n	80005e2 <AudioPlayer_BT_Init+0x2a>
        //${AOs::AudioPlayer::SM::MODE::Bluetooth::BT_Init}
        case Q_ENTRY_SIG: {
            //Power BT Module and set the device in slave mode
            status_ = Q_HANDLED();
 80005d0:	2302      	movs	r3, #2
 80005d2:	60fb      	str	r3, [r7, #12]
            break;
 80005d4:	e00b      	b.n	80005ee <AudioPlayer_BT_Init+0x36>
        }
        //${AOs::AudioPlayer::SM::MODE::Bluetooth::BT_Init::DONE}
        case DONE_SIG: {
            status_ = Q_TRAN(&AudioPlayer_Pairing);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <AudioPlayer_BT_Init+0x40>)
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	2307      	movs	r3, #7
 80005de:	60fb      	str	r3, [r7, #12]
            break;
 80005e0:	e005      	b.n	80005ee <AudioPlayer_BT_Init+0x36>
        }
        default: {
            status_ = Q_SUPER(&AudioPlayer_Bluetooth);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a05      	ldr	r2, [pc, #20]	@ (80005fc <AudioPlayer_BT_Init+0x44>)
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
            break;
 80005ec:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status_;
 80005ee:	68fb      	ldr	r3, [r7, #12]
}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b004      	add	sp, #16
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08000601 	.word	0x08000601
 80005fc:	08000539 	.word	0x08000539

08000600 <AudioPlayer_Pairing>:

//${AOs::AudioPlayer::SM::MODE::Bluetooth::Pairing} ..........................
QState AudioPlayer_Pairing(AudioPlayer * const me, QEvt const * const e) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	2b09      	cmp	r3, #9
 8000610:	d105      	bne.n	800061e <AudioPlayer_Pairing+0x1e>
        //${AOs::AudioPlayer::SM::MODE::Bluetooth::Pairing::DONE}
        case DONE_SIG: {
            status_ = Q_TRAN(&AudioPlayer_Pair);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a07      	ldr	r2, [pc, #28]	@ (8000634 <AudioPlayer_Pairing+0x34>)
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	2307      	movs	r3, #7
 800061a:	60fb      	str	r3, [r7, #12]
            break;
 800061c:	e005      	b.n	800062a <AudioPlayer_Pairing+0x2a>
        }
        default: {
            status_ = Q_SUPER(&AudioPlayer_Bluetooth);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <AudioPlayer_Pairing+0x38>)
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
            break;
 8000628:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status_;
 800062a:	68fb      	ldr	r3, [r7, #12]
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b004      	add	sp, #16
 8000632:	bd80      	pop	{r7, pc}
 8000634:	0800063d 	.word	0x0800063d
 8000638:	08000539 	.word	0x08000539

0800063c <AudioPlayer_Pair>:

//${AOs::AudioPlayer::SM::MODE::Bluetooth::Pair} .............................
QState AudioPlayer_Pair(AudioPlayer * const me, QEvt const * const e) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_SUPER(&AudioPlayer_Bluetooth);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <AudioPlayer_Pair+0x20>)
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
            break;
 8000650:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status_;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	0018      	movs	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	b004      	add	sp, #16
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08000539 	.word	0x08000539

08000660 <AudioPlayer_SD_card_Input>:

//${AOs::AudioPlayer::SM::MODE::SD_card_Input} ...............................
QState AudioPlayer_SD_card_Input(AudioPlayer * const me, QEvt const * const e) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	2b0b      	cmp	r3, #11
 8000670:	d827      	bhi.n	80006c2 <AudioPlayer_SD_card_Input+0x62>
 8000672:	009a      	lsls	r2, r3, #2
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <AudioPlayer_SD_card_Input+0x78>)
 8000676:	18d3      	adds	r3, r2, r3
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	469f      	mov	pc, r3
        //${AOs::AudioPlayer::SM::MODE::SD_card_Input}
        case Q_ENTRY_SIG: {
            //mount card and resume play
            bspMountSDCard();
 800067c:	f000 fadc 	bl	8000c38 <bspMountSDCard>
            bspResumeRead();
 8000680:	f000 facb 	bl	8000c1a <bspResumeRead>
            status_ = Q_HANDLED();
 8000684:	2302      	movs	r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
            break;
 8000688:	e021      	b.n	80006ce <AudioPlayer_SD_card_Input+0x6e>
        }
        //${AOs::AudioPlayer::SM::MODE::SD_card_Input}
        case Q_EXIT_SIG: {
            //save current play context and unmount card
            bspSaveReadState();
 800068a:	f000 facb 	bl	8000c24 <bspSaveReadState>
            bspUnmountSDCard();
 800068e:	f000 face 	bl	8000c2e <bspUnmountSDCard>
            status_ = Q_HANDLED();
 8000692:	2302      	movs	r3, #2
 8000694:	60fb      	str	r3, [r7, #12]
            break;
 8000696:	e01a      	b.n	80006ce <AudioPlayer_SD_card_Input+0x6e>
        }
        //${AOs::AudioPlayer::SM::MODE::SD_card_Input::MODE}
        case MODE_SIG: {
            status_ = Q_TRAN(&AudioPlayer_Radio);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a10      	ldr	r2, [pc, #64]	@ (80006dc <AudioPlayer_SD_card_Input+0x7c>)
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	2307      	movs	r3, #7
 80006a0:	60fb      	str	r3, [r7, #12]
            break;
 80006a2:	e014      	b.n	80006ce <AudioPlayer_SD_card_Input+0x6e>
        }
        //${AOs::AudioPlayer::SM::MODE::SD_card_Input::PLAYPAUSE}
        case PLAYPAUSE_SIG: {
            //pause current read and play operation
            bspPauseRead();
 80006a4:	f000 facd 	bl	8000c42 <bspPauseRead>
            status_ = Q_HANDLED();
 80006a8:	2302      	movs	r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
            break;
 80006ac:	e00f      	b.n	80006ce <AudioPlayer_SD_card_Input+0x6e>
        }
        //${AOs::AudioPlayer::SM::MODE::SD_card_Input::NEXT}
        case NEXT_SIG: {
            //Read Next mp3file from card.
            bspReadNext();
 80006ae:	f000 facd 	bl	8000c4c <bspReadNext>
            status_ = Q_HANDLED();
 80006b2:	2302      	movs	r3, #2
 80006b4:	60fb      	str	r3, [r7, #12]
            break;
 80006b6:	e00a      	b.n	80006ce <AudioPlayer_SD_card_Input+0x6e>
        }
        //${AOs::AudioPlayer::SM::MODE::SD_card_Input::PREV}
        case PREV_SIG: {
            //Read Previos mp3file from card.
            bspReadPrev();
 80006b8:	f000 facd 	bl	8000c56 <bspReadPrev>
            status_ = Q_HANDLED();
 80006bc:	2302      	movs	r3, #2
 80006be:	60fb      	str	r3, [r7, #12]
            break;
 80006c0:	e005      	b.n	80006ce <AudioPlayer_SD_card_Input+0x6e>
        }
        default: {
            status_ = Q_SUPER(&AudioPlayer_MODE);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a06      	ldr	r2, [pc, #24]	@ (80006e0 <AudioPlayer_SD_card_Input+0x80>)
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
            break;
 80006cc:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status_;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b004      	add	sp, #16
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	080021b4 	.word	0x080021b4
 80006dc:	080004c5 	.word	0x080004c5
 80006e0:	08000391 	.word	0x08000391

080006e4 <AudioPlayer_OFF>:

//${AOs::AudioPlayer::SM::OFF} ...............................................
QState AudioPlayer_OFF(AudioPlayer * const me, QEvt const * const e) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d104      	bne.n	8000700 <AudioPlayer_OFF+0x1c>
        //${AOs::AudioPlayer::SM::OFF}
        case Q_ENTRY_SIG: {
            BSP_terminate();
 80006f6:	f000 fa4b 	bl	8000b90 <BSP_terminate>
            status_ = Q_HANDLED();
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
            break;
 80006fe:	e005      	b.n	800070c <AudioPlayer_OFF+0x28>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <AudioPlayer_OFF+0x34>)
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
            break;
 800070a:	46c0      	nop			@ (mov r8, r8)
        }
    }
    return status_;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	0018      	movs	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	b004      	add	sp, #16
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	08001071 	.word	0x08001071

0800071c <AudioPlayer_ctor>:
static AudioPlayer AudioPlayer_inst;
//$enddef${AOs} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared::AudioPlayer_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Shared::AudioPlayer_ctor} ................................................
void AudioPlayer_ctor(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
    AudioPlayer * const me = &AudioPlayer_inst;
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <AudioPlayer_ctor+0x48>)
 8000724:	607b      	str	r3, [r7, #4]

    me->vol = (uint8_t)3U;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	223c      	movs	r2, #60	@ 0x3c
 800072a:	2103      	movs	r1, #3
 800072c:	5499      	strb	r1, [r3, r2]

    QActive_ctor(&me->super, Q_STATE_CAST(&AudioPlayer_initial));
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <AudioPlayer_ctor+0x4c>)
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f001 f86b 	bl	8001810 <QActive_ctor>

    QTimeEvt_ctorX(&me->volTimerEvt, &me->super, TIMEOUT_SIG, 0U);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3324      	adds	r3, #36	@ 0x24
 800073e:	0018      	movs	r0, r3
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	2300      	movs	r3, #0
 8000744:	2204      	movs	r2, #4
 8000746:	f001 f953 	bl	80019f0 <QTimeEvt_ctorX>

    QTimeEvt_ctorX(&me->volTimerEvt, &me->super, TIMEOUT_SIG, 0U);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3324      	adds	r3, #36	@ 0x24
 800074e:	0018      	movs	r0, r3
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	2300      	movs	r3, #0
 8000754:	2204      	movs	r2, #4
 8000756:	f001 f94b 	bl	80019f0 <QTimeEvt_ctorX>
}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	20000820 	.word	0x20000820
 8000768:	08000361 	.word	0x08000361

0800076c <main>:
#include "shared.h"				// APP shared components
#include "AudioPlayer.h"


//............................................................................
int main() {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    QF_init();       // initialize the framework and the underlying RT kernel
 8000770:	f001 fbfe 	bl	8001f70 <QF_init>
    BSP_init();      // initialize the BSP
 8000774:	f000 f95a 	bl	8000a2c <BSP_init>
    BSP_start();     // start the AOs/Threads
 8000778:	f000 f9f0 	bl	8000b5c <BSP_start>
    return QF_run(); // run the QF application
 800077c:	f001 fc1a 	bl	8001fb4 <QF_run>
 8000780:	0003      	movs	r3, r0
}
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	0002      	movs	r2, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b7f      	cmp	r3, #127	@ 0x7f
 800079c:	d828      	bhi.n	80007f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IPR[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IPR[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079e:	4a2f      	ldr	r2, [pc, #188]	@ (800085c <__NVIC_SetPriority+0xd4>)
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	089b      	lsrs	r3, r3, #2
 80007a8:	33c0      	adds	r3, #192	@ 0xc0
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	589b      	ldr	r3, [r3, r2]
 80007ae:	1dfa      	adds	r2, r7, #7
 80007b0:	7812      	ldrb	r2, [r2, #0]
 80007b2:	0011      	movs	r1, r2
 80007b4:	2203      	movs	r2, #3
 80007b6:	400a      	ands	r2, r1
 80007b8:	00d2      	lsls	r2, r2, #3
 80007ba:	21ff      	movs	r1, #255	@ 0xff
 80007bc:	4091      	lsls	r1, r2
 80007be:	000a      	movs	r2, r1
 80007c0:	43d2      	mvns	r2, r2
 80007c2:	401a      	ands	r2, r3
 80007c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	019b      	lsls	r3, r3, #6
 80007ca:	22ff      	movs	r2, #255	@ 0xff
 80007cc:	401a      	ands	r2, r3
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	0018      	movs	r0, r3
 80007d4:	2303      	movs	r3, #3
 80007d6:	4003      	ands	r3, r0
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	409a      	lsls	r2, r3
    NVIC->IPR[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IPR[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007dc:	481f      	ldr	r0, [pc, #124]	@ (800085c <__NVIC_SetPriority+0xd4>)
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	089b      	lsrs	r3, r3, #2
 80007e6:	430a      	orrs	r2, r1
 80007e8:	33c0      	adds	r3, #192	@ 0xc0
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHPR[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ee:	e031      	b.n	8000854 <__NVIC_SetPriority+0xcc>
    SCB->SHPR[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000860 <__NVIC_SetPriority+0xd8>)
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	0019      	movs	r1, r3
 80007f8:	230f      	movs	r3, #15
 80007fa:	400b      	ands	r3, r1
 80007fc:	3b08      	subs	r3, #8
 80007fe:	089b      	lsrs	r3, r3, #2
 8000800:	3306      	adds	r3, #6
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	18d3      	adds	r3, r2, r3
 8000806:	3304      	adds	r3, #4
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1dfa      	adds	r2, r7, #7
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	0011      	movs	r1, r2
 8000810:	2203      	movs	r2, #3
 8000812:	400a      	ands	r2, r1
 8000814:	00d2      	lsls	r2, r2, #3
 8000816:	21ff      	movs	r1, #255	@ 0xff
 8000818:	4091      	lsls	r1, r2
 800081a:	000a      	movs	r2, r1
 800081c:	43d2      	mvns	r2, r2
 800081e:	401a      	ands	r2, r3
 8000820:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	019b      	lsls	r3, r3, #6
 8000826:	22ff      	movs	r2, #255	@ 0xff
 8000828:	401a      	ands	r2, r3
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	0018      	movs	r0, r3
 8000830:	2303      	movs	r3, #3
 8000832:	4003      	ands	r3, r0
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	409a      	lsls	r2, r3
    SCB->SHPR[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000838:	4809      	ldr	r0, [pc, #36]	@ (8000860 <__NVIC_SetPriority+0xd8>)
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	001c      	movs	r4, r3
 8000840:	230f      	movs	r3, #15
 8000842:	4023      	ands	r3, r4
 8000844:	3b08      	subs	r3, #8
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	430a      	orrs	r2, r1
 800084a:	3306      	adds	r3, #6
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	18c3      	adds	r3, r0, r3
 8000850:	3304      	adds	r3, #4
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b003      	add	sp, #12
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	045b      	lsls	r3, r3, #17
 8000874:	429a      	cmp	r2, r3
 8000876:	d301      	bcc.n	800087c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000878:	2301      	movs	r3, #1
 800087a:	e010      	b.n	800089e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <SysTick_Config+0x44>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	3a01      	subs	r2, #1
 8000882:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	2103      	movs	r1, #3
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff ff7c 	bl	8000788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <SysTick_Config+0x44>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000896:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <SysTick_Config+0x44>)
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800089c:	2300      	movs	r3, #0
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	e000e010 	.word	0xe000e010

080008ac <Q_onError>:
#endif

//============================================================================
// Error handler and ISRs...

Q_NORETURN Q_onError(char const * const module, int_t const id) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(id);
    QS_ASSERTION(module, id, 10000U);

#ifndef NDEBUG
    // light up the user LED
    GPIOA->BSRR = (1U << LD4_PIN);  // turn LED on
 80008b6:	23a0      	movs	r3, #160	@ 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	2220      	movs	r2, #32
 80008bc:	619a      	str	r2, [r3, #24]
    // for debugging, hang on in an endless loop...
    for (;;) {
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	e7fd      	b.n	80008be <Q_onError+0x12>

080008c2 <assert_failed>:
    NVIC_SystemReset();
}
//............................................................................
// assertion failure handler for the STM32 library, including the startup code
void assert_failed(char const * const module, int_t const id); // prototype
void assert_failed(char const * const module, int_t const id) {
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	6039      	str	r1, [r7, #0]
    Q_onError(module, id);
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	0011      	movs	r1, r2
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff ffea 	bl	80008ac <Q_onError>

080008d8 <SysTick_Handler>:
}

// ISRs used in the application ============================================

void SysTick_Handler(void); // prototype
void SysTick_Handler(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
    QK_ISR_ENTRY();   // inform QK about entering an ISR

    QTIMEEVT_TICK_X(0U, &l_SysTick_Handler); // time events at rate 0
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 f967 	bl	8001bb4 <QTimeEvt_tick_>
        uint32_t depressed;
        uint32_t previous;
        uint32_t pre_previous;
    } buttons = { 0U, 0U ,0U};

    uint32_t current = ~GPIOC->IDR; // read Port C with state of Button B1
 80008e6:	4b47      	ldr	r3, [pc, #284]	@ (8000a04 <SysTick_Handler+0x12c>)
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	43db      	mvns	r3, r3
 80008ec:	607b      	str	r3, [r7, #4]
    uint32_t tmp = buttons.depressed; // save the depressed buttons
 80008ee:	4b46      	ldr	r3, [pc, #280]	@ (8000a08 <SysTick_Handler+0x130>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	603b      	str	r3, [r7, #0]
    buttons.depressed |= (buttons.pre_previous & buttons.previous & current); // set depressed
 80008f4:	4b44      	ldr	r3, [pc, #272]	@ (8000a08 <SysTick_Handler+0x130>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b43      	ldr	r3, [pc, #268]	@ (8000a08 <SysTick_Handler+0x130>)
 80008fa:	6899      	ldr	r1, [r3, #8]
 80008fc:	4b42      	ldr	r3, [pc, #264]	@ (8000a08 <SysTick_Handler+0x130>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	400b      	ands	r3, r1
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	400b      	ands	r3, r1
 8000906:	431a      	orrs	r2, r3
 8000908:	4b3f      	ldr	r3, [pc, #252]	@ (8000a08 <SysTick_Handler+0x130>)
 800090a:	601a      	str	r2, [r3, #0]
    buttons.depressed &= (buttons.pre_previous  | buttons.previous | current); // clear released
 800090c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a08 <SysTick_Handler+0x130>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b3d      	ldr	r3, [pc, #244]	@ (8000a08 <SysTick_Handler+0x130>)
 8000912:	6899      	ldr	r1, [r3, #8]
 8000914:	4b3c      	ldr	r3, [pc, #240]	@ (8000a08 <SysTick_Handler+0x130>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	4319      	orrs	r1, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	430b      	orrs	r3, r1
 800091e:	401a      	ands	r2, r3
 8000920:	4b39      	ldr	r3, [pc, #228]	@ (8000a08 <SysTick_Handler+0x130>)
 8000922:	601a      	str	r2, [r3, #0]
    buttons.pre_previous = buttons.previous; //updating the pre_revious history
 8000924:	4b38      	ldr	r3, [pc, #224]	@ (8000a08 <SysTick_Handler+0x130>)
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	4b37      	ldr	r3, [pc, #220]	@ (8000a08 <SysTick_Handler+0x130>)
 800092a:	609a      	str	r2, [r3, #8]
    buttons.previous   = current; // update the history
 800092c:	4b36      	ldr	r3, [pc, #216]	@ (8000a08 <SysTick_Handler+0x130>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	605a      	str	r2, [r3, #4]
    tmp ^= buttons.depressed;     // changed debounced depressed
 8000932:	4b35      	ldr	r3, [pc, #212]	@ (8000a08 <SysTick_Handler+0x130>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	4053      	eors	r3, r2
 800093a:	603b      	str	r3, [r7, #0]
    current = buttons.depressed;
 800093c:	4b32      	ldr	r3, [pc, #200]	@ (8000a08 <SysTick_Handler+0x130>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	607b      	str	r3, [r7, #4]
    static QEvt const releaseEvt = QEVT_INITIALIZER(RELEASE_SIG);

if ((tmp & (1U << VOL_UP)) != 0U) { // debounced B1 state changed?
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	2380      	movs	r3, #128	@ 0x80
 8000946:	019b      	lsls	r3, r3, #6
 8000948:	4013      	ands	r3, r2
 800094a:	d013      	beq.n	8000974 <SysTick_Handler+0x9c>
if ((current & (1U << VOL_UP)) != 0U) { // is B1 depressed?
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	2380      	movs	r3, #128	@ 0x80
 8000950:	019b      	lsls	r3, r3, #6
 8000952:	4013      	ands	r3, r2
 8000954:	d007      	beq.n	8000966 <SysTick_Handler+0x8e>
	static QEvt const plusEvt = QEVT_INITIALIZER(PLUS_SIG);
	QACTIVE_POST(AO_AudioPlayer, &plusEvt, (void)0U);
 8000956:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <SysTick_Handler+0x134>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	4a2d      	ldr	r2, [pc, #180]	@ (8000a10 <SysTick_Handler+0x138>)
 800095c:	492d      	ldr	r1, [pc, #180]	@ (8000a14 <SysTick_Handler+0x13c>)
 800095e:	2300      	movs	r3, #0
 8000960:	f000 fd60 	bl	8001424 <QActive_post_>
 8000964:	e006      	b.n	8000974 <SysTick_Handler+0x9c>
}
else { // the button is released
	QACTIVE_POST(AO_AudioPlayer, &releaseEvt, (void)0U);
 8000966:	4b29      	ldr	r3, [pc, #164]	@ (8000a0c <SysTick_Handler+0x134>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	4a29      	ldr	r2, [pc, #164]	@ (8000a10 <SysTick_Handler+0x138>)
 800096c:	492a      	ldr	r1, [pc, #168]	@ (8000a18 <SysTick_Handler+0x140>)
 800096e:	2300      	movs	r3, #0
 8000970:	f000 fd58 	bl	8001424 <QActive_post_>
}
}

if ((tmp & (1U << VOL_DOWN)) != 0U) { // debounced B2 state changed?
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	2240      	movs	r2, #64	@ 0x40
 8000978:	4013      	ands	r3, r2
 800097a:	d012      	beq.n	80009a2 <SysTick_Handler+0xca>
		if ((current & (1U << VOL_DOWN)) != 0U) { // is B2 depressed?
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2240      	movs	r2, #64	@ 0x40
 8000980:	4013      	ands	r3, r2
 8000982:	d007      	beq.n	8000994 <SysTick_Handler+0xbc>
			static QEvt const minusEvt = QEVT_INITIALIZER(MINUS_SIG);
			QACTIVE_POST(AO_AudioPlayer, &minusEvt, (void)0U);
 8000984:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <SysTick_Handler+0x134>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	4a21      	ldr	r2, [pc, #132]	@ (8000a10 <SysTick_Handler+0x138>)
 800098a:	4924      	ldr	r1, [pc, #144]	@ (8000a1c <SysTick_Handler+0x144>)
 800098c:	2300      	movs	r3, #0
 800098e:	f000 fd49 	bl	8001424 <QActive_post_>
 8000992:	e006      	b.n	80009a2 <SysTick_Handler+0xca>
		}
		else { // the button is released
			QACTIVE_POST(AO_AudioPlayer, &releaseEvt, (void)0U);
 8000994:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <SysTick_Handler+0x134>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	4a1d      	ldr	r2, [pc, #116]	@ (8000a10 <SysTick_Handler+0x138>)
 800099a:	491f      	ldr	r1, [pc, #124]	@ (8000a18 <SysTick_Handler+0x140>)
 800099c:	2300      	movs	r3, #0
 800099e:	f000 fd41 	bl	8001424 <QActive_post_>
		}
}

if ((tmp & (1U << MODE_PIN)) != 0U) { // debounced B2 state changed?
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	4013      	ands	r3, r2
 80009a8:	d00a      	beq.n	80009c0 <SysTick_Handler+0xe8>
		if ((current & (1U << MODE_PIN)) != 0U) { // is B2 depressed?
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	4013      	ands	r3, r2
 80009b0:	d006      	beq.n	80009c0 <SysTick_Handler+0xe8>
			static QEvt const modeEvt = QEVT_INITIALIZER(MODE_SIG);
			QACTIVE_POST(AO_AudioPlayer, &modeEvt, (void)0U);
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <SysTick_Handler+0x134>)
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <SysTick_Handler+0x138>)
 80009b8:	4919      	ldr	r1, [pc, #100]	@ (8000a20 <SysTick_Handler+0x148>)
 80009ba:	2300      	movs	r3, #0
 80009bc:	f000 fd32 	bl	8001424 <QActive_post_>
	}

}

if ((tmp & (1U << PLAYPAUSE_PIN)) != 0U) { // debounced B2 state changed?
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	01db      	lsls	r3, r3, #7
 80009c6:	4013      	ands	r3, r2
 80009c8:	d00b      	beq.n	80009e2 <SysTick_Handler+0x10a>
	if ((current & (1U << PLAYPAUSE_PIN)) != 0U) { // is B2 depressed?
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	2380      	movs	r3, #128	@ 0x80
 80009ce:	01db      	lsls	r3, r3, #7
 80009d0:	4013      	ands	r3, r2
 80009d2:	d006      	beq.n	80009e2 <SysTick_Handler+0x10a>
		static QEvt const pauseplayEvt = QEVT_INITIALIZER(PLAYPAUSE_SIG);
		QACTIVE_POST(AO_AudioPlayer, &pauseplayEvt, (void)0U);
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <SysTick_Handler+0x134>)
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <SysTick_Handler+0x138>)
 80009da:	4912      	ldr	r1, [pc, #72]	@ (8000a24 <SysTick_Handler+0x14c>)
 80009dc:	2300      	movs	r3, #0
 80009de:	f000 fd21 	bl	8001424 <QActive_post_>
#ifdef Q_SPY
    tmp = SysTick->CTRL; // clear CTRL_COUNTFLAG
    QS_tickTime_ += QS_tickPeriod_; // account for the clock rollover
#endif

    QK_ISR_EXIT();  // inform QK about exiting an ISR
 80009e2:	f000 f93d 	bl	8000c60 <QF_int_disable_>
 80009e6:	f001 f9e5 	bl	8001db4 <QK_sched_>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d003      	beq.n	80009f6 <SysTick_Handler+0x11e>
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <SysTick_Handler+0x150>)
 80009f0:	2280      	movs	r2, #128	@ 0x80
 80009f2:	0552      	lsls	r2, r2, #21
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	f000 f943 	bl	8000c80 <QF_int_enable_>

}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	50000800 	.word	0x50000800
 8000a08:	20000860 	.word	0x20000860
 8000a0c:	080021e4 	.word	0x080021e4
 8000a10:	0000ffff 	.word	0x0000ffff
 8000a14:	080021f0 	.word	0x080021f0
 8000a18:	080021f4 	.word	0x080021f4
 8000a1c:	080021f8 	.word	0x080021f8
 8000a20:	080021fc 	.word	0x080021fc
 8000a24:	08002200 	.word	0x08002200
 8000a28:	e000ed04 	.word	0xe000ed04

08000a2c <BSP_init>:


//============================================================================
// BSP functions...

void BSP_init(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    // Configure the MPU to prevent NULL-pointer dereferencing ...
    MPU->RBAR = 0x0U                          // base address (NULL)
 8000a30:	4b42      	ldr	r3, [pc, #264]	@ (8000b3c <BSP_init+0x110>)
 8000a32:	2217      	movs	r2, #23
 8000a34:	60da      	str	r2, [r3, #12]
                | MPU_RBAR_VALID_Msk          // valid region
                | (MPU_RBAR_REGION_Msk & 7U); // region #7
    MPU->RASR = (7U << MPU_RASR_SIZE_Pos)     // 2^(7+1) region
 8000a36:	4b41      	ldr	r3, [pc, #260]	@ (8000b3c <BSP_init+0x110>)
 8000a38:	220f      	movs	r2, #15
 8000a3a:	611a      	str	r2, [r3, #16]
                | (0x0U << MPU_RASR_AP_Pos)   // no-access region
                | MPU_RASR_ENABLE_Msk;        // region enable
    MPU->CTRL = MPU_CTRL_PRIVDEFENA_Msk       // enable background region
 8000a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b3c <BSP_init+0x110>)
 8000a3e:	2205      	movs	r2, #5
 8000a40:	605a      	str	r2, [r3, #4]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000a42:	f3bf 8f6f 	isb	sy
}
 8000a46:	46c0      	nop			@ (mov r8, r8)
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a48:	f3bf 8f4f 	dsb	sy
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
    __ISB();
    __DSB();

    // NOTE: SystemInit() has been already called from the startup code
    // but SystemCoreClock needs to be updated
    SystemCoreClockUpdate();
 8000a4e:	f7ff fc3d 	bl	80002cc <SystemCoreClockUpdate>

    // enable GPIOA clock port for the LED LD4
    RCC->IOPENR |= (1U << 0U);
 8000a52:	4b3b      	ldr	r3, [pc, #236]	@ (8000b40 <BSP_init+0x114>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a56:	4b3a      	ldr	r3, [pc, #232]	@ (8000b40 <BSP_init+0x114>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	@ 0x34

    // set all used GPIOA pins as push-pull output, no pull-up, pull-down
    GPIOA->MODER   &= ~(3U << 2U*LD4_PIN);
 8000a5e:	23a0      	movs	r3, #160	@ 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	23a0      	movs	r3, #160	@ 0xa0
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	4936      	ldr	r1, [pc, #216]	@ (8000b44 <BSP_init+0x118>)
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	601a      	str	r2, [r3, #0]
    GPIOA->MODER   |=  (1U << 2U*LD4_PIN);
 8000a6e:	23a0      	movs	r3, #160	@ 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	23a0      	movs	r3, #160	@ 0xa0
 8000a76:	05db      	lsls	r3, r3, #23
 8000a78:	2180      	movs	r1, #128	@ 0x80
 8000a7a:	00c9      	lsls	r1, r1, #3
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
    GPIOA->OTYPER  &= ~(1U <<    LD4_PIN);
 8000a80:	23a0      	movs	r3, #160	@ 0xa0
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	23a0      	movs	r3, #160	@ 0xa0
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	438a      	bics	r2, r1
 8000a8e:	605a      	str	r2, [r3, #4]
    GPIOA->OSPEEDR &= ~(3U << 2U*LD4_PIN);
 8000a90:	23a0      	movs	r3, #160	@ 0xa0
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	23a0      	movs	r3, #160	@ 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	492a      	ldr	r1, [pc, #168]	@ (8000b44 <BSP_init+0x118>)
 8000a9c:	400a      	ands	r2, r1
 8000a9e:	609a      	str	r2, [r3, #8]
    GPIOA->OSPEEDR |=  (1U << 2U*LD4_PIN);
 8000aa0:	23a0      	movs	r3, #160	@ 0xa0
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	23a0      	movs	r3, #160	@ 0xa0
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	2180      	movs	r1, #128	@ 0x80
 8000aac:	00c9      	lsls	r1, r1, #3
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	609a      	str	r2, [r3, #8]
    GPIOA->PUPDR   &= ~(3U << 2U*LD4_PIN);
 8000ab2:	23a0      	movs	r3, #160	@ 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	23a0      	movs	r3, #160	@ 0xa0
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	4921      	ldr	r1, [pc, #132]	@ (8000b44 <BSP_init+0x118>)
 8000abe:	400a      	ands	r2, r1
 8000ac0:	60da      	str	r2, [r3, #12]

    // enable GPIOC clock port for the Button B1
    RCC->IOPENR |=  (1U << 2U);
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <BSP_init+0x114>)
 8000ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <BSP_init+0x114>)
 8000ac8:	2104      	movs	r1, #4
 8000aca:	430a      	orrs	r2, r1
 8000acc:	635a      	str	r2, [r3, #52]	@ 0x34

    // configure Button B1 pin on GPIOC as input, no pull-up, pull-down
    GPIOC->MODER &= ~(3U << 2U*VOL_UP);
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <BSP_init+0x11c>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <BSP_init+0x11c>)
 8000ad4:	491d      	ldr	r1, [pc, #116]	@ (8000b4c <BSP_init+0x120>)
 8000ad6:	400a      	ands	r2, r1
 8000ad8:	601a      	str	r2, [r3, #0]
    GPIOC->PUPDR &= ~(3U << 2U*VOL_UP);
 8000ada:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <BSP_init+0x11c>)
 8000adc:	68da      	ldr	r2, [r3, #12]
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <BSP_init+0x11c>)
 8000ae0:	491a      	ldr	r1, [pc, #104]	@ (8000b4c <BSP_init+0x120>)
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	60da      	str	r2, [r3, #12]

    // configure VOL_DOWN PIN  pin on GPIOC as input, no pull-up, pull-down
    GPIOC->MODER &= ~(3U << 2U*VOL_DOWN);
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <BSP_init+0x11c>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <BSP_init+0x11c>)
 8000aec:	4918      	ldr	r1, [pc, #96]	@ (8000b50 <BSP_init+0x124>)
 8000aee:	400a      	ands	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]
    GPIOC->PUPDR |= (1U << 2U*VOL_DOWN);
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <BSP_init+0x11c>)
 8000af4:	68da      	ldr	r2, [r3, #12]
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <BSP_init+0x11c>)
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	0149      	lsls	r1, r1, #5
 8000afc:	430a      	orrs	r2, r1
 8000afe:	60da      	str	r2, [r3, #12]

    // configure MODE_PIN on GPIOC as input, no pull-up, pull-down
    GPIOC->MODER &= ~(3U << 2U*MODE_PIN);
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <BSP_init+0x11c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <BSP_init+0x11c>)
 8000b06:	4913      	ldr	r1, [pc, #76]	@ (8000b54 <BSP_init+0x128>)
 8000b08:	400a      	ands	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]
    GPIOC->PUPDR |= (1U << 2U*MODE_PIN);
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <BSP_init+0x11c>)
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <BSP_init+0x11c>)
 8000b12:	2180      	movs	r1, #128	@ 0x80
 8000b14:	01c9      	lsls	r1, r1, #7
 8000b16:	430a      	orrs	r2, r1
 8000b18:	60da      	str	r2, [r3, #12]

    // configure PLAYPAUSE_PIN on GPIOC as input, no pull-up, pull-down
    GPIOC->MODER &= ~(3U << 2U*PLAYPAUSE_PIN);
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <BSP_init+0x11c>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <BSP_init+0x11c>)
 8000b20:	490d      	ldr	r1, [pc, #52]	@ (8000b58 <BSP_init+0x12c>)
 8000b22:	400a      	ands	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]
    GPIOC->PUPDR |= (1U << 2U*PLAYPAUSE_PIN);
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <BSP_init+0x11c>)
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <BSP_init+0x11c>)
 8000b2c:	2180      	movs	r1, #128	@ 0x80
 8000b2e:	0549      	lsls	r1, r1, #21
 8000b30:	430a      	orrs	r2, r1
 8000b32:	60da      	str	r2, [r3, #12]
    QS_ONLY(produce_sig_dict());

    // setup the QS filters...
    QS_GLB_FILTER(QS_ALL_RECORDS);   // all records
    QS_GLB_FILTER(-QS_QF_TICK);      // exclude the clock tick
}
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	e000ed90 	.word	0xe000ed90
 8000b40:	40021000 	.word	0x40021000
 8000b44:	fffff3ff 	.word	0xfffff3ff
 8000b48:	50000800 	.word	0x50000800
 8000b4c:	f3ffffff 	.word	0xf3ffffff
 8000b50:	ffffcfff 	.word	0xffffcfff
 8000b54:	ffff3fff 	.word	0xffff3fff
 8000b58:	cfffffff 	.word	0xcfffffff

08000b5c <BSP_start>:
//............................................................................
void BSP_start(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af04      	add	r7, sp, #16

	static QEvtPtr playerQueueSto[PLAYER_QUEUE];

//	static QEvt * mediaQueueSto[PLAYER_QUEUE];

    AudioPlayer_ctor();
 8000b62:	f7ff fddb 	bl	800071c <AudioPlayer_ctor>

    QActive_start(AO_AudioPlayer,
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <BSP_start+0x2c>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <BSP_start+0x30>)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	2300      	movs	r3, #0
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	2300      	movs	r3, #0
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	230a      	movs	r3, #10
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	f001 fa30 	bl	8001fe0 <QActive_start>
        4U,                // QP prio. of the AO
		playerQueueSto,               // event queue storage
        Q_DIM(playerQueueSto),        // queue length [events]
        (void *)0, 0U,               // no stack storage
        (void *)0);                  // no initialization param
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	080021e4 	.word	0x080021e4
 8000b8c:	2000086c 	.word	0x2000086c

08000b90 <BSP_terminate>:
    QS_BEGIN_ID(PAUSED_STAT, AO_Table->prio)
        QS_U8(1, paused);  // Paused status
    QS_END()
}
//............................................................................
void BSP_terminate(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
//    Q_UNUSED_PAR(result);
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <QF_onStartup>:

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    // set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <QF_onStartup+0x34>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2164      	movs	r1, #100	@ 0x64
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff faae 	bl	8000108 <__udivsi3>
 8000bac:	0003      	movs	r3, r0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fe58 	bl	8000864 <SysTick_Config>
    // assign all priority bits for preemption-prio. and none to sub-prio.
    // NOTE: this might have been changed by STM32Cube.
    NVIC_SetPriorityGrouping(0U);

    // set priorities of ALL ISRs used in the system, see NOTE1
    NVIC_SetPriority(USART2_IRQn,    0U); // kernel UNAWARE interrupt
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	201c      	movs	r0, #28
 8000bb8:	f7ff fde6 	bl	8000788 <__NVIC_SetPriority>
//    NVIC_SetPriority(EXTI0_1_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 0U);
    NVIC_SetPriority(SysTick_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 0U);
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	425b      	negs	r3, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff fde0 	bl	8000788 <__NVIC_SetPriority>
//    NVIC_EnableIRQ(EXTI0_1_IRQn);

#ifdef Q_SPY
    NVIC_EnableIRQ(USART2_IRQn); // UART2 interrupt used for QS-RX
#endif
}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	20000800 	.word	0x20000800

08000bd4 <QK_onIdle>:
//............................................................................
void QF_onCleanup(void) {
}

//............................................................................
void QK_onIdle(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    // Put the CPU and peripherals to the low-power mode.
    // you might need to customize the clock management for your application,
    // see the datasheet for your particular Cortex-M MCU.
    __WFI(); // Wait-For-Interrupt
#endif
}
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <bspMute>:
}

#endif // Q_SPY
//----------------------------------------------------------------------------
//Holder skeleton  function definetions
void bspMute(void){}
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <BspSeekNext>:

void BspSeekNext(void){}
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <BspSeekPrev>:
void BspSeekPrev(void){}
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <BspTramitSignal>:

void BspTramitSignal(void){}
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <bspTrasNext>:
void bspTrasNext(void){}
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <bspTrasPrev>:
void bspTrasPrev(void){}
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <bspResumeRead>:

void bspResumeRead(void){}
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <bspSaveReadState>:
void bspSaveReadState(void){}
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <bspUnmountSDCard>:

void bspUnmountSDCard(void){}
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <bspMountSDCard>:
void bspMountSDCard(void){}
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <bspPauseRead>:

void bspPauseRead(void){}
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <bspReadNext>:
void bspReadNext(void){}
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <bspReadPrev>:
void bspReadPrev(void){}
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <QF_int_disable_>:
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function, which means that
// this interrupt management policy CANNOT nest.
__attribute__ ((naked, weak))
void QF_int_disable_(void) {
__asm volatile (
 8000c60:	f3ef 8010 	mrs	r0, PRIMASK
 8000c64:	b672      	cpsid	i
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d100      	bne.n	8000c6c <QF_int_disable_error>
 8000c6a:	4770      	bx	lr

08000c6c <QF_int_disable_error>:
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <QF_int_disable_error+0xc>)
 8000c6e:	2164      	movs	r1, #100	@ 0x64
 8000c70:	4a02      	ldr	r2, [pc, #8]	@ (8000c7c <QF_int_disable_error+0x10>)
 8000c72:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#100          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	0000      	.short	0x0000
 8000c78:	08002204 	.word	0x08002204
 8000c7c:	080008ad 	.word	0x080008ad

08000c80 <QF_int_enable_>:
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function, which means that
// this interrupt management policy CANNOT nest.
__attribute__ ((naked, weak))
void QF_int_enable_(void) {
__asm volatile (
 8000c80:	f3ef 8010 	mrs	r0, PRIMASK
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d001      	beq.n	8000c8c <QF_int_enable_error>
 8000c88:	b662      	cpsie	i
 8000c8a:	4770      	bx	lr

08000c8c <QF_int_enable_error>:
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <QF_int_enable_error+0xc>)
 8000c8e:	2165      	movs	r1, #101	@ 0x65
 8000c90:	4a02      	ldr	r2, [pc, #8]	@ (8000c9c <QF_int_enable_error+0x10>)
 8000c92:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#101          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	0000      	.short	0x0000
 8000c98:	08002204 	.word	0x08002204
 8000c9c:	080008ad 	.word	0x080008ad

08000ca0 <QF_crit_entry_>:
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function, which means that
// this critical section CANNOT nest.
__attribute__ ((naked, weak))
void QF_crit_entry_(void) {
__asm volatile (
 8000ca0:	f3ef 8010 	mrs	r0, PRIMASK
 8000ca4:	b672      	cpsid	i
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d100      	bne.n	8000cac <QF_crit_entry_error>
 8000caa:	4770      	bx	lr

08000cac <QF_crit_entry_error>:
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <QF_crit_entry_error+0xc>)
 8000cae:	216e      	movs	r1, #110	@ 0x6e
 8000cb0:	4a02      	ldr	r2, [pc, #8]	@ (8000cbc <QF_crit_entry_error+0x10>)
 8000cb2:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#110          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	0000      	.short	0x0000
 8000cb8:	08002204 	.word	0x08002204
 8000cbc:	080008ad 	.word	0x080008ad

08000cc0 <QF_crit_exit_>:
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function, which means that
// this critical section CANNOT nest.
__attribute__ ((naked, weak))
void QF_crit_exit_(void) {
__asm volatile (
 8000cc0:	f3ef 8010 	mrs	r0, PRIMASK
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d001      	beq.n	8000ccc <QF_crit_exit_error>
 8000cc8:	b662      	cpsie	i
 8000cca:	4770      	bx	lr

08000ccc <QF_crit_exit_error>:
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <QF_crit_exit_error+0xc>)
 8000cce:	216f      	movs	r1, #111	@ 0x6f
 8000cd0:	4a02      	ldr	r2, [pc, #8]	@ (8000cdc <QF_crit_exit_error+0x10>)
 8000cd2:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#111          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	0000      	.short	0x0000
 8000cd8:	08002204 	.word	0x08002204
 8000cdc:	080008ad 	.word	0x080008ad

08000ce0 <QK_init>:
// application programmer forgets to explicitly set priorities of all
// "kernel aware" interrupts.
//
// NOTE: The IRQ priorities established in QK_init() can be later changed
// by the application-level code.
void QK_init(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    }

#endif                  //--------- use BASEPRI for critical section

    // SCB_SYSPRI[2]: PendSV set to priority 0xFF (lowest)
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (0xFFU << 16U));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <QK_init+0x18>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <QK_init+0x18>)
 8000cea:	21ff      	movs	r1, #255	@ 0xff
 8000cec:	0409      	lsls	r1, r1, #16
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]
    SCB_CPACR = (SCB_CPACR | ((3UL << 20U) | (3UL << 22U)));

    // FPU automatic state preservation (ASPEN) lazy stacking (LSPEN)
    FPU_FPCCR = (FPU_FPCCR | (1U << 30U) | (1U << 31U));
#endif                  //--------- VFP available
}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	e000ed20 	.word	0xe000ed20

08000cfc <PendSV_Handler>:
// The inline GNU assembler does not accept mnemonics MOVS, LSRS and ADDS,
// but for ARMv6-M the mnemonics MOV, LSR and ADD always set the condition
// flags in the PSR.
__attribute__ ((naked, optimize("-fno-stack-protector")))
void PendSV_Handler(void) {
__asm volatile (
 8000cfc:	b501      	push	{r0, lr}
 8000cfe:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <PendSV_Handler+0x24>)
 8000d00:	4780      	blx	r0
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <PendSV_Handler+0x28>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	06c9      	lsls	r1, r1, #27
 8000d08:	6011      	str	r1, [r2, #0]
 8000d0a:	08cb      	lsrs	r3, r1, #3
 8000d0c:	4a06      	ldr	r2, [pc, #24]	@ (8000d28 <PendSV_Handler+0x2c>)
 8000d0e:	3a01      	subs	r2, #1
 8000d10:	4906      	ldr	r1, [pc, #24]	@ (8000d2c <PendSV_Handler+0x30>)
 8000d12:	b088      	sub	sp, #32
 8000d14:	a805      	add	r0, sp, #20
 8000d16:	c00e      	stmia	r0!, {r1, r2, r3}
 8000d18:	2006      	movs	r0, #6
 8000d1a:	43c0      	mvns	r0, r0
 8000d1c:	4700      	bx	r0
#if (__ARM_ARCH != 6)   //--------- if ARMv7-M and higher...
    "  DSB                      \n" // ARM Erratum 838869
#endif                  //--------- ARMv7-M and higher
    "  BX      r0               \n" // exception-return to the QK activator
    );
}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	08000c61 	.word	0x08000c61
 8000d24:	e000ed04 	.word	0xe000ed04
 8000d28:	08001e79 	.word	0x08001e79
 8000d2c:	08000d31 	.word	0x08000d31

08000d30 <QK_thread_ret>:
// The inline GNU assembler does not accept mnemonics MOVS, LSRS and ADDS,
// but for ARMv6-M the mnemonics MOV, LSR and ADD always set the condition
// flags in the PSR.
__attribute__ ((naked, used))
void QK_thread_ret(void) {
    __asm volatile (
 8000d30:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <QK_thread_ret+0x18>)
 8000d32:	2101      	movs	r1, #1
 8000d34:	07c9      	lsls	r1, r1, #31
 8000d36:	6001      	str	r1, [r0, #0]
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <QK_thread_ret+0x1c>)
 8000d3a:	4780      	blx	r0
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <QK_thread_ret+0x20>)
 8000d3e:	2179      	movs	r1, #121	@ 0x79
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <QK_thread_ret+0x24>)
 8000d42:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOV     r1,#121          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	0000      	.short	0x0000
 8000d48:	e000ed04 	.word	0xe000ed04
 8000d4c:	08000c61 	.word	0x08000c61
 8000d50:	08002204 	.word	0x08002204
 8000d54:	080008ad 	.word	0x080008ad

08000d58 <NMI_Handler>:
#else                   //--------- IRQ NOT defined, use the NMI (default)

// NOTE: The NMI_Handler() is entered with interrupts still DISABLED!
__attribute__ ((naked))
void NMI_Handler(void) {
__asm volatile (
 8000d58:	b008      	add	sp, #32
 8000d5a:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <NMI_Handler+0xc>)
 8000d5c:	4780      	blx	r0
 8000d5e:	bd01      	pop	{r0, pc}
    // it is NOT used to used to return from the exception. (See POP {r0,pc})
#endif                  //--------- interrupt disabling with PRIMASK
    "  POP     {r0,pc}          \n" // pop stack aligner and EXC_RETURN to pc
    );
    // NOTE: this causes exception-return to the preempted *thread* context
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	0000      	.short	0x0000
 8000d64:	08000c81 	.word	0x08000c81

08000d68 <QF_qlog2>:
// but for ARMv6-M the mnemonics MOV, LSR and ADD always set the condition
// flags in the PSR.
__attribute__ ((naked, optimize("-fno-stack-protector")))
uint_fast8_t QF_qlog2(uint32_t x) {
    Q_UNUSED_PAR(x);
__asm volatile (
 8000d68:	2100      	movs	r1, #0
 8000d6a:	0c02      	lsrs	r2, r0, #16
 8000d6c:	d001      	beq.n	8000d72 <QF_qlog2_1>
 8000d6e:	2110      	movs	r1, #16
 8000d70:	1c10      	adds	r0, r2, #0

08000d72 <QF_qlog2_1>:
 8000d72:	0a02      	lsrs	r2, r0, #8
 8000d74:	d001      	beq.n	8000d7a <QF_qlog2_2>
 8000d76:	3108      	adds	r1, #8
 8000d78:	1c10      	adds	r0, r2, #0

08000d7a <QF_qlog2_2>:
 8000d7a:	0902      	lsrs	r2, r0, #4
 8000d7c:	d001      	beq.n	8000d82 <QF_qlog2_3>
 8000d7e:	3104      	adds	r1, #4
 8000d80:	1c10      	adds	r0, r2, #0

08000d82 <QF_qlog2_3>:
 8000d82:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <QF_qlog2_LUT+0x14>)
 8000d84:	5c10      	ldrb	r0, [r2, r0]
 8000d86:	1808      	adds	r0, r1, r0
 8000d88:	4770      	bx	lr
 8000d8a:	46c0      	nop			@ (mov r8, r8)

08000d8c <QF_qlog2_LUT>:
 8000d8c:	02020100 	.word	0x02020100
 8000d90:	03030303 	.word	0x03030303
 8000d94:	04040404 	.word	0x04040404
 8000d98:	04040404 	.word	0x04040404
    "  BX      lr               \n"
    "  .align                   \n"
    "QF_qlog2_LUT:              \n"
    "  .byte 0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4"
    );
}
 8000d9c:	46c0      	nop			@ (mov r8, r8)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	08000d8c 	.word	0x08000d8c

08000da4 <QHsm_ctor>:

//............................................................................
//! @protected @memberof QHsm
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    // do not call the QAsm_ctor() here
    me->super.vptr      = &vtable;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <QHsm_ctor+0x24>)
 8000db2:	601a      	str	r2, [r3, #0]
    me->super.state.fun = Q_STATE_CAST(&QHsm_top);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <QHsm_ctor+0x28>)
 8000db8:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	609a      	str	r2, [r3, #8]
}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b002      	add	sp, #8
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	08002224 	.word	0x08002224
 8000dcc:	08001071 	.word	0x08001071

08000dd0 <QHsm_init_>:
//! @private @memberof QHsm
void QHsm_init_(
    QAsm * const me,
    void const * const e,
    uint_fast8_t const qsId)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b08f      	sub	sp, #60	@ 0x3c
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
    }
#else
    Q_UNUSED_PAR(qsId);
#endif // def Q_SPY

    QStateHandler t = me->state.fun;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	633b      	str	r3, [r7, #48]	@ 0x30

    QF_CRIT_ENTRY();
 8000de2:	f7ff ff5d 	bl	8000ca0 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(200, (me->vptr != (struct QAsmVtable *)0)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d007      	beq.n	8000dfe <QHsm_init_+0x2e>
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <QHsm_init_+0x2e>
 8000df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000df8:	4b33      	ldr	r3, [pc, #204]	@ (8000ec8 <QHsm_init_+0xf8>)
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d004      	beq.n	8000e08 <QHsm_init_+0x38>
 8000dfe:	4b33      	ldr	r3, [pc, #204]	@ (8000ecc <QHsm_init_+0xfc>)
 8000e00:	21c8      	movs	r1, #200	@ 0xc8
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fd52 	bl	80008ac <Q_onError>
        && (me->temp.fun != Q_STATE_CAST(0))
        && (t == Q_STATE_CAST(&QHsm_top)));
    QF_CRIT_EXIT();
 8000e08:	f7ff ff5a 	bl	8000cc0 <QF_crit_exit_>

    // execute the top-most initial tran.
    QState const r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	0010      	movs	r0, r2
 8000e16:	4798      	blx	r3
 8000e18:	0003      	movs	r3, r0
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    QF_CRIT_ENTRY();
 8000e1c:	f7ff ff40 	bl	8000ca0 <QF_crit_entry_>
    // the top-most initial tran. must be taken
    Q_ASSERT_INCRIT(210, r == Q_RET_TRAN);
 8000e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e22:	2b07      	cmp	r3, #7
 8000e24:	d004      	beq.n	8000e30 <QHsm_init_+0x60>
 8000e26:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <QHsm_init_+0xfc>)
 8000e28:	21d2      	movs	r1, #210	@ 0xd2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff fd3e 	bl	80008ac <Q_onError>
    QF_CRIT_EXIT();
 8000e30:	f7ff ff46 	bl	8000cc0 <QF_crit_exit_>

    QS_TRAN_SEG_(QS_QEP_STATE_INIT, t, me->temp.fun);

    // drill down into the state hierarchy with initial transitions...
    QStateHandler path[QHSM_MAX_NEST_DEPTH_]; // tran. entry path array
    path[0] = me->temp.fun;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	2314      	movs	r3, #20
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	601a      	str	r2, [r3, #0]
    (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	4923      	ldr	r1, [pc, #140]	@ (8000ed0 <QHsm_init_+0x100>)
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	0010      	movs	r0, r2
 8000e48:	4798      	blx	r3

    int_fast8_t ip = 1; // tran. entry path index (also the loop bound)
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; (me->temp.fun != t) && (ip < QHSM_MAX_NEST_DEPTH_); ++ip) {
 8000e4e:	e00f      	b.n	8000e70 <QHsm_init_+0xa0>
        path[ip] = me->temp.fun;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6899      	ldr	r1, [r3, #8]
 8000e54:	2314      	movs	r3, #20
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	50d1      	str	r1, [r2, r3]
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	491b      	ldr	r1, [pc, #108]	@ (8000ed0 <QHsm_init_+0x100>)
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	0010      	movs	r0, r2
 8000e68:	4798      	blx	r3
    for (; (me->temp.fun != t) && (ip < QHSM_MAX_NEST_DEPTH_); ++ip) {
 8000e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d002      	beq.n	8000e80 <QHsm_init_+0xb0>
 8000e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e7c:	2b05      	cmp	r3, #5
 8000e7e:	dde7      	ble.n	8000e50 <QHsm_init_+0x80>
    }
    QF_CRIT_ENTRY();
 8000e80:	f7ff ff0e 	bl	8000ca0 <QF_crit_entry_>
    // must NOT be too many state nesting levels or "malformed" HSM
    Q_ASSERT_INCRIT(220, ip <= QHSM_MAX_NEST_DEPTH_);
 8000e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	dd04      	ble.n	8000e94 <QHsm_init_+0xc4>
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <QHsm_init_+0xfc>)
 8000e8c:	21dc      	movs	r1, #220	@ 0xdc
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff fd0c 	bl	80008ac <Q_onError>
    QF_CRIT_EXIT();
 8000e94:	f7ff ff14 	bl	8000cc0 <QF_crit_exit_>

    me->temp.fun = path[0];
 8000e98:	2114      	movs	r1, #20
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	609a      	str	r2, [r3, #8]
    QHsm_enter_target_(me, &path[0], ip - 1, qsId);
 8000ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea4:	1e5a      	subs	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	000c      	movs	r4, r1
 8000eaa:	1879      	adds	r1, r7, r1
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f000 f9e9 	bl	8001284 <QHsm_enter_target_>
    t = path[0];
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	633b      	str	r3, [r7, #48]	@ 0x30

    QS_TOP_INIT_(QS_QEP_INIT_TRAN, t);

    me->state.fun = t; // change the current active state
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ebc:	605a      	str	r2, [r3, #4]
#ifdef Q_UNSAFE
    Q_UNUSED_PAR(r);
#endif
}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b00f      	add	sp, #60	@ 0x3c
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	08001071 	.word	0x08001071
 8000ecc:	0800220c 	.word	0x0800220c
 8000ed0:	08002214 	.word	0x08002214

08000ed4 <QHsm_dispatch_>:
//! @private @memberof QHsm
void QHsm_dispatch_(
    QAsm * const me,
    QEvt const * const e,
    uint_fast8_t const qsId)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b08f      	sub	sp, #60	@ 0x3c
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    QStateHandler s = me->state.fun;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
    QStateHandler t = s;
 8000ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 8000eea:	f7ff fed9 	bl	8000ca0 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300,
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <QHsm_dispatch_+0x26>
 8000ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <QHsm_dispatch_+0x34>
 8000efa:	2396      	movs	r3, #150	@ 0x96
 8000efc:	005a      	lsls	r2, r3, #1
 8000efe:	4b42      	ldr	r3, [pc, #264]	@ (8001008 <QHsm_dispatch_+0x134>)
 8000f00:	0011      	movs	r1, r2
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff fcd2 	bl	80008ac <Q_onError>
        (e != (QEvt *)0)
        && (s != Q_STATE_CAST(0)));
    QF_CRIT_EXIT();
 8000f08:	f7ff feda 	bl	8000cc0 <QF_crit_exit_>

    QS_TRAN0_(QS_QEP_DISPATCH, s);

    QState r = Q_RET_SUPER;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // process the event hierarchically...
    me->temp.fun = s;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f14:	609a      	str	r2, [r3, #8]
    int_fast8_t ip = QHSM_MAX_NEST_DEPTH_;
 8000f16:	2306      	movs	r3, #6
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    // NOTE: ip is the fixed loop upper bound
    for (; ip > 0; --ip) {
 8000f1a:	e019      	b.n	8000f50 <QHsm_dispatch_+0x7c>
        s = me->temp.fun;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	637b      	str	r3, [r7, #52]	@ 0x34
        r = (*s)(me, e); // invoke state handler s
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f28:	0010      	movs	r0, r2
 8000f2a:	4798      	blx	r3
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (r == Q_RET_UNHANDLED) { // unhandled due to a guard?
 8000f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d106      	bne.n	8000f44 <QHsm_dispatch_+0x70>
            QS_TRAN_ACT_(QS_QEP_UNHANDLED, s);
            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG); // superstate of s
 8000f36:	4935      	ldr	r1, [pc, #212]	@ (800100c <QHsm_dispatch_+0x138>)
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f3c:	0010      	movs	r0, r2
 8000f3e:	4798      	blx	r3
 8000f40:	0003      	movs	r3, r0
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        if (r != Q_RET_SUPER) { // event NOT "bubbled up"
 8000f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d106      	bne.n	8000f58 <QHsm_dispatch_+0x84>
    for (; ip > 0; --ip) {
 8000f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	dce2      	bgt.n	8000f1c <QHsm_dispatch_+0x48>
 8000f56:	e000      	b.n	8000f5a <QHsm_dispatch_+0x86>
            break;
 8000f58:	46c0      	nop			@ (mov r8, r8)
        }
    }
    QF_CRIT_ENTRY();
 8000f5a:	f7ff fea1 	bl	8000ca0 <QF_crit_entry_>
    Q_ASSERT_INCRIT(310, ip > 0);
 8000f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	dc06      	bgt.n	8000f72 <QHsm_dispatch_+0x9e>
 8000f64:	239b      	movs	r3, #155	@ 0x9b
 8000f66:	005a      	lsls	r2, r3, #1
 8000f68:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <QHsm_dispatch_+0x134>)
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff fc9d 	bl	80008ac <Q_onError>
    QF_CRIT_EXIT();
 8000f72:	f7ff fea5 	bl	8000cc0 <QF_crit_exit_>

    if (r >= Q_RET_TRAN) { // tran. (regular or history) taken?
 8000f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f78:	2b06      	cmp	r3, #6
 8000f7a:	d93d      	bls.n	8000ff8 <QHsm_dispatch_+0x124>
            QS_TRAN_SEG_(QS_QEP_TRAN_HIST, s, me->temp.fun);
        }
#endif // Q_SPY

        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        path[0] = me->temp.fun; // tran. target
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	2110      	movs	r1, #16
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	601a      	str	r2, [r3, #0]
        path[1] = t; // current state
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f8a:	605a      	str	r2, [r3, #4]
        path[2] = s; // tran. source
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f90:	609a      	str	r2, [r3, #8]

        // exit current state to tran. source s...
        while (t != s) {
 8000f92:	e00f      	b.n	8000fb4 <QHsm_dispatch_+0xe0>
            // exit from t
            if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8000f94:	491e      	ldr	r1, [pc, #120]	@ (8001010 <QHsm_dispatch_+0x13c>)
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f9a:	0010      	movs	r0, r2
 8000f9c:	4798      	blx	r3
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d104      	bne.n	8000fae <QHsm_dispatch_+0xda>
                QS_STATE_ACT_(QS_QEP_STATE_EXIT, t);
                // find superstate of t
                (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8000fa4:	4919      	ldr	r1, [pc, #100]	@ (800100c <QHsm_dispatch_+0x138>)
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000faa:	0010      	movs	r0, r2
 8000fac:	4798      	blx	r3
            }
            t = me->temp.fun;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	633b      	str	r3, [r7, #48]	@ 0x30
        while (t != s) {
 8000fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d1eb      	bne.n	8000f94 <QHsm_dispatch_+0xc0>
        }

        // take the tran...
        ip = QHsm_tran_simple_(me, &path[0], qsId);
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	2410      	movs	r4, #16
 8000fc0:	1939      	adds	r1, r7, r4
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 f85d 	bl	8001084 <QHsm_tran_simple_>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (ip < -1) { // not a simple tran.?
 8000fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	da07      	bge.n	8000fe4 <QHsm_dispatch_+0x110>
            ip = QHsm_tran_complex_(me, &path[0], qsId);
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	1939      	adds	r1, r7, r4
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 f8ac 	bl	8001138 <QHsm_tran_complex_>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        QHsm_enter_target_(me, &path[0], ip, qsId);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fe8:	2410      	movs	r4, #16
 8000fea:	1939      	adds	r1, r7, r4
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f000 f949 	bl	8001284 <QHsm_enter_target_>
        t = path[0];
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	633b      	str	r3, [r7, #48]	@ 0x30
    else {
        QS_TRAN0_(QS_QEP_IGNORED, me->state.fun);
    }
#endif // Q_SPY

    me->state.fun = t; // change the current active state
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ffc:	605a      	str	r2, [r3, #4]
}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b00f      	add	sp, #60	@ 0x3c
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	0800220c 	.word	0x0800220c
 800100c:	08002214 	.word	0x08002214
 8001010:	0800221c 	.word	0x0800221c

08001014 <QHsm_isIn_>:
//............................................................................
//! @private @memberof QHsm
bool QHsm_isIn_(
    QAsm * const me,
    QStateHandler const state)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    bool inState = false; // assume that this HSM is not in 'state'
 800101e:	2317      	movs	r3, #23
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]

    // scan the state hierarchy bottom-up
    QStateHandler s = me->state.fun;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	613b      	str	r3, [r7, #16]
    QState r = Q_RET_SUPER;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
    while (r != Q_RET_IGNORED) {
 8001030:	e012      	b.n	8001058 <QHsm_isIn_+0x44>
        if (s == state) { // do the states match?
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d104      	bne.n	8001044 <QHsm_isIn_+0x30>
            inState = true;  // 'true' means that match found
 800103a:	2317      	movs	r3, #23
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
            break; // break out of the for-loop
 8001042:	e00c      	b.n	800105e <QHsm_isIn_+0x4a>
        }
        r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8001044:	4909      	ldr	r1, [pc, #36]	@ (800106c <QHsm_isIn_+0x58>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	0010      	movs	r0, r2
 800104c:	4798      	blx	r3
 800104e:	0003      	movs	r3, r0
 8001050:	60fb      	str	r3, [r7, #12]
        s = me->temp.fun;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	613b      	str	r3, [r7, #16]
    while (r != Q_RET_IGNORED) {
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d1e9      	bne.n	8001032 <QHsm_isIn_+0x1e>
    }
    return inState; // return the status
 800105e:	2317      	movs	r3, #23
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	781b      	ldrb	r3, [r3, #0]
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b006      	add	sp, #24
 800106a:	bd80      	pop	{r7, pc}
 800106c:	08002214 	.word	0x08002214

08001070 <QHsm_top>:

//............................................................................
//! @protected @memberof QHsm
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; // the top state ignores all events
 800107a:	2303      	movs	r3, #3
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}

08001084 <QHsm_tran_simple_>:
//! @private @memberof QHsm
static int_fast8_t QHsm_tran_simple_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    QStateHandler t = path[0];
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
    QStateHandler const s = path[2];
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	617b      	str	r3, [r7, #20]
    int_fast8_t ip = 0; // tran. entry path index
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
    QS_CRIT_STAT

    // (a) check source==target (tran. to self)...
    if (s == t) {
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d107      	bne.n	80010b8 <QHsm_tran_simple_+0x34>
        // exit source s
        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 80010a8:	4921      	ldr	r1, [pc, #132]	@ (8001130 <QHsm_tran_simple_+0xac>)
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	0010      	movs	r0, r2
 80010b0:	4798      	blx	r3
            QS_STATE_ACT_(QS_QEP_STATE_EXIT, s);
        }
        ip = 0; // enter the target
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	e036      	b.n	8001126 <QHsm_tran_simple_+0xa2>
    }
    else {
        // find superstate of target
        (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 80010b8:	491e      	ldr	r1, [pc, #120]	@ (8001134 <QHsm_tran_simple_+0xb0>)
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	0010      	movs	r0, r2
 80010c0:	4798      	blx	r3

        t = me->temp.fun;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]

        // (b) check source==target->super...
        if (s == t) {
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d102      	bne.n	80010d6 <QHsm_tran_simple_+0x52>
            ip = 0; // enter the target
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	e027      	b.n	8001126 <QHsm_tran_simple_+0xa2>
        }
        else {
            // find superstate of src
            (void)QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 80010d6:	4917      	ldr	r1, [pc, #92]	@ (8001134 <QHsm_tran_simple_+0xb0>)
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	0010      	movs	r0, r2
 80010de:	4798      	blx	r3

            // (c) check source->super==target->super...
            if (me->temp.fun == t) {
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d107      	bne.n	80010fa <QHsm_tran_simple_+0x76>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 80010ea:	4911      	ldr	r1, [pc, #68]	@ (8001130 <QHsm_tran_simple_+0xac>)
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	0010      	movs	r0, r2
 80010f2:	4798      	blx	r3
                    QS_STATE_ACT_(QS_QEP_STATE_EXIT, s);
                }
                ip = 0; // enter the target
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	e015      	b.n	8001126 <QHsm_tran_simple_+0xa2>
            }
            // (d) check source->super==target...
            else if (me->temp.fun == path[0]) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d108      	bne.n	8001118 <QHsm_tran_simple_+0x94>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8001106:	490a      	ldr	r1, [pc, #40]	@ (8001130 <QHsm_tran_simple_+0xac>)
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	0010      	movs	r0, r2
 800110e:	4798      	blx	r3
                    QS_STATE_ACT_(QS_QEP_STATE_EXIT, s);
                }
                ip = -1; // do not enter the target
 8001110:	2301      	movs	r3, #1
 8001112:	425b      	negs	r3, r3
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e006      	b.n	8001126 <QHsm_tran_simple_+0xa2>
            }
            else {
                path[1] = t; // save the superstate of target
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3304      	adds	r3, #4
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	601a      	str	r2, [r3, #0]
                ip = -2; // cause execution of complex tran.
 8001120:	2302      	movs	r3, #2
 8001122:	425b      	negs	r3, r3
 8001124:	61fb      	str	r3, [r7, #28]
            }
        }
    }
    return ip;
 8001126:	69fb      	ldr	r3, [r7, #28]
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b008      	add	sp, #32
 800112e:	bd80      	pop	{r7, pc}
 8001130:	0800221c 	.word	0x0800221c
 8001134:	08002214 	.word	0x08002214

08001138 <QHsm_tran_complex_>:
//! @private @memberof QHsm
static int_fast8_t QHsm_tran_complex_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qsId);
#endif

    // (e) check rest of source==target->super->super..
    // and store the entry path along the way
    int_fast8_t iq = 0; // indicate that LCA was found
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
    int_fast8_t ip = 1; // enter target and its superstate
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2]; // source state
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	617b      	str	r3, [r7, #20]
    QStateHandler t = me->temp.fun;  // source->super
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61fb      	str	r3, [r7, #28]
    QF_CRIT_STAT

    // find target->super->super...
    // note: ip is the fixed upper loop bound
    QState r = QHSM_RESERVED_EVT_(path[1], Q_EMPTY_SIG);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	3304      	adds	r3, #4
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4945      	ldr	r1, [pc, #276]	@ (8001274 <QHsm_tran_complex_+0x13c>)
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	0010      	movs	r0, r2
 8001164:	4798      	blx	r3
 8001166:	0003      	movs	r3, r0
 8001168:	61bb      	str	r3, [r7, #24]
    while ((r == Q_RET_SUPER) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 800116a:	e01c      	b.n	80011a6 <QHsm_tran_complex_+0x6e>
        ++ip;
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	3301      	adds	r3, #1
 8001170:	623b      	str	r3, [r7, #32]
        path[ip] = me->temp.fun; // store the entry path
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	6892      	ldr	r2, [r2, #8]
 800117e:	601a      	str	r2, [r3, #0]
        if (me->temp.fun == s) { // is it the source?
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	429a      	cmp	r2, r3
 8001188:	d105      	bne.n	8001196 <QHsm_tran_complex_+0x5e>
            iq = 1; // indicate that the LCA found
 800118a:	2301      	movs	r3, #1
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
            --ip;   // do not enter the source
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	3b01      	subs	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
            break;  // terminate the loop
 8001194:	e00d      	b.n	80011b2 <QHsm_tran_complex_+0x7a>
        }
        r = QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	4936      	ldr	r1, [pc, #216]	@ (8001274 <QHsm_tran_complex_+0x13c>)
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	0010      	movs	r0, r2
 80011a0:	4798      	blx	r3
 80011a2:	0003      	movs	r3, r0
 80011a4:	61bb      	str	r3, [r7, #24]
    while ((r == Q_RET_SUPER) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <QHsm_tran_complex_+0x7a>
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	dddc      	ble.n	800116c <QHsm_tran_complex_+0x34>
    }
    QF_CRIT_ENTRY();
 80011b2:	f7ff fd75 	bl	8000ca0 <QF_crit_entry_>
    Q_INVARIANT_INCRIT(711, ip < (QHSM_MAX_NEST_DEPTH_ - 1));
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	dd05      	ble.n	80011c8 <QHsm_tran_complex_+0x90>
 80011bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001278 <QHsm_tran_complex_+0x140>)
 80011be:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <QHsm_tran_complex_+0x144>)
 80011c0:	0011      	movs	r1, r2
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff fb72 	bl	80008ac <Q_onError>
    QF_CRIT_EXIT();
 80011c8:	f7ff fd7a 	bl	8000cc0 <QF_crit_exit_>

    // the LCA not found yet?
    if (iq == 0) {
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d14b      	bne.n	800126a <QHsm_tran_complex_+0x132>

        // exit source s
#ifndef Q_SPY
        (void)QHSM_RESERVED_EVT_(s, Q_EXIT_SIG);
 80011d2:	492b      	ldr	r1, [pc, #172]	@ (8001280 <QHsm_tran_complex_+0x148>)
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	0010      	movs	r0, r2
 80011da:	4798      	blx	r3
        }
#endif // def Q_SPY

        // (f) check the rest of
        // source->super == target->super->super...
        iq = ip;
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
        r = Q_RET_IGNORED; // indicate that the LCA NOT found
 80011e0:	2303      	movs	r3, #3
 80011e2:	61bb      	str	r3, [r7, #24]
        // note: iq is the fixed upper loop bound
        do {
            if (t == path[iq]) { // is this the LCA?
 80011e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	18d3      	adds	r3, r2, r3
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d105      	bne.n	8001200 <QHsm_tran_complex_+0xc8>
                r = Q_RET_HANDLED; // indicate the LCA found
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
                ip = iq - 1; // do not enter the LCA
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	3b01      	subs	r3, #1
 80011fc:	623b      	str	r3, [r7, #32]
                break; // terminate the loop
 80011fe:	e005      	b.n	800120c <QHsm_tran_complex_+0xd4>
            }
            --iq; // try lower superstate of target
 8001200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001202:	3b01      	subs	r3, #1
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
        } while (iq >= 0);
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	2b00      	cmp	r3, #0
 800120a:	daeb      	bge.n	80011e4 <QHsm_tran_complex_+0xac>

        if (r != Q_RET_HANDLED) { // the LCA still not found?
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d02b      	beq.n	800126a <QHsm_tran_complex_+0x132>
            // (g) check each source->super->...
            // for each target->super...
            r = Q_RET_SUPER; // keep looping
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
            while (r != Q_RET_HANDLED) {
 8001216:	e025      	b.n	8001264 <QHsm_tran_complex_+0x12c>
                // exit from t
                if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8001218:	4919      	ldr	r1, [pc, #100]	@ (8001280 <QHsm_tran_complex_+0x148>)
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	0010      	movs	r0, r2
 8001220:	4798      	blx	r3
 8001222:	0003      	movs	r3, r0
 8001224:	2b02      	cmp	r3, #2
 8001226:	d104      	bne.n	8001232 <QHsm_tran_complex_+0xfa>
                    QS_STATE_ACT_(QS_QEP_STATE_EXIT, t);
                    // find superstate of t
                    (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8001228:	4912      	ldr	r1, [pc, #72]	@ (8001274 <QHsm_tran_complex_+0x13c>)
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	0010      	movs	r0, r2
 8001230:	4798      	blx	r3
                }
                t = me->temp.fun; // set to super of t
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61fb      	str	r3, [r7, #28]
                iq = ip;
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
                do {
                    if (t == path[iq]) { // is this the LCA?
 800123c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	18d3      	adds	r3, r2, r3
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	429a      	cmp	r2, r3
 800124a:	d105      	bne.n	8001258 <QHsm_tran_complex_+0x120>
                        ip = iq - 1; // do not enter the LCA
 800124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124e:	3b01      	subs	r3, #1
 8001250:	623b      	str	r3, [r7, #32]
                        r = Q_RET_HANDLED; // break outer loop
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
                        break;  // terminate the inner loop
 8001256:	e005      	b.n	8001264 <QHsm_tran_complex_+0x12c>
                    }
                    --iq; // try lower superstate of target
 8001258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125a:	3b01      	subs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
                } while (iq >= 0);
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	2b00      	cmp	r3, #0
 8001262:	daeb      	bge.n	800123c <QHsm_tran_complex_+0x104>
            while (r != Q_RET_HANDLED) {
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d1d6      	bne.n	8001218 <QHsm_tran_complex_+0xe0>
            }
        }
    }
    return ip;
 800126a:	6a3b      	ldr	r3, [r7, #32]
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b00a      	add	sp, #40	@ 0x28
 8001272:	bd80      	pop	{r7, pc}
 8001274:	08002214 	.word	0x08002214
 8001278:	000002c7 	.word	0x000002c7
 800127c:	0800220c 	.word	0x0800220c
 8001280:	0800221c 	.word	0x0800221c

08001284 <QHsm_enter_target_>:
static void QHsm_enter_target_(
    QAsm * const me,
    QStateHandler * const path,
    int_fast8_t const depth,
    uint_fast8_t const qsId)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
    Q_UNUSED_PAR(qsId);
#endif

    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 8001292:	f7ff fd05 	bl	8000ca0 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(800, depth < QHSM_MAX_NEST_DEPTH_);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b05      	cmp	r3, #5
 800129a:	dd06      	ble.n	80012aa <QHsm_enter_target_+0x26>
 800129c:	23c8      	movs	r3, #200	@ 0xc8
 800129e:	009a      	lsls	r2, r3, #2
 80012a0:	4b3a      	ldr	r3, [pc, #232]	@ (800138c <QHsm_enter_target_+0x108>)
 80012a2:	0011      	movs	r1, r2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff fb01 	bl	80008ac <Q_onError>
    QF_CRIT_EXIT();
 80012aa:	f7ff fd09 	bl	8000cc0 <QF_crit_exit_>

    int_fast8_t ip = depth;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	617b      	str	r3, [r7, #20]
    // execute state entry actions in the desired order...
    // NOTE: ip is the fixed upper loop bound
    for (; ip >= 0; --ip) {
 80012b2:	e00b      	b.n	80012cc <QHsm_enter_target_+0x48>
        // enter path[ip]
        if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	18d3      	adds	r3, r2, r3
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4934      	ldr	r1, [pc, #208]	@ (8001390 <QHsm_enter_target_+0x10c>)
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	0010      	movs	r0, r2
 80012c4:	4798      	blx	r3
    for (; ip >= 0; --ip) {
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	daf0      	bge.n	80012b4 <QHsm_enter_target_+0x30>
            == Q_RET_HANDLED)
        {
            QS_STATE_ACT_(QS_QEP_STATE_ENTRY, path[ip]);
        }
    }
    QStateHandler t = path[0];
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	613b      	str	r3, [r7, #16]
    me->temp.fun = t; // update the next state
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	609a      	str	r2, [r3, #8]

    // drill into the target hierarchy...
    while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 80012de:	e047      	b.n	8001370 <QHsm_enter_target_+0xec>

        QS_TRAN_SEG_(QS_QEP_STATE_INIT, t, me->temp.fun);

        ip = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
        path[0] = me->temp.fun;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	601a      	str	r2, [r3, #0]

        // find superstate
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4928      	ldr	r1, [pc, #160]	@ (8001394 <QHsm_enter_target_+0x110>)
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	0010      	movs	r0, r2
 80012f6:	4798      	blx	r3

        // note: ip is the fixed upper loop bound
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 80012f8:	e00f      	b.n	800131a <QHsm_enter_target_+0x96>
            ++ip;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
            path[ip] = me->temp.fun;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	18d3      	adds	r3, r2, r3
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	6892      	ldr	r2, [r2, #8]
 800130c:	601a      	str	r2, [r3, #0]
            // find superstate
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	4920      	ldr	r1, [pc, #128]	@ (8001394 <QHsm_enter_target_+0x110>)
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	0010      	movs	r0, r2
 8001318:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d002      	beq.n	800132a <QHsm_enter_target_+0xa6>
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b04      	cmp	r3, #4
 8001328:	dde7      	ble.n	80012fa <QHsm_enter_target_+0x76>
        }
        QF_CRIT_ENTRY();
 800132a:	f7ff fcb9 	bl	8000ca0 <QF_crit_entry_>
        // too many state nesting levels or "malformed" HSM
        Q_INVARIANT_INCRIT(891, ip < QHSM_MAX_NEST_DEPTH_);
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b05      	cmp	r3, #5
 8001332:	dd05      	ble.n	8001340 <QHsm_enter_target_+0xbc>
 8001334:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <QHsm_enter_target_+0x114>)
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <QHsm_enter_target_+0x108>)
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff fab6 	bl	80008ac <Q_onError>
        QF_CRIT_EXIT();
 8001340:	f7ff fcbe 	bl	8000cc0 <QF_crit_exit_>

        me->temp.fun = path[0];
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	609a      	str	r2, [r3, #8]

        // retrace the entry path in reverse (correct) order...
        // note: ip is the fixed upper loop bound
        do {
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG) == Q_RET_HANDLED) {
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	18d3      	adds	r3, r2, r3
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	490e      	ldr	r1, [pc, #56]	@ (8001390 <QHsm_enter_target_+0x10c>)
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	0010      	movs	r0, r2
 800135c:	4798      	blx	r3
                QS_STATE_ACT_(QS_QEP_STATE_ENTRY, path[ip]);
            }
            --ip;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3b01      	subs	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
        } while (ip >= 0);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	daf0      	bge.n	800134c <QHsm_enter_target_+0xc8>

        t = path[0]; // current state becomes the new source
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	613b      	str	r3, [r7, #16]
    while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001370:	490a      	ldr	r1, [pc, #40]	@ (800139c <QHsm_enter_target_+0x118>)
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	0010      	movs	r0, r2
 8001378:	4798      	blx	r3
 800137a:	0003      	movs	r3, r0
 800137c:	2b07      	cmp	r3, #7
 800137e:	d0af      	beq.n	80012e0 <QHsm_enter_target_+0x5c>
    }
}
 8001380:	46c0      	nop			@ (mov r8, r8)
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b006      	add	sp, #24
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	0800220c 	.word	0x0800220c
 8001390:	08002218 	.word	0x08002218
 8001394:	08002214 	.word	0x08002214
 8001398:	0000037b 	.word	0x0000037b
 800139c:	08002220 	.word	0x08002220

080013a0 <QF_bzero_>:
//............................................................................
//! @static @private @memberof QF
void QF_bzero_(
    void * const start,
    uint_fast16_t const len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	e008      	b.n	80013c6 <QF_bzero_+0x26>
        *ptr = 0U;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
        ++ptr;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3301      	adds	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f3      	bne.n	80013b4 <QF_bzero_+0x14>
    }
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <QPSet_insert>:
}

//! @public @memberof QPSet
static inline void QPSet_insert(QPSet * const me,
    uint_fast8_t const n)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
#if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	2101      	movs	r1, #1
 80013ea:	4099      	lsls	r1, r3
 80013ec:	000b      	movs	r3, r1
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	601a      	str	r2, [r3, #0]
    }
    else {
        me->bits[1] = (me->bits[1] | ((QPSetBits)1U << (n - 33U)));
    }
#endif
}
 80013f4:	46c0      	nop			@ (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <QEvt_refCtr_inc_>:
#define QTE_FLAG_IS_LINKED      (1U << 7U)
#define QTE_FLAG_WAS_DISARMED   (1U << 6U)

//============================================================================
//! @private @memberof QEvt
static inline void QEvt_refCtr_inc_(QEvt const * const me) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    // NOTE: this function must be called inside a critical section
    uint8_t const rc = me->refCtr_ + 1U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	78db      	ldrb	r3, [r3, #3]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	210f      	movs	r1, #15
 800140c:	187b      	adds	r3, r7, r1
 800140e:	3201      	adds	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	187a      	adds	r2, r7, r1
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	70da      	strb	r2, [r3, #3]
}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b004      	add	sp, #16
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <QActive_post_>:
//! @private @memberof QActive
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
    }
#endif // (Q_UTEST != 0)
#endif // def Q_UTEST

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001432:	f7ff fc35 	bl	8000ca0 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(200, e != (QEvt *)0);
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d104      	bne.n	8001446 <QActive_post_+0x22>
 800143c:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <QActive_post_+0xc8>)
 800143e:	21c8      	movs	r1, #200	@ 0xc8
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff fa33 	bl	80008ac <Q_onError>

    QEQueueCtr const nFree = me->eQueue.nFree; // get volatile into temporary
 8001446:	2116      	movs	r1, #22
 8001448:	187b      	adds	r3, r7, r1
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	7fd2      	ldrb	r2, [r2, #31]
 800144e:	701a      	strb	r2, [r3, #0]

    // required margin available?
    bool status = false; // assume that event cannot be posted
 8001450:	2017      	movs	r0, #23
 8001452:	183b      	adds	r3, r7, r0
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
    if (margin == QF_NO_MARGIN) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a25      	ldr	r2, [pc, #148]	@ (80014f0 <QActive_post_+0xcc>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d10c      	bne.n	800147a <QActive_post_+0x56>
        if (nFree > 0U) { // free entries available in the queue?
 8001460:	187b      	adds	r3, r7, r1
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <QActive_post_+0x4c>
            status = true; // can post
 8001468:	183b      	adds	r3, r7, r0
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e00f      	b.n	8001490 <QActive_post_+0x6c>
        }
        else { // no free entries available
            // The queue overflows, but QF_NO_MARGIN indicates that
            // the "event delivery guarantee" is required.
            Q_ERROR_INCRIT(210); // must be able to post the event
 8001470:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <QActive_post_+0xc8>)
 8001472:	21d2      	movs	r1, #210	@ 0xd2
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fa19 	bl	80008ac <Q_onError>
        }
    }
    else if (nFree > (QEQueueCtr)margin) { // enough free entries?
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2216      	movs	r2, #22
 8001480:	18ba      	adds	r2, r7, r2
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d903      	bls.n	8001490 <QActive_post_+0x6c>
        status = true; // can post
 8001488:	2317      	movs	r3, #23
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
    else {
        // empty
    }

#if (QF_MAX_EPOOL > 0U)
    if (e->poolNum_ != 0U) { // is it a mutable event?
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00d      	beq.n	80014b4 <QActive_post_+0x90>
        Q_ASSERT_INCRIT(205, e->refCtr_ < (2U * QF_MAX_ACTIVE));
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	78db      	ldrb	r3, [r3, #3]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b3f      	cmp	r3, #63	@ 0x3f
 80014a0:	d904      	bls.n	80014ac <QActive_post_+0x88>
 80014a2:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <QActive_post_+0xc8>)
 80014a4:	21cd      	movs	r1, #205	@ 0xcd
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7ff fa00 	bl	80008ac <Q_onError>
        QEvt_refCtr_inc_(e); // increment the reference counter
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff ffa4 	bl	80013fc <QEvt_refCtr_inc_>
    }
#endif // (QF_MAX_EPOOL > 0U)

    if (status) { // can post the event?
 80014b4:	2317      	movs	r3, #23
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <QActive_post_+0xac>
        QActive_postFIFO_(me, e, sender);
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 f885 	bl	80015d4 <QActive_postFIFO_>
        QF_CRIT_EXIT();
 80014ca:	f7ff fbf9 	bl	8000cc0 <QF_crit_exit_>
 80014ce:	e005      	b.n	80014dc <QActive_post_+0xb8>
            QS_onTestPost(sender, me, e, status); // QUTEst callback
            QF_CRIT_ENTRY();
        }
#endif // def Q_USTEST

        QF_CRIT_EXIT();
 80014d0:	f7ff fbf6 	bl	8000cc0 <QF_crit_exit_>

#if (QF_MAX_EPOOL > 0U)
        QF_gc(e); // recycle the event to avoid a leak
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 f8f2 	bl	80016c0 <QF_gc>
#endif // (QF_MAX_EPOOL > 0U)
    }

    return status;
 80014dc:	2317      	movs	r3, #23
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	781b      	ldrb	r3, [r3, #0]
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b006      	add	sp, #24
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	08002230 	.word	0x08002230
 80014f0:	0000ffff 	.word	0x0000ffff

080014f4 <QActive_get_>:
    QF_CRIT_EXIT();
}

//............................................................................
//! @private @memberof QActive
QEvt const * QActive_get_(QActive * const me) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80014fc:	f7ff fbd0 	bl	8000ca0 <QF_crit_entry_>
    // wait for event to arrive directly (depends on QP port)
    // NOTE: might use assertion-IDs 400-409
    QACTIVE_EQUEUE_WAIT_(me);

    // always remove event from the front
    QEvt const * const e = me->eQueue.frontEvt;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	613b      	str	r3, [r7, #16]
    QEQueueCtr tmp = me->eQueue.nFree; // get volatile into temporary
 8001506:	2317      	movs	r3, #23
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	7fd2      	ldrb	r2, [r2, #31]
 800150e:	701a      	strb	r2, [r3, #0]

    Q_REQUIRE_INCRIT(410, e != (QEvt *)0); // queue must NOT be empty
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <QActive_get_+0x30>
 8001516:	23cd      	movs	r3, #205	@ 0xcd
 8001518:	005a      	lsls	r2, r3, #1
 800151a:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <QActive_get_+0xdc>)
 800151c:	0011      	movs	r1, r2
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff f9c4 	bl	80008ac <Q_onError>

    ++tmp; // one more free event in the queue
 8001524:	2117      	movs	r1, #23
 8001526:	187b      	adds	r3, r7, r1
 8001528:	187a      	adds	r2, r7, r1
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	3201      	adds	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]

    me->eQueue.nFree = tmp; // update the # free
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	187a      	adds	r2, r7, r1
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	77da      	strb	r2, [r3, #31]

    if (tmp <= me->eQueue.end) { // any events in the ring buffer?
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7f1b      	ldrb	r3, [r3, #28]
 800153c:	187a      	adds	r2, r7, r1
 800153e:	7812      	ldrb	r2, [r2, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d82c      	bhi.n	800159e <QActive_get_+0xaa>
            QS_2U8_PRE(e->poolNum_, e->refCtr_);
            QS_EQC_PRE(tmp);     // # free entries
        QS_END_PRE()

        // remove event from the tail
        tmp = me->eQueue.tail; // get volatile into temporary
 8001544:	187b      	adds	r3, r7, r1
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	7f92      	ldrb	r2, [r2, #30]
 800154a:	701a      	strb	r2, [r3, #0]
        QEvt const * const frontEvt = me->eQueue.ring[tmp];
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699a      	ldr	r2, [r3, #24]
 8001550:	187b      	adds	r3, r7, r1
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	18d3      	adds	r3, r2, r3
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]

        Q_ASSERT_INCRIT(430, frontEvt != (QEvt *)0);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <QActive_get_+0x7c>
 8001562:	23d7      	movs	r3, #215	@ 0xd7
 8001564:	005a      	lsls	r2, r3, #1
 8001566:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <QActive_get_+0xdc>)
 8001568:	0011      	movs	r1, r2
 800156a:	0018      	movs	r0, r3
 800156c:	f7ff f99e 	bl	80008ac <Q_onError>
        me->eQueue.frontEvt = frontEvt; // update the original
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	615a      	str	r2, [r3, #20]

        if (tmp == 0U) { // need to wrap the tail?
 8001576:	2217      	movs	r2, #23
 8001578:	18bb      	adds	r3, r7, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <QActive_get_+0x94>
            tmp = me->eQueue.end;
 8001580:	18bb      	adds	r3, r7, r2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	7f12      	ldrb	r2, [r2, #28]
 8001586:	701a      	strb	r2, [r3, #0]
        }
        --tmp; // advance the tail (counter-clockwise)
 8001588:	2117      	movs	r1, #23
 800158a:	187b      	adds	r3, r7, r1
 800158c:	187a      	adds	r2, r7, r1
 800158e:	7812      	ldrb	r2, [r2, #0]
 8001590:	3a01      	subs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]

        me->eQueue.tail = tmp; // update the original
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	187a      	adds	r2, r7, r1
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	779a      	strb	r2, [r3, #30]
 800159c:	e011      	b.n	80015c2 <QActive_get_+0xce>
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; // queue becomes empty
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]

        // all entries in the queue must be free (+1 for fronEvt)
        Q_ASSERT_INCRIT(440, tmp == (me->eQueue.end + 1U));
 80015a4:	2317      	movs	r3, #23
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	781a      	ldrb	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7f1b      	ldrb	r3, [r3, #28]
 80015ae:	3301      	adds	r3, #1
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d006      	beq.n	80015c2 <QActive_get_+0xce>
 80015b4:	23dc      	movs	r3, #220	@ 0xdc
 80015b6:	005a      	lsls	r2, r3, #1
 80015b8:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <QActive_get_+0xdc>)
 80015ba:	0011      	movs	r1, r2
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff f975 	bl	80008ac <Q_onError>
            QS_OBJ_PRE(me);      // this active object
            QS_2U8_PRE(e->poolNum_, e->refCtr_);
        QS_END_PRE()
    }

    QF_CRIT_EXIT();
 80015c2:	f7ff fb7d 	bl	8000cc0 <QF_crit_exit_>

    return e;
 80015c6:	693b      	ldr	r3, [r7, #16]
}
 80015c8:	0018      	movs	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b006      	add	sp, #24
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	08002230 	.word	0x08002230

080015d4 <QActive_postFIFO_>:
//............................................................................
//! @private @memberof QActive
static void QActive_postFIFO_(QActive * const me,
    QEvt const * const e,
    void const * const sender)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
    // NOTE: this helper function is called *inside* critical section
#ifndef Q_SPY
    Q_UNUSED_PAR(sender);
#endif

    QEQueueCtr tmp = me->eQueue.nFree; // get volatile into temporary
 80015e0:	2117      	movs	r1, #23
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	7fd2      	ldrb	r2, [r2, #31]
 80015e8:	701a      	strb	r2, [r3, #0]
    --tmp; // one free entry just used up
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	187a      	adds	r2, r7, r1
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	3a01      	subs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]

    me->eQueue.nFree = tmp; // update the original
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	187a      	adds	r2, r7, r1
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	77da      	strb	r2, [r3, #31]
    if (me->eQueue.nMin > tmp) {
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2220      	movs	r2, #32
 8001600:	5c9b      	ldrb	r3, [r3, r2]
 8001602:	187a      	adds	r2, r7, r1
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d204      	bcs.n	8001614 <QActive_postFIFO_+0x40>
        me->eQueue.nMin = tmp; // update minimum so far
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	187a      	adds	r2, r7, r1
 800160e:	2120      	movs	r1, #32
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	545a      	strb	r2, [r3, r1]
        QS_onTestPost(sender, me, e, true); // QUTEst callback
        QF_CRIT_ENTRY();
    }
#endif // def Q_UTEST

    if (me->eQueue.frontEvt == (QEvt *)0) { // is the queue empty?
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d117      	bne.n	800164c <QActive_postFIFO_+0x78>
        me->eQueue.frontEvt = e; // deliver event directly
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	615a      	str	r2, [r3, #20]
        }
        else {
            QACTIVE_EQUEUE_SIGNAL_(me); // signal the Active Object
        }
#else
        QACTIVE_EQUEUE_SIGNAL_(me); // signal the Active Object
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	7b1b      	ldrb	r3, [r3, #12]
 8001626:	001a      	movs	r2, r3
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <QActive_postFIFO_+0xc0>)
 800162a:	0011      	movs	r1, r2
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fed2 	bl	80013d6 <QPSet_insert>
#define QK_ISR_CONTEXT_()     (QK_get_IPSR() != 0U)

__attribute__((always_inline))
static inline uint32_t QK_get_IPSR(void) {
    uint32_t regIPSR;
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 8001632:	f3ef 8305 	mrs	r3, IPSR
 8001636:	613b      	str	r3, [r7, #16]
    return regIPSR;
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d125      	bne.n	800168a <QActive_postFIFO_+0xb6>
 800163e:	f000 fbb9 	bl	8001db4 <QK_sched_>
 8001642:	1e03      	subs	r3, r0, #0
 8001644:	d021      	beq.n	800168a <QActive_postFIFO_+0xb6>
 8001646:	f000 fc17 	bl	8001e78 <QK_activate_>
        }
        --tmp; // advance the head (counter-clockwise)

        me->eQueue.head = tmp; // update the original
    }
}
 800164a:	e01e      	b.n	800168a <QActive_postFIFO_+0xb6>
        tmp = me->eQueue.head; // get volatile into temporary
 800164c:	2117      	movs	r1, #23
 800164e:	187b      	adds	r3, r7, r1
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	7f52      	ldrb	r2, [r2, #29]
 8001654:	701a      	strb	r2, [r3, #0]
        me->eQueue.ring[tmp] = e; // insert e into buffer
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	187b      	adds	r3, r7, r1
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	601a      	str	r2, [r3, #0]
        if (tmp == 0U) { // need to wrap the head?
 8001666:	187b      	adds	r3, r7, r1
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <QActive_postFIFO_+0xa2>
            tmp = me->eQueue.end;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	7f12      	ldrb	r2, [r2, #28]
 8001674:	701a      	strb	r2, [r3, #0]
        --tmp; // advance the head (counter-clockwise)
 8001676:	2117      	movs	r1, #23
 8001678:	187b      	adds	r3, r7, r1
 800167a:	187a      	adds	r2, r7, r1
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	3a01      	subs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
        me->eQueue.head = tmp; // update the original
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	187a      	adds	r2, r7, r1
 8001686:	7812      	ldrb	r2, [r2, #0]
 8001688:	775a      	strb	r2, [r3, #29]
}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b006      	add	sp, #24
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	20000970 	.word	0x20000970

08001698 <QEvt_refCtr_dec_>:

//! @private @memberof QEvt
static inline void QEvt_refCtr_dec_(QEvt const * const me) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    // NOTE: this function must be called inside a critical section
    uint8_t const rc = me->refCtr_ - 1U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	78db      	ldrb	r3, [r3, #3]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	210f      	movs	r1, #15
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	3a01      	subs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
    ((QEvt *)me)->refCtr_ = rc; // cast away 'const'
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	187a      	adds	r2, r7, r1
 80016b2:	7812      	ldrb	r2, [r2, #0]
 80016b4:	70da      	strb	r2, [r3, #3]
}
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b004      	add	sp, #16
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <QF_gc>:
    return e;
}

//............................................................................
//! @static @public @memberof QF
void QF_gc(QEvt const * const e) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80016c8:	f7ff faea 	bl	8000ca0 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(500, e != (QEvt *)0);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d106      	bne.n	80016e0 <QF_gc+0x20>
 80016d2:	23fa      	movs	r3, #250	@ 0xfa
 80016d4:	005a      	lsls	r2, r3, #1
 80016d6:	4b28      	ldr	r3, [pc, #160]	@ (8001778 <QF_gc+0xb8>)
 80016d8:	0011      	movs	r1, r2
 80016da:	0018      	movs	r0, r3
 80016dc:	f7ff f8e6 	bl	80008ac <Q_onError>

    uint8_t const poolNum = e->poolNum_;
 80016e0:	210f      	movs	r1, #15
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	7892      	ldrb	r2, [r2, #2]
 80016e8:	701a      	strb	r2, [r3, #0]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d03c      	beq.n	800176c <QF_gc+0xac>

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	78db      	ldrb	r3, [r3, #3]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d913      	bls.n	8001724 <QF_gc+0x64>
                QS_TIME_PRE();       // timestamp
                QS_SIG_PRE(e->sig);  // the signal of the event
                QS_2U8_PRE(poolNum, e->refCtr_);
            QS_END_PRE()

            Q_ASSERT_INCRIT(505, e->refCtr_ > 0U);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	78db      	ldrb	r3, [r3, #3]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d107      	bne.n	8001716 <QF_gc+0x56>
 8001706:	23fa      	movs	r3, #250	@ 0xfa
 8001708:	33ff      	adds	r3, #255	@ 0xff
 800170a:	001a      	movs	r2, r3
 800170c:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <QF_gc+0xb8>)
 800170e:	0011      	movs	r1, r2
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff f8cb 	bl	80008ac <Q_onError>
            QEvt_refCtr_dec_(e); // decrement the ref counter
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff ffbd 	bl	8001698 <QEvt_refCtr_dec_>

            QF_CRIT_EXIT();
 800171e:	f7ff facf 	bl	8000cc0 <QF_crit_exit_>
        }
    }
    else {
        QF_CRIT_EXIT();
    }
}
 8001722:	e025      	b.n	8001770 <QF_gc+0xb0>
            Q_ASSERT_INCRIT(510, (poolNum <= QF_priv_.maxPool_)
 8001724:	210f      	movs	r1, #15
 8001726:	187b      	adds	r3, r7, r1
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <QF_gc+0xbc>)
 800172c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800172e:	429a      	cmp	r2, r3
 8001730:	d803      	bhi.n	800173a <QF_gc+0x7a>
 8001732:	187b      	adds	r3, r7, r1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d906      	bls.n	8001748 <QF_gc+0x88>
 800173a:	23ff      	movs	r3, #255	@ 0xff
 800173c:	005a      	lsls	r2, r3, #1
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <QF_gc+0xb8>)
 8001740:	0011      	movs	r1, r2
 8001742:	0018      	movs	r0, r3
 8001744:	f7ff f8b2 	bl	80008ac <Q_onError>
            QF_CRIT_EXIT();
 8001748:	f7ff faba 	bl	8000cc0 <QF_crit_exit_>
            QF_EPOOL_PUT_(QF_priv_.ePool_[poolNum - 1U], (QEvt *)e,
 800174c:	230f      	movs	r3, #15
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	1e5a      	subs	r2, r3, #1
 8001754:	0013      	movs	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	189b      	adds	r3, r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4a07      	ldr	r2, [pc, #28]	@ (800177c <QF_gc+0xbc>)
 800175e:	189b      	adds	r3, r3, r2
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	0018      	movs	r0, r3
 8001766:	f000 f80b 	bl	8001780 <QMPool_put>
}
 800176a:	e001      	b.n	8001770 <QF_gc+0xb0>
        QF_CRIT_EXIT();
 800176c:	f7ff faa8 	bl	8000cc0 <QF_crit_exit_>
}
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b004      	add	sp, #16
 8001776:	bd80      	pop	{r7, pc}
 8001778:	08002238 	.word	0x08002238
 800177c:	20000894 	.word	0x20000894

08001780 <QMPool_put>:
//............................................................................
//! @public @memberof QMPool
void QMPool_put(QMPool * const me,
    void * const block,
    uint_fast8_t const qsId)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
#ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
#endif

    void * * const pfb = (void * *)block; // pointer to free block
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	61fb      	str	r3, [r7, #28]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001790:	f7ff fa86 	bl	8000ca0 <QF_crit_entry_>

    // get volatile into temporaries
    void * * const freeHead = me->freeHead;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	61bb      	str	r3, [r7, #24]
    QMPoolCtr nFree = me->nFree;
 800179a:	2116      	movs	r1, #22
 800179c:	187b      	adds	r3, r7, r1
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	8a12      	ldrh	r2, [r2, #16]
 80017a2:	801a      	strh	r2, [r3, #0]

    Q_REQUIRE_INCRIT(400, nFree < me->nTot);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	89db      	ldrh	r3, [r3, #14]
 80017a8:	187a      	adds	r2, r7, r1
 80017aa:	8812      	ldrh	r2, [r2, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d306      	bcc.n	80017be <QMPool_put+0x3e>
 80017b0:	23c8      	movs	r3, #200	@ 0xc8
 80017b2:	005a      	lsls	r2, r3, #1
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <QMPool_put+0x8c>)
 80017b6:	0011      	movs	r1, r2
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff f877 	bl	80008ac <Q_onError>
    Q_REQUIRE_INCRIT(410, (me->start <= pfb) && (pfb <= me->end));
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d304      	bcc.n	80017d2 <QMPool_put+0x52>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d906      	bls.n	80017e0 <QMPool_put+0x60>
 80017d2:	23cd      	movs	r3, #205	@ 0xcd
 80017d4:	005a      	lsls	r2, r3, #1
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <QMPool_put+0x8c>)
 80017d8:	0011      	movs	r1, r2
 80017da:	0018      	movs	r0, r3
 80017dc:	f7ff f866 	bl	80008ac <Q_onError>

    ++nFree; // one more free block in this pool
 80017e0:	2116      	movs	r1, #22
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	187a      	adds	r2, r7, r1
 80017e6:	8812      	ldrh	r2, [r2, #0]
 80017e8:	3201      	adds	r2, #1
 80017ea:	801a      	strh	r2, [r3, #0]

    me->freeHead = pfb; // set as new head of the free list
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	609a      	str	r2, [r3, #8]
    me->nFree     = nFree;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	187a      	adds	r2, r7, r1
 80017f6:	8812      	ldrh	r2, [r2, #0]
 80017f8:	821a      	strh	r2, [r3, #16]
    pfb[0]        = freeHead; // link into the list
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	601a      	str	r2, [r3, #0]
        QS_TIME_PRE();         // timestamp
        QS_OBJ_PRE(me);        // this memory pool
        QS_MPC_PRE(nFree);     // the # free blocks in the pool
    QS_END_PRE()

    QF_CRIT_EXIT();
 8001800:	f7ff fa5e 	bl	8000cc0 <QF_crit_exit_>
}
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b008      	add	sp, #32
 800180a:	bd80      	pop	{r7, pc}
 800180c:	08002240 	.word	0x08002240

08001810 <QActive_ctor>:

//............................................................................
//! @protected @memberof QActive
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
    // clear the whole QActive object, so that the framework can start
    // correctly even if the startup code fails to clear the uninitialized
    // data (as is required by the C Standard).
    QF_bzero_(me, sizeof(*me));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2124      	movs	r1, #36	@ 0x24
 800181e:	0018      	movs	r0, r3
 8001820:	f7ff fdbe 	bl	80013a0 <QF_bzero_>

    // NOTE: QActive inherits the abstract QAsm class, but it calls the
    // constructor of the QHsm subclass. This is because QActive inherits
    // the behavior from the QHsm subclass.
    QHsm_ctor((QHsm *)(me), initial);
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0011      	movs	r1, r2
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff faba 	bl	8000da4 <QHsm_ctor>
        &QHsm_isIn_
#ifdef Q_SPY
        ,&QHsm_getStateHandler_
#endif
    };
    me->super.vptr = &vtable; // hook vptr to QActive vtable
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a03      	ldr	r2, [pc, #12]	@ (8001840 <QActive_ctor+0x30>)
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	08002250 	.word	0x08002250

08001844 <QActive_register_>:

//............................................................................
//! @private @memberof QActive
void QActive_register_(QActive * const me) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800184c:	f7ff fa28 	bl	8000ca0 <QF_crit_entry_>

    if (me->pthre == 0U) { // preemption-threshold not defined?
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7b5b      	ldrb	r3, [r3, #13]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <QActive_register_+0x1c>
        me->pthre = me->prio; // apply the default
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7b1a      	ldrb	r2, [r3, #12]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	735a      	strb	r2, [r3, #13]
    }

#ifndef Q_UNSAFE
    Q_REQUIRE_INCRIT(100,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7b1b      	ldrb	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d011      	beq.n	800188c <QActive_register_+0x48>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7b1b      	ldrb	r3, [r3, #12]
 800186c:	2b20      	cmp	r3, #32
 800186e:	d80d      	bhi.n	800188c <QActive_register_+0x48>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7b1b      	ldrb	r3, [r3, #12]
 8001874:	001a      	movs	r2, r3
 8001876:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <QActive_register_+0x110>)
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	58d3      	ldr	r3, [r2, r3]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <QActive_register_+0x48>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7b1a      	ldrb	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7b5b      	ldrb	r3, [r3, #13]
 8001888:	429a      	cmp	r2, r3
 800188a:	d904      	bls.n	8001896 <QActive_register_+0x52>
 800188c:	4b32      	ldr	r3, [pc, #200]	@ (8001958 <QActive_register_+0x114>)
 800188e:	2164      	movs	r1, #100	@ 0x64
 8001890:	0018      	movs	r0, r3
 8001892:	f7ff f80b 	bl	80008ac <Q_onError>
        (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
        && (QActive_registry_[me->prio] == (QActive *)0)
        && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 8001896:	2317      	movs	r3, #23
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	7b52      	ldrb	r2, [r2, #13]
 800189e:	701a      	strb	r2, [r3, #0]
    uint8_t next_thre = me->pthre;
 80018a0:	2316      	movs	r3, #22
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	7b52      	ldrb	r2, [r2, #13]
 80018a8:	701a      	strb	r2, [r3, #0]

    for (uint_fast8_t p = (uint_fast8_t)me->prio - 1U;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7b1b      	ldrb	r3, [r3, #12]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	e011      	b.n	80018d8 <QActive_register_+0x94>
         p > 0U;
         --p)
    {
        if (QActive_registry_[p] != (QActive *)0) {
 80018b4:	4b27      	ldr	r3, [pc, #156]	@ (8001954 <QActive_register_+0x110>)
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	58d3      	ldr	r3, [r2, r3]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <QActive_register_+0x8e>
            prev_thre = QActive_registry_[p]->pthre;
 80018c0:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <QActive_register_+0x110>)
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	58d2      	ldr	r2, [r2, r3]
 80018c8:	2317      	movs	r3, #23
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	7b52      	ldrb	r2, [r2, #13]
 80018ce:	701a      	strb	r2, [r3, #0]
            break;
 80018d0:	e005      	b.n	80018de <QActive_register_+0x9a>
         --p)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
         p > 0U;
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1ea      	bne.n	80018b4 <QActive_register_+0x70>
        }
    }
    for (uint_fast8_t p = (uint_fast8_t)me->prio + 1U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7b1b      	ldrb	r3, [r3, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e011      	b.n	800190c <QActive_register_+0xc8>
         p <= QF_MAX_ACTIVE;
         ++p)
    {
        if (QActive_registry_[p] != (QActive *)0) {
 80018e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <QActive_register_+0x110>)
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	58d3      	ldr	r3, [r2, r3]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <QActive_register_+0xc2>
            next_thre = QActive_registry_[p]->pthre;
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <QActive_register_+0x110>)
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	58d2      	ldr	r2, [r2, r3]
 80018fc:	2316      	movs	r3, #22
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	7b52      	ldrb	r2, [r2, #13]
 8001902:	701a      	strb	r2, [r3, #0]
            break;
 8001904:	e005      	b.n	8001912 <QActive_register_+0xce>
         ++p)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3301      	adds	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
         p <= QF_MAX_ACTIVE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b20      	cmp	r3, #32
 8001910:	d9ea      	bls.n	80018e8 <QActive_register_+0xa4>
        }
    }

    Q_ASSERT_INCRIT(190,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7b5b      	ldrb	r3, [r3, #13]
 8001916:	2217      	movs	r2, #23
 8001918:	18ba      	adds	r2, r7, r2
 800191a:	7812      	ldrb	r2, [r2, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d806      	bhi.n	800192e <QActive_register_+0xea>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7b5b      	ldrb	r3, [r3, #13]
 8001924:	2216      	movs	r2, #22
 8001926:	18ba      	adds	r2, r7, r2
 8001928:	7812      	ldrb	r2, [r2, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d204      	bcs.n	8001938 <QActive_register_+0xf4>
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <QActive_register_+0x114>)
 8001930:	21be      	movs	r1, #190	@ 0xbe
 8001932:	0018      	movs	r0, r3
 8001934:	f7fe ffba 	bl	80008ac <Q_onError>
        (prev_thre <= me->pthre)
        && (me->pthre <= next_thre));
#endif // Q_UNSAFE

    // register the AO at the QF-prio.
    QActive_registry_[me->prio] = me;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7b1b      	ldrb	r3, [r3, #12]
 800193c:	001a      	movs	r2, r3
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <QActive_register_+0x110>)
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	50d1      	str	r1, [r2, r3]

    QF_CRIT_EXIT();
 8001946:	f7ff f9bb 	bl	8000cc0 <QF_crit_exit_>
}
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b006      	add	sp, #24
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	200008d4 	.word	0x200008d4
 8001958:	08002248 	.word	0x08002248

0800195c <QEQueue_init>:
//............................................................................
//! @public @memberof QEQueue
void QEQueue_init(QEQueue * const me,
    struct QEvt const  * * const qSto,
    uint_fast16_t const qLen)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001968:	f7ff f99a 	bl	8000ca0 <QF_crit_entry_>

#if (QF_EQUEUE_CTR_SIZE == 1U)
    Q_REQUIRE_INCRIT(100, qLen < 0xFFU);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001970:	d904      	bls.n	800197c <QEQueue_init+0x20>
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <QEQueue_init+0x68>)
 8001974:	2164      	movs	r1, #100	@ 0x64
 8001976:	0018      	movs	r0, r3
 8001978:	f7fe ff98 	bl	80008ac <Q_onError>
#endif

    me->frontEvt = (QEvt *)0; // no events in the queue
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      // the beginning of the ring buffer
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	721a      	strb	r2, [r3, #8]
    if (qLen > 0U) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <QEQueue_init+0x46>
        me->head = 0U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); // +1 for frontEvt
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3301      	adds	r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	7adb      	ldrb	r3, [r3, #11]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	731a      	strb	r2, [r3, #12]

    QF_CRIT_EXIT();
 80019b8:	f7ff f982 	bl	8000cc0 <QF_crit_exit_>
}
 80019bc:	46c0      	nop			@ (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b004      	add	sp, #16
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	0800225c 	.word	0x0800225c

080019c8 <QEvt_ctor>:
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
    me->sig      = (QSignal)sig;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	801a      	strh	r2, [r3, #0]
    me->poolNum_ = 0x00U;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	709a      	strb	r2, [r3, #2]
    me->refCtr_  = 0xE0U;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	22e0      	movs	r2, #224	@ 0xe0
 80019e4:	70da      	strb	r2, [r3, #3]
}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <QTimeEvt_ctorX>:
//! @public @memberof QTimeEvt
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80019fe:	f7ff f94f 	bl	8000ca0 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (sig != 0)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <QTimeEvt_ctorX+0x1e>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <QTimeEvt_ctorX+0x2c>
 8001a0e:	2396      	movs	r3, #150	@ 0x96
 8001a10:	005a      	lsls	r2, r3, #1
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <QTimeEvt_ctorX+0x70>)
 8001a14:	0011      	movs	r1, r2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7fe ff48 	bl	80008ac <Q_onError>
        && (tickRate < QF_MAX_TICK_RATE));
    QF_CRIT_EXIT();
 8001a1c:	f7ff f950 	bl	8000cc0 <QF_crit_exit_>

    QEvt_ctor(&me->super, sig);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	0011      	movs	r1, r2
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff ffce 	bl	80019c8 <QEvt_ctor>

    me->next     = (QTimeEvt *)0;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
    me->act      = act;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	609a      	str	r2, [r3, #8]
    me->ctr      = 0U;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
    me->interval = 0U;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
    me->tickRate = (uint8_t)tickRate;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	751a      	strb	r2, [r3, #20]
    me->flags    = 0U;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	755a      	strb	r2, [r3, #21]

    me->super.refCtr_ = 0U; // adjust from the QEvt_ctor((sig) ctor
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	70da      	strb	r2, [r3, #3]
}
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b004      	add	sp, #16
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	08002264 	.word	0x08002264

08001a64 <QTimeEvt_armX>:
//............................................................................
//! @public @memberof QTimeEvt
void QTimeEvt_armX(QTimeEvt * const me,
    uint32_t const nTicks,
    uint32_t const interval)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001a70:	f7ff f916 	bl	8000ca0 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(400, (nTicks < 0xFFU) && (interval < 0xFFU));
#elif (QF_TIMEEVT_CTR_SIZE == 2U)
    Q_REQUIRE_INCRIT(400, (nTicks < 0xFFFFU) && (interval < 0xFFFFU));
#endif

    QTimeEvtCtr const ctr = me->ctr;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	617b      	str	r3, [r7, #20]
    uint8_t const tickRate = me->tickRate;
 8001a7a:	2113      	movs	r1, #19
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	7d12      	ldrb	r2, [r2, #20]
 8001a82:	701a      	strb	r2, [r3, #0]
#ifdef Q_SPY
    uint_fast8_t const qsId = ((QActive *)(me->act))->prio;
#endif // def Q_SPY

    Q_REQUIRE_INCRIT(410,
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <QTimeEvt_armX+0x3c>
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d107      	bne.n	8001aa0 <QTimeEvt_armX+0x3c>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <QTimeEvt_armX+0x3c>
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <QTimeEvt_armX+0x4a>
 8001aa0:	23cd      	movs	r3, #205	@ 0xcd
 8001aa2:	005a      	lsls	r2, r3, #1
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <QTimeEvt_armX+0xac>)
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7fe feff 	bl	80008ac <Q_onError>

#ifdef Q_UNSAFE
    Q_UNUSED_PAR(ctr);
#endif // ndef Q_UNSAFE

    me->ctr = (QTimeEvtCtr)nTicks;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
    me->interval = (QTimeEvtCtr)interval;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]

    // is the time event unlinked?
    // NOTE: For the duration of a single clock tick of the specified tick
    // rate a time event can be disarmed and yet still linked into the list
    // because un-linking is performed exclusively in QTimeEvt_tick_().
    if ((me->flags & QTE_FLAG_IS_LINKED) == 0U) {
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	7d5b      	ldrb	r3, [r3, #21]
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db1f      	blt.n	8001b04 <QTimeEvt_armX+0xa0>
        me->flags |= QTE_FLAG_IS_LINKED; // mark as linked
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	7d5b      	ldrb	r3, [r3, #21]
 8001ac8:	2280      	movs	r2, #128	@ 0x80
 8001aca:	4252      	negs	r2, r2
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	755a      	strb	r2, [r3, #21]
        // "freshly armed" list based on timeEvtHead_[tickRate].act.
        // Only later, inside QTimeEvt_tick_(), the "freshly armed"
        // list is appended to the main list of armed time events based on
        // timeEvtHead_[tickRate].next. Again, this is to keep any
        // changes to the main list exclusively inside QTimeEvt_tick_().
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8001ad4:	2013      	movs	r0, #19
 8001ad6:	183b      	adds	r3, r7, r0
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	490e      	ldr	r1, [pc, #56]	@ (8001b14 <QTimeEvt_armX+0xb0>)
 8001adc:	0013      	movs	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	189b      	adds	r3, r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	18cb      	adds	r3, r1, r3
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 8001aee:	183b      	adds	r3, r7, r0
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	4908      	ldr	r1, [pc, #32]	@ (8001b14 <QTimeEvt_armX+0xb0>)
 8001af4:	0013      	movs	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	189b      	adds	r3, r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	18cb      	adds	r3, r1, r3
 8001afe:	3308      	adds	r3, #8
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE(nTicks);   // the # ticks
        QS_TEC_PRE(interval); // the interval
        QS_U8_PRE(tickRate);  // tick rate
    QS_END_PRE()

    QF_CRIT_EXIT();
 8001b04:	f7ff f8dc 	bl	8000cc0 <QF_crit_exit_>
}
 8001b08:	46c0      	nop			@ (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b006      	add	sp, #24
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08002264 	.word	0x08002264
 8001b14:	20000958 	.word	0x20000958

08001b18 <QTimeEvt_disarm>:

//............................................................................
//! @public @memberof QTimeEvt
bool QTimeEvt_disarm(QTimeEvt * const me) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001b20:	f7ff f8be 	bl	8000ca0 <QF_crit_entry_>

    QTimeEvtCtr const ctr = me->ctr;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
#ifdef Q_SPY
    uint_fast8_t const qsId = QACTIVE_CAST_(me->act)->prio;
#endif

    // was the time event actually armed?
    bool wasArmed = false;
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
    if (ctr != 0U) {
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00d      	beq.n	8001b54 <QTimeEvt_disarm+0x3c>
        wasArmed = true;
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
        me->flags |= QTE_FLAG_WAS_DISARMED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7d5b      	ldrb	r3, [r3, #21]
 8001b42:	2240      	movs	r2, #64	@ 0x40
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	755a      	strb	r2, [r3, #21]
        me->ctr = 0U; // schedule removal from the list
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	e006      	b.n	8001b62 <QTimeEvt_disarm+0x4a>
            QS_TEC_PRE(me->interval); // the interval
            QS_U8_PRE(me->tickRate);  // tick rate
        QS_END_PRE()
    }
    else { // the time event was already disarmed automatically
        me->flags &= (uint8_t)(~QTE_FLAG_WAS_DISARMED & 0xFFU);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7d5b      	ldrb	r3, [r3, #21]
 8001b58:	2240      	movs	r2, #64	@ 0x40
 8001b5a:	4393      	bics	r3, r2
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	755a      	strb	r2, [r3, #21]
            QS_OBJ_PRE(me->act);      // the target AO
            QS_U8_PRE(me->tickRate);  // tick rate
        QS_END_PRE()
    }

    QF_CRIT_EXIT();
 8001b62:	f7ff f8ad 	bl	8000cc0 <QF_crit_exit_>

    return wasArmed;
 8001b66:	230f      	movs	r3, #15
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	781b      	ldrb	r3, [r3, #0]
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <QTimeEvt_init>:
    return ctr;
}

//............................................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_init(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
    for (uint_fast8_t tickRate = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	e00e      	b.n	8001b9e <QTimeEvt_init+0x2a>
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
         ++tickRate)
    {
        QTimeEvt_ctorX(&QTimeEvt_timeEvtHead_[tickRate],
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	0013      	movs	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	189b      	adds	r3, r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <QTimeEvt_init+0x3c>)
 8001b8c:	1898      	adds	r0, r3, r2
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2204      	movs	r2, #4
 8001b92:	2100      	movs	r1, #0
 8001b94:	f7ff ff2c 	bl	80019f0 <QTimeEvt_ctorX>
         ++tickRate)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	607b      	str	r3, [r7, #4]
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ed      	beq.n	8001b80 <QTimeEvt_init+0xc>
                       (QActive *)0, Q_USER_SIG, tickRate);
    }
}
 8001ba4:	46c0      	nop			@ (mov r8, r8)
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b002      	add	sp, #8
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	20000958 	.word	0x20000958

08001bb4 <QTimeEvt_tick_>:
//............................................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
#ifndef Q_SPY
    Q_UNUSED_PAR(sender);
#endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001bbe:	f7ff f86f 	bl	8000ca0 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(800, tickRate < Q_DIM(QTimeEvt_timeEvtHead_));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <QTimeEvt_tick_+0x22>
 8001bc8:	23c8      	movs	r3, #200	@ 0xc8
 8001bca:	009a      	lsls	r2, r3, #2
 8001bcc:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <QTimeEvt_tick_+0x128>)
 8001bce:	0011      	movs	r1, r2
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7fe fe6b 	bl	80008ac <Q_onError>

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	0013      	movs	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	189b      	adds	r3, r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce0 <QTimeEvt_tick_+0x12c>)
 8001be2:	189b      	adds	r3, r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
    QS_END_PRE()
#endif // def Q_SPY

    // scan the linked-list of time events at this rate...
    while (true) {
        Q_ASSERT_INCRIT(810, prev != (QTimeEvt *)0); // sanity check
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <QTimeEvt_tick_+0x44>
 8001bec:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce4 <QTimeEvt_tick_+0x130>)
 8001bee:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <QTimeEvt_tick_+0x128>)
 8001bf0:	0011      	movs	r1, r2
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f7fe fe5a 	bl	80008ac <Q_onError>

        QTimeEvt *te = prev->next; // advance down the time evt. list
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]

        if (te == (QTimeEvt *)0) { // end of the list?
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d122      	bne.n	8001c4a <QTimeEvt_tick_+0x96>
            // NO any new time events armed since the last QTimeEvt_tick_()?
            if (QTimeEvt_timeEvtHead_[tickRate].act == (void *)0) {
 8001c04:	4936      	ldr	r1, [pc, #216]	@ (8001ce0 <QTimeEvt_tick_+0x12c>)
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	0013      	movs	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	189b      	adds	r3, r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	18cb      	adds	r3, r1, r3
 8001c12:	3308      	adds	r3, #8
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d059      	beq.n	8001cce <QTimeEvt_tick_+0x11a>
                break; // terminate the while-loop
            }

            prev->next = (QTimeEvt*)QTimeEvt_timeEvtHead_[tickRate].act;
 8001c1a:	4931      	ldr	r1, [pc, #196]	@ (8001ce0 <QTimeEvt_tick_+0x12c>)
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	0013      	movs	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	189b      	adds	r3, r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	18cb      	adds	r3, r1, r3
 8001c28:	3308      	adds	r3, #8
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	605a      	str	r2, [r3, #4]
            QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 8001c30:	492b      	ldr	r1, [pc, #172]	@ (8001ce0 <QTimeEvt_tick_+0x12c>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	0013      	movs	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	189b      	adds	r3, r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	18cb      	adds	r3, r1, r3
 8001c3e:	3308      	adds	r3, #8
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

            te = prev->next; // switch to the new list
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	613b      	str	r3, [r7, #16]
        }

        // the time event 'te' must be valid
        Q_ASSERT_INCRIT(840, te != (QTimeEvt *)0);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d106      	bne.n	8001c5e <QTimeEvt_tick_+0xaa>
 8001c50:	23d2      	movs	r3, #210	@ 0xd2
 8001c52:	009a      	lsls	r2, r3, #2
 8001c54:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <QTimeEvt_tick_+0x128>)
 8001c56:	0011      	movs	r1, r2
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7fe fe27 	bl	80008ac <Q_onError>

        QTimeEvtCtr ctr = te->ctr; // move volatile into temporary
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	60fb      	str	r3, [r7, #12]

        if (ctr == 0U) { // time event scheduled for removal?
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <QTimeEvt_tick_+0xd2>
            prev->next = te->next;
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	605a      	str	r2, [r3, #4]

            // mark time event 'te' as NOT linked
            te->flags &= (uint8_t)(~QTE_FLAG_IS_LINKED & 0xFFU);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	7d5b      	ldrb	r3, [r3, #21]
 8001c76:	227f      	movs	r2, #127	@ 0x7f
 8001c78:	4013      	ands	r3, r2
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	755a      	strb	r2, [r3, #21]
            // do NOT advance the prev pointer
            QF_CRIT_EXIT(); // exit crit. section to reduce latency
 8001c80:	f7ff f81e 	bl	8000cc0 <QF_crit_exit_>
 8001c84:	e020      	b.n	8001cc8 <QTimeEvt_tick_+0x114>
        }
        else if (ctr == 1U) { // is time event about to expire?
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d113      	bne.n	8001cb4 <QTimeEvt_tick_+0x100>
            QActive * const act = (QActive *)te->act;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	60bb      	str	r3, [r7, #8]
            prev = QTimeEvt_expire_(te, prev, act, tickRate);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	6979      	ldr	r1, [r7, #20]
 8001c98:	6938      	ldr	r0, [r7, #16]
 8001c9a:	f000 f827 	bl	8001cec <QTimeEvt_expire_>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	617b      	str	r3, [r7, #20]

                // QACTIVE_POST() asserts if the queue overflows
                QACTIVE_POST(act, &te->super, sender);
            }
#else // not QXK
            QF_CRIT_EXIT(); // exit crit. section before posting
 8001ca2:	f7ff f80d 	bl	8000cc0 <QF_crit_exit_>

            // QACTIVE_POST() asserts if the queue overflows
            QACTIVE_POST(act, &te->super, sender);
 8001ca6:	6939      	ldr	r1, [r7, #16]
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce8 <QTimeEvt_tick_+0x134>)
 8001caa:	68b8      	ldr	r0, [r7, #8]
 8001cac:	2300      	movs	r3, #0
 8001cae:	f7ff fbb9 	bl	8001424 <QActive_post_>
 8001cb2:	e009      	b.n	8001cc8 <QTimeEvt_tick_+0x114>
#endif
        }
        else { // time event keeps timing out
            --ctr; // decrement the tick counter
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
            te->ctr = ctr; // update the original
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	60da      	str	r2, [r3, #12]

            prev = te; // advance to this time event
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	617b      	str	r3, [r7, #20]
            QF_CRIT_EXIT(); // exit crit. section to reduce latency
 8001cc4:	f7fe fffc 	bl	8000cc0 <QF_crit_exit_>
        }
        QF_CRIT_ENTRY(); // re-enter crit. section to continue the loop
 8001cc8:	f7fe ffea 	bl	8000ca0 <QF_crit_entry_>
    while (true) {
 8001ccc:	e78b      	b.n	8001be6 <QTimeEvt_tick_+0x32>
                break; // terminate the while-loop
 8001cce:	46c0      	nop			@ (mov r8, r8)
    }
    QF_CRIT_EXIT();
 8001cd0:	f7fe fff6 	bl	8000cc0 <QF_crit_exit_>
}
 8001cd4:	46c0      	nop			@ (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b006      	add	sp, #24
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	08002264 	.word	0x08002264
 8001ce0:	20000958 	.word	0x20000958
 8001ce4:	0000032a 	.word	0x0000032a
 8001ce8:	0000ffff 	.word	0x0000ffff

08001cec <QTimeEvt_expire_>:
//! @private @memberof QTimeEvt
QTimeEvt * QTimeEvt_expire_(QTimeEvt * const me,
    QTimeEvt * const prev_link,
    QActive const * const act,
    uint_fast8_t const tickRate)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
#ifndef Q_SPY
    Q_UNUSED_PAR(act);
    Q_UNUSED_PAR(tickRate);
#endif

    QTimeEvt *prev = prev_link;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	617b      	str	r3, [r7, #20]
    if (me->interval != 0U) { // periodic time evt?
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <QTimeEvt_expire_+0x28>
        me->ctr = me->interval; // rearm the time event
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	60da      	str	r2, [r3, #12]
        prev = me; // advance to this time event
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e00d      	b.n	8001d30 <QTimeEvt_expire_+0x44>
    }
    else { // one-shot time event: automatically disarm
        me->ctr = 0U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
        prev->next = me->next;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	605a      	str	r2, [r3, #4]

        // mark this time event as NOT linked
        me->flags &= (uint8_t)(~QTE_FLAG_IS_LINKED & 0xFFU);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	7d5b      	ldrb	r3, [r3, #21]
 8001d26:	227f      	movs	r2, #127	@ 0x7f
 8001d28:	4013      	ands	r3, r2
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	755a      	strb	r2, [r3, #21]
        QS_SIG_PRE(me->super.sig);// signal of this time event
        QS_OBJ_PRE(act);          // the target AO
        QS_U8_PRE(tickRate);      // tick rate
    QS_END_PRE()

    return prev;
 8001d30:	697b      	ldr	r3, [r7, #20]
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b006      	add	sp, #24
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <QPSet_isEmpty>:
static inline bool QPSet_isEmpty(QPSet const * const me) {
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
    return (me->bits[0] == 0U);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	425a      	negs	r2, r3
 8001d48:	4153      	adcs	r3, r2
 8001d4a:	b2db      	uxtb	r3, r3
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    return (me->bits[0] != 0U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	4193      	sbcs	r3, r2
 8001d64:	b2db      	uxtb	r3, r3
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b002      	add	sp, #8
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <QPSet_remove>:

//! @public @memberof QPSet
static inline void QPSet_remove(QPSet * const me,
    uint_fast8_t const n)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
#if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	3a01      	subs	r2, #1
 8001d80:	2101      	movs	r1, #1
 8001d82:	4091      	lsls	r1, r2
 8001d84:	000a      	movs	r2, r1
 8001d86:	43d2      	mvns	r2, r2
 8001d88:	401a      	ands	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
    }
    else {
        (me->bits[1] = (me->bits[1] & ~((QPSetBits)1U << (n - 33U))));
    }
#endif
}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <QPSet_findMax>:

//! @public @memberof QPSet
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
#if (QF_MAX_ACTIVE <= 32U)
    return QF_LOG2(me->bits[0]);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7fe ffe0 	bl	8000d68 <QF_qlog2>
 8001da8:	0003      	movs	r3, r0
#else
    return (me->bits[1] != 0U)
        ? (QF_LOG2(me->bits[1]) + 32U)
        : (QF_LOG2(me->bits[0]));
#endif
}
 8001daa:	0018      	movs	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b002      	add	sp, #8
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <QK_sched_>:
    }
}

//............................................................................
//! @static @private @memberof QK
uint_fast8_t QK_sched_(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
    // NOTE: this function is entered with interrupts DISABLED

    uint_fast8_t p = 0U; // assume NO activation needed
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
    if (QPSet_notEmpty(&QK_priv_.readySet)) {
 8001dbe:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <QK_sched_+0x54>)
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff ffc7 	bl	8001d54 <QPSet_notEmpty>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d018      	beq.n	8001dfc <QK_sched_+0x48>
        // find the highest-prio AO with non-empty event queue
        p = QPSet_findMax(&QK_priv_.readySet);
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <QK_sched_+0x54>)
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff ffe2 	bl	8001d96 <QPSet_findMax>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	607b      	str	r3, [r7, #4]

        // is the AO's prio. below the active preemption-threshold?
        if (p <= QK_priv_.actThre) {
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <QK_sched_+0x54>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d802      	bhi.n	8001de6 <QK_sched_+0x32>
            p = 0U; // no activation needed
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	e00a      	b.n	8001dfc <QK_sched_+0x48>
        }
        else {
            // is the AO's prio. below the lock-ceiling?
            if (p <= QK_priv_.lockCeil) {
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <QK_sched_+0x54>)
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d802      	bhi.n	8001df6 <QK_sched_+0x42>
                p = 0U; // no activation needed
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	e002      	b.n	8001dfc <QK_sched_+0x48>
            }
            else {
                QK_priv_.nextPrio = p; // next AO to run
 8001df6:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <QK_sched_+0x54>)
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
            }
        }
    }

    return p;
 8001dfc:	687b      	ldr	r3, [r7, #4]
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	20000970 	.word	0x20000970

08001e0c <QK_sched_act_>:
//............................................................................
//! @static @private @memberof QK
uint_fast8_t QK_sched_act_(
    QActive const * const act,
    uint_fast8_t const pthre_in)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
    // NOTE: this function is entered with interrupts DISABLED

    uint_fast8_t p = act->prio;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7b1b      	ldrb	r3, [r3, #12]
 8001e1a:	60fb      	str	r3, [r7, #12]
    if (act->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <QK_sched_act_+0x24>
        QPSet_remove(&QK_priv_.readySet, p);
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <QK_sched_act_+0x68>)
 8001e28:	0011      	movs	r1, r2
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7ff ff9f 	bl	8001d6e <QPSet_remove>
    }

    if (QPSet_isEmpty(&QK_priv_.readySet)) {
 8001e30:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <QK_sched_act_+0x68>)
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7ff ff81 	bl	8001d3a <QPSet_isEmpty>
 8001e38:	1e03      	subs	r3, r0, #0
 8001e3a:	d002      	beq.n	8001e42 <QK_sched_act_+0x36>
        p = 0U; // no activation needed
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e013      	b.n	8001e6a <QK_sched_act_+0x5e>
    }
    else {
        // find new highest-prio AO ready to run...
        p = QPSet_findMax(&QK_priv_.readySet);
 8001e42:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <QK_sched_act_+0x68>)
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7ff ffa6 	bl	8001d96 <QPSet_findMax>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]
        // NOTE: p is guaranteed to be <= QF_MAX_ACTIVE

        // is the new prio. below the initial preemption-threshold?
        if (p <= pthre_in) {
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d802      	bhi.n	8001e5c <QK_sched_act_+0x50>
            p = 0U; // no activation needed
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e006      	b.n	8001e6a <QK_sched_act_+0x5e>
        }
        else {
            // is the AO's prio. below the lock preemption-threshold?
            if (p <= QK_priv_.lockCeil) {
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <QK_sched_act_+0x68>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d801      	bhi.n	8001e6a <QK_sched_act_+0x5e>
                p = 0U; // no activation needed
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
            }
        }
    }

    return p;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b004      	add	sp, #16
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000970 	.word	0x20000970

08001e78 <QK_activate_>:

//............................................................................
//! @static @private @memberof QK
void QK_activate_(void) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
    // NOTE: this function is entered with interrupts DISABLED

    uint_fast8_t const prio_in = QK_priv_.actPrio; // save initial prio.
 8001e7e:	4b39      	ldr	r3, [pc, #228]	@ (8001f64 <QK_activate_+0xec>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	617b      	str	r3, [r7, #20]
    uint_fast8_t p = QK_priv_.nextPrio; // next prio to run
 8001e84:	4b37      	ldr	r3, [pc, #220]	@ (8001f64 <QK_activate_+0xec>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	61fb      	str	r3, [r7, #28]

    Q_REQUIRE_INCRIT(500, (prio_in <= QF_MAX_ACTIVE)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d805      	bhi.n	8001e9c <QK_activate_+0x24>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <QK_activate_+0x24>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d906      	bls.n	8001eaa <QK_activate_+0x32>
 8001e9c:	23fa      	movs	r3, #250	@ 0xfa
 8001e9e:	005a      	lsls	r2, r3, #1
 8001ea0:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <QK_activate_+0xf0>)
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7fe fd01 	bl	80008ac <Q_onError>

#if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
    uint_fast8_t pprev = prio_in;
#endif // QF_ON_CONTEXT_SW || Q_SPY

    QK_priv_.nextPrio = 0U; // clear for the next time
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <QK_activate_+0xec>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]

    uint_fast8_t pthre_in = 0U; // assume preempting the idle thread
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
    if (prio_in != 0U) { // preempting NOT the idle thread
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d011      	beq.n	8001ede <QK_activate_+0x66>
        QActive const * const a = QActive_registry_[prio_in];
 8001eba:	4b2c      	ldr	r3, [pc, #176]	@ (8001f6c <QK_activate_+0xf4>)
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	58d3      	ldr	r3, [r2, r3]
 8001ec2:	613b      	str	r3, [r7, #16]
        Q_ASSERT_INCRIT(510, a != (QActive *)0);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d106      	bne.n	8001ed8 <QK_activate_+0x60>
 8001eca:	23ff      	movs	r3, #255	@ 0xff
 8001ecc:	005a      	lsls	r2, r3, #1
 8001ece:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <QK_activate_+0xf0>)
 8001ed0:	0011      	movs	r1, r2
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7fe fcea 	bl	80008ac <Q_onError>

        pthre_in = (uint_fast8_t)a->pthre;
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	7b5b      	ldrb	r3, [r3, #13]
 8001edc:	61bb      	str	r3, [r7, #24]
    }

    // loop until no more ready-to-run AOs of higher pthre than the initial
    do  {
        QActive * const a = QActive_registry_[p];
 8001ede:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <QK_activate_+0xf4>)
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	0092      	lsls	r2, r2, #2
 8001ee4:	58d3      	ldr	r3, [r2, r3]
 8001ee6:	60fb      	str	r3, [r7, #12]
        Q_ASSERT_INCRIT(520, a != (QActive *)0); // the AO must be registered
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <QK_activate_+0x84>
 8001eee:	2382      	movs	r3, #130	@ 0x82
 8001ef0:	009a      	lsls	r2, r3, #2
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <QK_activate_+0xf0>)
 8001ef4:	0011      	movs	r1, r2
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f7fe fcd8 	bl	80008ac <Q_onError>
        uint_fast8_t const pthre = (uint_fast8_t)a->pthre;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	7b5b      	ldrb	r3, [r3, #13]
 8001f00:	60bb      	str	r3, [r7, #8]

        // set new active prio. and preemption-threshold
        QK_priv_.actPrio = p;
 8001f02:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <QK_activate_+0xec>)
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	605a      	str	r2, [r3, #4]
        QK_priv_.actThre = pthre;
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <QK_activate_+0xec>)
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	60da      	str	r2, [r3, #12]

            pprev = p; // update previous prio.
        }
#endif // QF_ON_CONTEXT_SW || Q_SPY

        QF_INT_ENABLE(); // unconditionally enable interrupts
 8001f0e:	f7fe feb7 	bl	8000c80 <QF_int_enable_>

        QEvt const * const e = QActive_get_(a);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff faed 	bl	80014f4 <QActive_get_>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	607b      	str	r3, [r7, #4]

        // dispatch event (virtual call)
        (*a->super.vptr->dispatch)(&a->super, e, p);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4798      	blx	r3
#if (QF_MAX_EPOOL > 0U)
        QF_gc(e);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff fbc6 	bl	80016c0 <QF_gc>
#endif

        // determine the next highest-prio. AO ready to run...
        QF_INT_DISABLE(); // unconditionally disable interrupts
 8001f34:	f7fe fe94 	bl	8000c60 <QF_int_disable_>
        p = QK_sched_act_(a, pthre_in); // schedule next AO
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff ff64 	bl	8001e0c <QK_sched_act_>
 8001f44:	0003      	movs	r3, r0
 8001f46:	61fb      	str	r3, [r7, #28]

    } while (p != 0U);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1c7      	bne.n	8001ede <QK_activate_+0x66>

    // restore the active prio. and preemption-threshold
    QK_priv_.actPrio = prio_in;
 8001f4e:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <QK_activate_+0xec>)
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	605a      	str	r2, [r3, #4]
    QK_priv_.actThre = pthre_in;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <QK_activate_+0xec>)
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	60da      	str	r2, [r3, #12]
#ifdef QF_ON_CONTEXT_SW
        QF_onContextSw(QActive_registry_[pprev], (QActive *)0);
#endif // QF_ON_CONTEXT_SW
    }
#endif // QF_ON_CONTEXT_SW || Q_SPY
}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b008      	add	sp, #32
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	20000970 	.word	0x20000970
 8001f68:	0800226c 	.word	0x0800226c
 8001f6c:	200008d4 	.word	0x200008d4

08001f70 <QF_init>:

//............................................................................
//! @static @public @memberof QF
void QF_init(void) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
    QF_bzero_(&QF_priv_,                 sizeof(QF_priv_));
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <QF_init+0x38>)
 8001f76:	2140      	movs	r1, #64	@ 0x40
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7ff fa11 	bl	80013a0 <QF_bzero_>
    QF_bzero_(&QK_priv_,                 sizeof(QK_priv_));
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <QF_init+0x3c>)
 8001f80:	2118      	movs	r1, #24
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7ff fa0c 	bl	80013a0 <QF_bzero_>
    QF_bzero_(&QActive_registry_[0],     sizeof(QActive_registry_));
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <QF_init+0x40>)
 8001f8a:	2184      	movs	r1, #132	@ 0x84
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7ff fa07 	bl	80013a0 <QF_bzero_>

    // setup the QK scheduler as initially locked and not running
    QK_priv_.lockCeil = (QF_MAX_ACTIVE + 1U); // scheduler locked
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <QF_init+0x3c>)
 8001f94:	2221      	movs	r2, #33	@ 0x21
 8001f96:	611a      	str	r2, [r3, #16]

    QTimeEvt_init(); // initialize QTimeEvts
 8001f98:	f7ff fdec 	bl	8001b74 <QTimeEvt_init>

#ifdef QK_INIT
    QK_INIT(); // port-specific initialization of the QK kernel
 8001f9c:	f7fe fea0 	bl	8000ce0 <QK_init>
#endif
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	20000894 	.word	0x20000894
 8001fac:	20000970 	.word	0x20000970
 8001fb0:	200008d4 	.word	0x200008d4

08001fb4 <QF_run>:
    // nothing else to do for the preemptive QK kernel
}

//............................................................................
//! @static @public @memberof QF
int_t QF_run(void) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
    QS_beginRec_((uint_fast8_t)QS_QF_RUN);
    QS_endRec_();
    QF_INT_ENABLE();
#endif // Q_SPY

    QF_onStartup(); // application-specific startup callback
 8001fb8:	f7fe fdf0 	bl	8000b9c <QF_onStartup>

    QF_INT_DISABLE();
 8001fbc:	f7fe fe50 	bl	8000c60 <QF_int_disable_>

#ifdef QK_START
    QK_START(); // port-specific startup of the QK kernel
#endif

    QK_priv_.lockCeil = 0U; // unlock the QK scheduler
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <QF_run+0x28>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
    // officially switch to the idle context
    QF_onContextSw((QActive *)0, QActive_registry_[QK_priv_.nextPrio]);
#endif

    // activate AOs to process events posted so far
    if (QK_sched_() != 0U) {
 8001fc6:	f7ff fef5 	bl	8001db4 <QK_sched_>
 8001fca:	1e03      	subs	r3, r0, #0
 8001fcc:	d001      	beq.n	8001fd2 <QF_run+0x1e>
        QK_activate_();
 8001fce:	f7ff ff53 	bl	8001e78 <QK_activate_>
    }

    QF_INT_ENABLE();
 8001fd2:	f7fe fe55 	bl	8000c80 <QF_int_enable_>

    for (;;) { // QK idle loop...
        QK_onIdle(); // application-specific QK on-idle callback
 8001fd6:	f7fe fdfd 	bl	8000bd4 <QK_onIdle>
 8001fda:	e7fc      	b.n	8001fd6 <QF_run+0x22>
 8001fdc:	20000970 	.word	0x20000970

08001fe0 <QActive_start>:
    QEvtPtr * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	230a      	movs	r3, #10
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	1c0a      	adds	r2, r1, #0
 8001ff2:	801a      	strh	r2, [r3, #0]
    Q_UNUSED_PAR(stkSto);  // not needed in QK
    Q_UNUSED_PAR(stkSize); // not needed in QK

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8001ff4:	f7fe fe54 	bl	8000ca0 <QF_crit_entry_>

    Q_REQUIRE_INCRIT(300, (me->super.vptr != (struct QAsmVtable *)0)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <QActive_start+0x26>
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <QActive_start+0x34>
 8002006:	2396      	movs	r3, #150	@ 0x96
 8002008:	005a      	lsls	r2, r3, #1
 800200a:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <QActive_start+0x94>)
 800200c:	0011      	movs	r1, r2
 800200e:	0018      	movs	r0, r3
 8002010:	f7fe fc4c 	bl	80008ac <Q_onError>
        && (stkSto == (void *)0));
    QF_CRIT_EXIT();
 8002014:	f7fe fe54 	bl	8000cc0 <QF_crit_exit_>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); // QF-prio. of the AO
 8002018:	210a      	movs	r1, #10
 800201a:	187b      	adds	r3, r7, r1
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	731a      	strb	r2, [r3, #12]
    me->pthre = (uint8_t)(prioSpec >> 8U);   // preemption-threshold
 8002024:	187b      	adds	r3, r7, r1
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	b29b      	uxth	r3, r3
 800202c:	b2da      	uxtb	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	735a      	strb	r2, [r3, #13]
    QActive_register_(me); // make QF aware of this active object
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	0018      	movs	r0, r3
 8002036:	f7ff fc05 	bl	8001844 <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); // init the built-in queue
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3314      	adds	r3, #20
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	0018      	movs	r0, r3
 8002044:	f7ff fc8a 	bl	800195c <QEQueue_init>

    // top-most initial tran. (virtual call)
    (*me->super.vptr->init)(&me->super, par, me->prio);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	7b12      	ldrb	r2, [r2, #12]
 8002054:	6a39      	ldr	r1, [r7, #32]
 8002056:	4798      	blx	r3
    QS_FLUSH(); // flush the trace buffer to the host

    // See if this AO needs to be scheduled if QK is already running
    QF_CRIT_ENTRY();
 8002058:	f7fe fe22 	bl	8000ca0 <QF_crit_entry_>
    if (QK_sched_() != 0U) { // activation needed?
 800205c:	f7ff feaa 	bl	8001db4 <QK_sched_>
 8002060:	1e03      	subs	r3, r0, #0
 8002062:	d001      	beq.n	8002068 <QActive_start+0x88>
        QK_activate_();
 8002064:	f7ff ff08 	bl	8001e78 <QK_activate_>
    }
    QF_CRIT_EXIT();
 8002068:	f7fe fe2a 	bl	8000cc0 <QF_crit_exit_>
}
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b004      	add	sp, #16
 8002072:	bd80      	pop	{r7, pc}
 8002074:	0800226c 	.word	0x0800226c

08002078 <__libc_init_array>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	2600      	movs	r6, #0
 800207c:	4c0c      	ldr	r4, [pc, #48]	@ (80020b0 <__libc_init_array+0x38>)
 800207e:	4d0d      	ldr	r5, [pc, #52]	@ (80020b4 <__libc_init_array+0x3c>)
 8002080:	1b64      	subs	r4, r4, r5
 8002082:	10a4      	asrs	r4, r4, #2
 8002084:	42a6      	cmp	r6, r4
 8002086:	d109      	bne.n	800209c <__libc_init_array+0x24>
 8002088:	2600      	movs	r6, #0
 800208a:	f000 f8f1 	bl	8002270 <_init>
 800208e:	4c0a      	ldr	r4, [pc, #40]	@ (80020b8 <__libc_init_array+0x40>)
 8002090:	4d0a      	ldr	r5, [pc, #40]	@ (80020bc <__libc_init_array+0x44>)
 8002092:	1b64      	subs	r4, r4, r5
 8002094:	10a4      	asrs	r4, r4, #2
 8002096:	42a6      	cmp	r6, r4
 8002098:	d105      	bne.n	80020a6 <__libc_init_array+0x2e>
 800209a:	bd70      	pop	{r4, r5, r6, pc}
 800209c:	00b3      	lsls	r3, r6, #2
 800209e:	58eb      	ldr	r3, [r5, r3]
 80020a0:	4798      	blx	r3
 80020a2:	3601      	adds	r6, #1
 80020a4:	e7ee      	b.n	8002084 <__libc_init_array+0xc>
 80020a6:	00b3      	lsls	r3, r6, #2
 80020a8:	58eb      	ldr	r3, [r5, r3]
 80020aa:	4798      	blx	r3
 80020ac:	3601      	adds	r6, #1
 80020ae:	e7f2      	b.n	8002096 <__libc_init_array+0x1e>
 80020b0:	08002288 	.word	0x08002288
 80020b4:	08002288 	.word	0x08002288
 80020b8:	0800228c 	.word	0x0800228c
 80020bc:	08002288 	.word	0x08002288
 80020c0:	65736552 	.word	0x65736552
 80020c4:	61485f74 	.word	0x61485f74
 80020c8:	656c646e 	.word	0x656c646e
 80020cc:	00000072 	.word	0x00000072
 80020d0:	00494d4e 	.word	0x00494d4e
 80020d4:	64726148 	.word	0x64726148
 80020d8:	6c756146 	.word	0x6c756146
 80020dc:	00000074 	.word	0x00000074
 80020e0:	61666544 	.word	0x61666544
 80020e4:	00746c75 	.word	0x00746c75

080020e8 <AHBPrescTable>:
	...
 8002108:	00000001 00000002 00000003 00000004     ................
 8002118:	00000006 00000007 00000008 00000009     ................
 8002128:	080003b0 080003d8 080003bc 08000416     ................
 8002138:	0800048e 0800048e 0800048e 0800048e     ................
 8002148:	0800048e 08000432 08000482 08000516     ....2...........
 8002158:	080004e0 080004e6 08000516 08000516     ................
 8002168:	08000516 08000516 08000502 0800050c     ................
 8002178:	08000516 080004ec 080004f8 08000590     ................
 8002188:	08000590 08000554 0800055a 08000590     ....T...Z.......
 8002198:	08000590 08000590 0800057c 08000586     ........|.......
 80021a8:	08000590 08000566 08000572 080006c2     ....f...r.......
 80021b8:	0800067c 0800068a 080006c2 080006c2     |...............
 80021c8:	080006c2 080006c2 080006ae 080006b8     ................
 80021d8:	080006c2 08000698 080006a4              ............

080021e4 <AO_AudioPlayer>:
 80021e4:	20000820                                 .. 

080021e8 <nextEvt.1>:
 80021e8:	e0000007                                ....

080021ec <prevEvt.0>:
 80021ec:	e0000008                                ....

080021f0 <plusEvt.5>:
 80021f0:	e0000005                                ....

080021f4 <releaseEvt.4>:
 80021f4:	e000000c                                ....

080021f8 <minusEvt.3>:
 80021f8:	e0000006                                ....

080021fc <modeEvt.2>:
 80021fc:	e000000a                                ....

08002200 <pauseplayEvt.1>:
 8002200:	e000000b                                ....

08002204 <QF_port_module_>:
 8002204:	705f6b71 0074726f                       qk_port.

0800220c <Q_this_module_>:
 800220c:	5f706571 006d7368                       qep_hsm.

08002214 <l_reservedEvt_>:
 8002214:	e0000000 e0000001 e0000002 e0000003     ................

08002224 <vtable.0>:
 8002224:	08000dd1 08000ed5 08001015              ............

08002230 <Q_this_module_>:
 8002230:	615f6671 00717463                       qf_actq.

08002238 <Q_this_module_>:
 8002238:	645f6671 00006e79                       qf_dyn..

08002240 <Q_this_module_>:
 8002240:	6d5f6671 00006d65                       qf_mem..

08002248 <Q_this_module_>:
 8002248:	715f6671 00746361                       qf_qact.

08002250 <vtable.0>:
 8002250:	08000dd1 08000ed5 08001015              ............

0800225c <Q_this_module_>:
 800225c:	715f6671 00007165                       qf_qeq..

08002264 <Q_this_module_>:
 8002264:	745f6671 00656d69                       qf_time.

0800226c <Q_this_module_>:
 800226c:	00006b71                                qk..

08002270 <_init>:
 8002270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002276:	bc08      	pop	{r3}
 8002278:	469e      	mov	lr, r3
 800227a:	4770      	bx	lr

0800227c <_fini>:
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002282:	bc08      	pop	{r3}
 8002284:	469e      	mov	lr, r3
 8002286:	4770      	bx	lr
