//$file${../../Inc::AudioPlayer.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: Audioplayer.qm
// File:  ${../../Inc::AudioPlayer.h}
//
// This code has been generated by QM 7.0.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${../../Inc::AudioPlayer.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef audioPlayer_H_
#define audioPlayer_H_
#include "shared.h"
#include "qpc.h"

//$declare${AOs::AudioPlayer} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AudioPlayer} ........................................................
typedef struct {
// protected:
    QActive super;

// private:
    QTimeEvt volTimerEvt;
    uint8_t vol;
    uint8_t volChanged;
    uint8_t sign;
} AudioPlayer;

// protected:
QState AudioPlayer_initial(AudioPlayer * const me, void const * const par);
QState AudioPlayer_MODE(AudioPlayer * const me, QEvt const * const e);
QState AudioPlayer_Radio(AudioPlayer * const me, QEvt const * const e);
QState AudioPlayer_Bluetooth(AudioPlayer * const me, QEvt const * const e);
QState AudioPlayer_BT_Init(AudioPlayer * const me, QEvt const * const e);
QState AudioPlayer_Pairing(AudioPlayer * const me, QEvt const * const e);
QState AudioPlayer_Pair(AudioPlayer * const me, QEvt const * const e);
QState AudioPlayer_SD_card_Input(AudioPlayer * const me, QEvt const * const e);
QState AudioPlayer_OFF(AudioPlayer * const me, QEvt const * const e);
//$enddecl${AOs::AudioPlayer} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare${Shared::AudioPlayer_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Shared::AudioPlayer_ctor} ................................................
void AudioPlayer_ctor(void);
//$enddecl${Shared::AudioPlayer_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


#endif
