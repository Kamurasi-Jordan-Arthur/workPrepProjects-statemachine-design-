
elevatorSys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000753c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080076c4  080076c4  000086c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d8  080076d8  0000907c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080076d8  080076d8  000086d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076e0  080076e0  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076e0  080076e0  000086e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076e4  080076e4  000086e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080076e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000907c  2**0
                  CONTENTS
 10 .bss          00000928  2000007c  2000007c  0000907c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009a4  200009a4  0000907c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dabb  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b10  00000000  00000000  00016b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  00019678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d0  00000000  00000000  0001a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b51  00000000  00000000  0001a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de03  00000000  00000000  0003c441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5084  00000000  00000000  0004a244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f2c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d58  00000000  00000000  0010f30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00112064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080076ac 	.word	0x080076ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080076ac 	.word	0x080076ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 f99e 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f808 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f870 	bl	80005e4 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000504:	f006 fc7c 	bl	8006e00 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000508:	f006 fca0 	bl	8006e4c <MX_USB_HOST_Process>
 800050c:	e7fc      	b.n	8000508 <main+0x14>
	...

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	@ 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	@ 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f007 f836 	bl	8007590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	@ (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	@ (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	@ 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	@ (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	@ (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000574:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000580:	2308      	movs	r3, #8
 8000582:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000584:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058e:	2307      	movs	r3, #7
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fde0 	bl	800315c <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a2:	f000 f86f 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2105      	movs	r1, #5
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 f841 	bl	800364c <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d0:	f000 f858 	bl	8000684 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	@ 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <MX_GPIO_Init+0x98>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a1e      	ldr	r2, [pc, #120]	@ (800067c <MX_GPIO_Init+0x98>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <MX_GPIO_Init+0x98>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b18      	ldr	r3, [pc, #96]	@ (800067c <MX_GPIO_Init+0x98>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_GPIO_Init+0x98>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <MX_GPIO_Init+0x98>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_GPIO_Init+0x98>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a10      	ldr	r2, [pc, #64]	@ (800067c <MX_GPIO_Init+0x98>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_GPIO_Init+0x98>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2101      	movs	r1, #1
 8000652:	480b      	ldr	r0, [pc, #44]	@ (8000680 <MX_GPIO_Init+0x9c>)
 8000654:	f000 fc34 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000658:	2301      	movs	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	@ (8000680 <MX_GPIO_Init+0x9c>)
 8000670:	f000 fa8a 	bl	8000b88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40020800 	.word	0x40020800

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <Error_Handler+0x8>

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <HAL_MspInit+0x4c>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069e:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <HAL_MspInit+0x4c>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <HAL_MspInit+0x4c>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <HAL_MspInit+0x4c>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ba:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <HAL_MspInit+0x4c>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_MspInit+0x4c>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006ce:	2007      	movs	r0, #7
 80006d0:	f000 fa18 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <NMI_Handler+0x4>

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <MemManage_Handler+0x4>

080006f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <UsageFault_Handler+0x4>

08000708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000736:	f000 f8d1 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000744:	4802      	ldr	r0, [pc, #8]	@ (8000750 <OTG_FS_IRQHandler+0x10>)
 8000746:	f000 feb5 	bl	80014b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000047c 	.word	0x2000047c

08000754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800075c:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <_sbrk+0x5c>)
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <_sbrk+0x60>)
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <_sbrk+0x64>)
 8000772:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <_sbrk+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	429a      	cmp	r2, r3
 8000782:	d207      	bcs.n	8000794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000784:	f006 ff1c 	bl	80075c0 <__errno>
 8000788:	4603      	mov	r3, r0
 800078a:	220c      	movs	r2, #12
 800078c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000792:	e009      	b.n	80007a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000794:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <_sbrk+0x64>)
 80007a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20020000 	.word	0x20020000
 80007b4:	00000400 	.word	0x00000400
 80007b8:	20000098 	.word	0x20000098
 80007bc:	200009a8 	.word	0x200009a8

080007c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <SystemInit+0x20>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ca:	4a05      	ldr	r2, [pc, #20]	@ (80007e0 <SystemInit+0x20>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800081c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007e8:	f7ff ffea 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	@ (8000824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	@ (8000830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000812:	f006 fedb 	bl	80075cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000816:	f7ff fe6d 	bl	80004f4 <main>
  bx  lr    
 800081a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800081c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000828:	080076e8 	.word	0x080076e8
  ldr r2, =_sbss
 800082c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000830:	200009a4 	.word	0x200009a4

08000834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <HAL_Init+0x40>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	@ (8000878 <HAL_Init+0x40>)
 8000842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000848:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <HAL_Init+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <HAL_Init+0x40>)
 800084e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a07      	ldr	r2, [pc, #28]	@ (8000878 <HAL_Init+0x40>)
 800085a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800085e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f94f 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000866:	2000      	movs	r0, #0
 8000868:	f000 f808 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800086c:	f7ff ff10 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023c00 	.word	0x40023c00

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_InitTick+0x54>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_InitTick+0x58>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	fbb3 f3f1 	udiv	r3, r3, r1
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f967 	bl	8000b6e <HAL_SYSTICK_Config>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00e      	b.n	80008c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d80a      	bhi.n	80008c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008b8:	f000 f92f 	bl	8000b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4a06      	ldr	r2, [pc, #24]	@ (80008d8 <HAL_InitTick+0x5c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_IncTick+0x20>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_IncTick+0x24>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_IncTick+0x24>)
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008
 8000900:	2000009c 	.word	0x2000009c

08000904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <HAL_GetTick+0x14>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	2000009c 	.word	0x2000009c

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff ffee 	bl	8000904 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffde 	bl	8000904 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db0b      	blt.n	80009f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 021f 	and.w	r2, r3, #31
 80009e0:	4907      	ldr	r1, [pc, #28]	@ (8000a00 <__NVIC_EnableIRQ+0x38>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	2001      	movs	r0, #1
 80009ea:	fa00 f202 	lsl.w	r2, r0, r2
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	@ (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	@ (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	@ 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
         );
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	@ 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ad0:	d301      	bcc.n	8000ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00f      	b.n	8000af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <SysTick_Config+0x40>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ade:	210f      	movs	r1, #15
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ae4:	f7ff ff8e 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <SysTick_Config+0x40>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aee:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <SysTick_Config+0x40>)
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	e000e010 	.word	0xe000e010

08000b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff29 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff3e 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff8e 	bl	8000a58 <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5d 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff31 	bl	80009c8 <__NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffa2 	bl	8000ac0 <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	e16b      	b.n	8000e7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 815a 	bne.w	8000e76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d005      	beq.n	8000bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d130      	bne.n	8000c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	f003 0201 	and.w	r2, r3, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d017      	beq.n	8000c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d123      	bne.n	8000ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	69b9      	ldr	r1, [r7, #24]
 8000cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0203 	and.w	r2, r3, #3
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 80b4 	beq.w	8000e76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b60      	ldr	r3, [pc, #384]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	4a5f      	ldr	r2, [pc, #380]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8000e98 <HAL_GPIO_Init+0x310>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a52      	ldr	r2, [pc, #328]	@ (8000e9c <HAL_GPIO_Init+0x314>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d02b      	beq.n	8000dae <HAL_GPIO_Init+0x226>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a51      	ldr	r2, [pc, #324]	@ (8000ea0 <HAL_GPIO_Init+0x318>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d025      	beq.n	8000daa <HAL_GPIO_Init+0x222>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a50      	ldr	r2, [pc, #320]	@ (8000ea4 <HAL_GPIO_Init+0x31c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d01f      	beq.n	8000da6 <HAL_GPIO_Init+0x21e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea8 <HAL_GPIO_Init+0x320>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d019      	beq.n	8000da2 <HAL_GPIO_Init+0x21a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4e      	ldr	r2, [pc, #312]	@ (8000eac <HAL_GPIO_Init+0x324>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x216>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4d      	ldr	r2, [pc, #308]	@ (8000eb0 <HAL_GPIO_Init+0x328>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb4 <HAL_GPIO_Init+0x32c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x20e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x20a>
 8000d8e:	2307      	movs	r3, #7
 8000d90:	e00e      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d92:	2308      	movs	r3, #8
 8000d94:	e00c      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d96:	2306      	movs	r3, #6
 8000d98:	e00a      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e008      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d9e:	2304      	movs	r3, #4
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000dae:	2300      	movs	r3, #0
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	f002 0203 	and.w	r2, r2, #3
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc0:	4935      	ldr	r1, [pc, #212]	@ (8000e98 <HAL_GPIO_Init+0x310>)
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000df2:	4a32      	ldr	r2, [pc, #200]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df8:	4b30      	ldr	r3, [pc, #192]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e70:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	f67f ae90 	bls.w	8000ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40021400 	.word	0x40021400
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	40021c00 	.word	0x40021c00
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000edc:	e003      	b.n	8000ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	041a      	lsls	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	619a      	str	r2, [r3, #24]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af02      	add	r7, sp, #8
 8000ef8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e059      	b.n	8000fb8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d106      	bne.n	8000f24 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f005 ffcc 	bl	8006ebc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2203      	movs	r2, #3
 8000f28:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f32:	d102      	bne.n	8000f3a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fde5 	bl	8003b0e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6818      	ldr	r0, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7c1a      	ldrb	r2, [r3, #16]
 8000f4c:	f88d 2000 	strb.w	r2, [sp]
 8000f50:	3304      	adds	r3, #4
 8000f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f54:	f002 fd66 	bl	8003a24 <USB_CoreInit>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2202      	movs	r2, #2
 8000f62:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e026      	b.n	8000fb8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fddd 	bl	8003b30 <USB_SetCurrentMode>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2202      	movs	r2, #2
 8000f80:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e017      	b.n	8000fb8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7c1a      	ldrb	r2, [r3, #16]
 8000f90:	f88d 2000 	strb.w	r2, [sp]
 8000f94:	3304      	adds	r3, #4
 8000f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f98:	f002 ff80 	bl	8003e9c <USB_HostInit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e004      	b.n	8000fb8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b08b      	sub	sp, #44	@ 0x2c
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	4608      	mov	r0, r1
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	70fb      	strb	r3, [r7, #3]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	70bb      	strb	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8000fda:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000fdc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <HAL_HCD_HC_Init+0x2c>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e09d      	b.n	8001128 <HAL_HCD_HC_Init+0x168>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	1a9b      	subs	r3, r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3319      	adds	r3, #25
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	3314      	adds	r3, #20
 8001018:	787a      	ldrb	r2, [r7, #1]
 800101a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	3315      	adds	r3, #21
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	3326      	adds	r3, #38	@ 0x26
 8001040:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001044:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001046:	78fa      	ldrb	r2, [r7, #3]
 8001048:	78bb      	ldrb	r3, [r7, #2]
 800104a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800104e:	b2d8      	uxtb	r0, r3
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3316      	adds	r3, #22
 800105e:	4602      	mov	r2, r0
 8001060:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fbc8 	bl	80017fc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800106c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001070:	2b00      	cmp	r3, #0
 8001072:	da0a      	bge.n	800108a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001074:	78fa      	ldrb	r2, [r7, #3]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	3317      	adds	r3, #23
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e009      	b.n	800109e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800108a:	78fa      	ldrb	r2, [r7, #3]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3317      	adds	r3, #23
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 f85e 	bl	8004164 <USB_GetHostSpeed>
 80010a8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80010aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d10b      	bne.n	80010ca <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80010b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d107      	bne.n	80010ca <HAL_HCD_HC_Init+0x10a>
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d104      	bne.n	80010ca <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2bbc      	cmp	r3, #188	@ 0xbc
 80010c4:	d901      	bls.n	80010ca <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80010c6:	23bc      	movs	r3, #188	@ 0xbc
 80010c8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	3318      	adds	r3, #24
 80010da:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80010de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80010e0:	78fa      	ldrb	r2, [r7, #3]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	b298      	uxth	r0, r3
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	3328      	adds	r3, #40	@ 0x28
 80010f4:	4602      	mov	r2, r0
 80010f6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	787c      	ldrb	r4, [r7, #1]
 8001102:	78ba      	ldrb	r2, [r7, #2]
 8001104:	78f9      	ldrb	r1, [r7, #3]
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4623      	mov	r3, r4
 8001116:	f003 f84d 	bl	80041b4 <USB_HC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}

08001130 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <HAL_HCD_HC_Halt+0x1e>
 800114a:	2302      	movs	r3, #2
 800114c:	e00f      	b.n	800116e <HAL_HCD_HC_Halt+0x3e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	78fa      	ldrb	r2, [r7, #3]
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fbdf 	bl	8004922 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	4608      	mov	r0, r1
 8001182:	4611      	mov	r1, r2
 8001184:	461a      	mov	r2, r3
 8001186:	4603      	mov	r3, r0
 8001188:	70fb      	strb	r3, [r7, #3]
 800118a:	460b      	mov	r3, r1
 800118c:	70bb      	strb	r3, [r7, #2]
 800118e:	4613      	mov	r3, r2
 8001190:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001192:	78fa      	ldrb	r2, [r7, #3]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	3317      	adds	r3, #23
 80011a2:	78ba      	ldrb	r2, [r7, #2]
 80011a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80011a6:	78fa      	ldrb	r2, [r7, #3]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	3326      	adds	r3, #38	@ 0x26
 80011b6:	787a      	ldrb	r2, [r7, #1]
 80011b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80011ba:	7c3b      	ldrb	r3, [r7, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d114      	bne.n	80011ea <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80011c0:	78fa      	ldrb	r2, [r7, #3]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	332a      	adds	r3, #42	@ 0x2a
 80011d0:	2203      	movs	r2, #3
 80011d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80011d4:	78fa      	ldrb	r2, [r7, #3]
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	3319      	adds	r3, #25
 80011e4:	7f3a      	ldrb	r2, [r7, #28]
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	e009      	b.n	80011fe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011ea:	78fa      	ldrb	r2, [r7, #3]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	332a      	adds	r3, #42	@ 0x2a
 80011fa:	2202      	movs	r2, #2
 80011fc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80011fe:	787b      	ldrb	r3, [r7, #1]
 8001200:	2b03      	cmp	r3, #3
 8001202:	f200 8102 	bhi.w	800140a <HAL_HCD_HC_SubmitRequest+0x292>
 8001206:	a201      	add	r2, pc, #4	@ (adr r2, 800120c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	0800121d 	.word	0x0800121d
 8001210:	080013f5 	.word	0x080013f5
 8001214:	080012e1 	.word	0x080012e1
 8001218:	0800136b 	.word	0x0800136b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800121c:	7c3b      	ldrb	r3, [r7, #16]
 800121e:	2b01      	cmp	r3, #1
 8001220:	f040 80f5 	bne.w	800140e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d12d      	bne.n	8001286 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800122a:	8b3b      	ldrh	r3, [r7, #24]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d109      	bne.n	8001244 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001230:	78fa      	ldrb	r2, [r7, #3]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	333d      	adds	r3, #61	@ 0x3d
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001244:	78fa      	ldrb	r2, [r7, #3]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	333d      	adds	r3, #61	@ 0x3d
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10a      	bne.n	8001270 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800125a:	78fa      	ldrb	r2, [r7, #3]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	1a9b      	subs	r3, r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	440b      	add	r3, r1
 8001268:	332a      	adds	r3, #42	@ 0x2a
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800126e:	e0ce      	b.n	800140e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001270:	78fa      	ldrb	r2, [r7, #3]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	332a      	adds	r3, #42	@ 0x2a
 8001280:	2202      	movs	r2, #2
 8001282:	701a      	strb	r2, [r3, #0]
      break;
 8001284:	e0c3      	b.n	800140e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	331a      	adds	r3, #26
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	f040 80b8 	bne.w	800140e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800129e:	78fa      	ldrb	r2, [r7, #3]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	333c      	adds	r3, #60	@ 0x3c
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10a      	bne.n	80012ca <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012b4:	78fa      	ldrb	r2, [r7, #3]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	332a      	adds	r3, #42	@ 0x2a
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
      break;
 80012c8:	e0a1      	b.n	800140e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012ca:	78fa      	ldrb	r2, [r7, #3]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	1a9b      	subs	r3, r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	332a      	adds	r3, #42	@ 0x2a
 80012da:	2202      	movs	r2, #2
 80012dc:	701a      	strb	r2, [r3, #0]
      break;
 80012de:	e096      	b.n	800140e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80012e0:	78bb      	ldrb	r3, [r7, #2]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d120      	bne.n	8001328 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012e6:	78fa      	ldrb	r2, [r7, #3]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	1a9b      	subs	r3, r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	333d      	adds	r3, #61	@ 0x3d
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10a      	bne.n	8001312 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012fc:	78fa      	ldrb	r2, [r7, #3]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	332a      	adds	r3, #42	@ 0x2a
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001310:	e07e      	b.n	8001410 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	1a9b      	subs	r3, r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	440b      	add	r3, r1
 8001320:	332a      	adds	r3, #42	@ 0x2a
 8001322:	2202      	movs	r2, #2
 8001324:	701a      	strb	r2, [r3, #0]
      break;
 8001326:	e073      	b.n	8001410 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001328:	78fa      	ldrb	r2, [r7, #3]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	333c      	adds	r3, #60	@ 0x3c
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10a      	bne.n	8001354 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800133e:	78fa      	ldrb	r2, [r7, #3]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	332a      	adds	r3, #42	@ 0x2a
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
      break;
 8001352:	e05d      	b.n	8001410 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001354:	78fa      	ldrb	r2, [r7, #3]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	332a      	adds	r3, #42	@ 0x2a
 8001364:	2202      	movs	r2, #2
 8001366:	701a      	strb	r2, [r3, #0]
      break;
 8001368:	e052      	b.n	8001410 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800136a:	78bb      	ldrb	r3, [r7, #2]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d120      	bne.n	80013b2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	333d      	adds	r3, #61	@ 0x3d
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10a      	bne.n	800139c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001386:	78fa      	ldrb	r2, [r7, #3]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	332a      	adds	r3, #42	@ 0x2a
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800139a:	e039      	b.n	8001410 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800139c:	78fa      	ldrb	r2, [r7, #3]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	1a9b      	subs	r3, r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	332a      	adds	r3, #42	@ 0x2a
 80013ac:	2202      	movs	r2, #2
 80013ae:	701a      	strb	r2, [r3, #0]
      break;
 80013b0:	e02e      	b.n	8001410 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	1a9b      	subs	r3, r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	333c      	adds	r3, #60	@ 0x3c
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10a      	bne.n	80013de <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013c8:	78fa      	ldrb	r2, [r7, #3]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	1a9b      	subs	r3, r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	332a      	adds	r3, #42	@ 0x2a
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
      break;
 80013dc:	e018      	b.n	8001410 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013de:	78fa      	ldrb	r2, [r7, #3]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	332a      	adds	r3, #42	@ 0x2a
 80013ee:	2202      	movs	r2, #2
 80013f0:	701a      	strb	r2, [r3, #0]
      break;
 80013f2:	e00d      	b.n	8001410 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013f4:	78fa      	ldrb	r2, [r7, #3]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	332a      	adds	r3, #42	@ 0x2a
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
      break;
 8001408:	e002      	b.n	8001410 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800140a:	bf00      	nop
 800140c:	e000      	b.n	8001410 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800140e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001410:	78fa      	ldrb	r2, [r7, #3]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	332c      	adds	r3, #44	@ 0x2c
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	8b39      	ldrh	r1, [r7, #24]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4403      	add	r3, r0
 8001434:	3334      	adds	r3, #52	@ 0x34
 8001436:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001438:	78fa      	ldrb	r2, [r7, #3]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	011b      	lsls	r3, r3, #4
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	334c      	adds	r3, #76	@ 0x4c
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3338      	adds	r3, #56	@ 0x38
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001460:	78fa      	ldrb	r2, [r7, #3]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3315      	adds	r3, #21
 8001470:	78fa      	ldrb	r2, [r7, #3]
 8001472:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001474:	78fa      	ldrb	r2, [r7, #3]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	334d      	adds	r3, #77	@ 0x4d
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	4613      	mov	r3, r2
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	3310      	adds	r3, #16
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	1d19      	adds	r1, r3, #4
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	799b      	ldrb	r3, [r3, #6]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f002 ffb2 	bl	800440c <USB_HC_StartXfer>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop

080014b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fca6 	bl	8003e1c <USB_GetMode>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	f040 80fb 	bne.w	80016ce <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fc69 	bl	8003db4 <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80f1 	beq.w	80016cc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fc60 	bl	8003db4 <USB_ReadInterrupts>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80014fe:	d104      	bne.n	800150a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001508:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fc50 	bl	8003db4 <USB_ReadInterrupts>
 8001514:	4603      	mov	r3, r0
 8001516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800151a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800151e:	d104      	bne.n	800152a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001528:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fc40 	bl	8003db4 <USB_ReadInterrupts>
 8001534:	4603      	mov	r3, r0
 8001536:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800153a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800153e:	d104      	bne.n	800154a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001548:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fc30 	bl	8003db4 <USB_ReadInterrupts>
 8001554:	4603      	mov	r3, r0
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b02      	cmp	r3, #2
 800155c:	d103      	bne.n	8001566 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2202      	movs	r2, #2
 8001564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fc22 	bl	8003db4 <USB_ReadInterrupts>
 8001570:	4603      	mov	r3, r0
 8001572:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800157a:	d120      	bne.n	80015be <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001584:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d113      	bne.n	80015be <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001596:	2110      	movs	r1, #16
 8001598:	6938      	ldr	r0, [r7, #16]
 800159a:	f002 fb15 	bl	8003bc8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800159e:	6938      	ldr	r0, [r7, #16]
 80015a0:	f002 fb44 	bl	8003c2c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7a5b      	ldrb	r3, [r3, #9]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d105      	bne.n	80015b8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 fd36 	bl	8004024 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f005 fcfd 	bl	8006fb8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fbf6 	bl	8003db4 <USB_ReadInterrupts>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d2:	d102      	bne.n	80015da <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f001 fd4d 	bl	8003074 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fbe8 	bl	8003db4 <USB_ReadInterrupts>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d106      	bne.n	80015fc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f005 fcc6 	bl	8006f80 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2208      	movs	r2, #8
 80015fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f002 fbd7 	bl	8003db4 <USB_ReadInterrupts>
 8001606:	4603      	mov	r3, r0
 8001608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001610:	d139      	bne.n	8001686 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f003 f972 	bl	8004900 <USB_HC_ReadInterrupt>
 800161c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e025      	b.n	8001670 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d018      	beq.n	800166a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800164a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800164e:	d106      	bne.n	800165e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4619      	mov	r1, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f905 	bl	8001866 <HCD_HC_IN_IRQHandler>
 800165c:	e005      	b.n	800166a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 ff67 	bl	8002538 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	795b      	ldrb	r3, [r3, #5]
 8001674:	461a      	mov	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	4293      	cmp	r3, r2
 800167a:	d3d3      	bcc.n	8001624 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f002 fb92 	bl	8003db4 <USB_ReadInterrupts>
 8001690:	4603      	mov	r3, r0
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b10      	cmp	r3, #16
 8001698:	d101      	bne.n	800169e <HAL_HCD_IRQHandler+0x1ea>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_HCD_IRQHandler+0x1ec>
 800169e:	2300      	movs	r3, #0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d014      	beq.n	80016ce <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0210 	bic.w	r2, r2, #16
 80016b2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f001 fbfe 	bl	8002eb6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699a      	ldr	r2, [r3, #24]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0210 	orr.w	r2, r2, #16
 80016c8:	619a      	str	r2, [r3, #24]
 80016ca:	e000      	b.n	80016ce <HAL_HCD_IRQHandler+0x21a>
      return;
 80016cc:	bf00      	nop
    }
  }
}
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_HCD_Start+0x16>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e013      	b.n	8001712 <HAL_HCD_Start+0x3e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2101      	movs	r1, #1
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fcfa 	bl	80040f2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f002 f9f2 	bl	8003aec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_HCD_Stop+0x16>
 800172c:	2302      	movs	r3, #2
 800172e:	e00d      	b.n	800174c <HAL_HCD_Stop+0x32>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f003 fa4d 	bl	8004bdc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fc9c 	bl	800409e <USB_ResetPort>
 8001766:	4603      	mov	r3, r0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	334c      	adds	r3, #76	@ 0x4c
 800178c:	781b      	ldrb	r3, [r3, #0]
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	3338      	adds	r3, #56	@ 0x38
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fcde 	bl	8004192 <USB_GetCurrentFrame>
 80017d6:	4603      	mov	r3, r0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fcb9 	bl	8004164 <USB_GetHostSpeed>
 80017f2:	4603      	mov	r3, r0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	331a      	adds	r3, #26
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	331b      	adds	r3, #27
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3325      	adds	r3, #37	@ 0x25
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3324      	adds	r3, #36	@ 0x24
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f002 faa8 	bl	8003dda <USB_ReadChInterrupts>
 800188a:	4603      	mov	r3, r0
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b04      	cmp	r3, #4
 8001892:	d11a      	bne.n	80018ca <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4413      	add	r3, r2
 800189c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018a0:	461a      	mov	r2, r3
 80018a2:	2304      	movs	r3, #4
 80018a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	334d      	adds	r3, #77	@ 0x4d
 80018b6:	2207      	movs	r2, #7
 80018b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f82d 	bl	8004922 <USB_HC_Halt>
 80018c8:	e09e      	b.n	8001a08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fa81 	bl	8003dda <USB_ReadChInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018e2:	d11b      	bne.n	800191c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018f0:	461a      	mov	r2, r3
 80018f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	334d      	adds	r3, #77	@ 0x4d
 8001908:	2208      	movs	r2, #8
 800190a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f003 f804 	bl	8004922 <USB_HC_Halt>
 800191a:	e075      	b.n	8001a08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f002 fa58 	bl	8003dda <USB_ReadChInterrupts>
 800192a:	4603      	mov	r3, r0
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b08      	cmp	r3, #8
 8001932:	d11a      	bne.n	800196a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001940:	461a      	mov	r2, r3
 8001942:	2308      	movs	r3, #8
 8001944:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	334d      	adds	r3, #77	@ 0x4d
 8001956:	2206      	movs	r2, #6
 8001958:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f002 ffdd 	bl	8004922 <USB_HC_Halt>
 8001968:	e04e      	b.n	8001a08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fa31 	bl	8003dda <USB_ReadChInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001982:	d11b      	bne.n	80019bc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001990:	461a      	mov	r2, r3
 8001992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001996:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	334d      	adds	r3, #77	@ 0x4d
 80019a8:	2209      	movs	r2, #9
 80019aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 ffb4 	bl	8004922 <USB_HC_Halt>
 80019ba:	e025      	b.n	8001a08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fa08 	bl	8003dda <USB_ReadChInterrupts>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d0:	2b80      	cmp	r3, #128	@ 0x80
 80019d2:	d119      	bne.n	8001a08 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019e0:	461a      	mov	r2, r3
 80019e2:	2380      	movs	r3, #128	@ 0x80
 80019e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	334d      	adds	r3, #77	@ 0x4d
 80019f6:	2207      	movs	r2, #7
 80019f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 ff8d 	bl	8004922 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 f9e2 	bl	8003dda <USB_ReadChInterrupts>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a20:	d112      	bne.n	8001a48 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 ff79 	bl	8004922 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a42:	6093      	str	r3, [r2, #8]
 8001a44:	f000 bd75 	b.w	8002532 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 f9c2 	bl	8003dda <USB_ReadChInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	f040 8128 	bne.w	8001cb2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2320      	movs	r3, #32
 8001a72:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	331b      	adds	r3, #27
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d119      	bne.n	8001abe <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	331b      	adds	r3, #27
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	0151      	lsls	r1, r2, #5
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	440a      	add	r2, r1
 8001ab4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001abc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	799b      	ldrb	r3, [r3, #6]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d01b      	beq.n	8001afe <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	1a9b      	subs	r3, r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3330      	adds	r3, #48	@ 0x30
 8001ad6:	6819      	ldr	r1, [r3, #0]
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	1ac9      	subs	r1, r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4403      	add	r3, r0
 8001afa:	3338      	adds	r3, #56	@ 0x38
 8001afc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	334d      	adds	r3, #77	@ 0x4d
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	3344      	adds	r3, #68	@ 0x44
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	015a      	lsls	r2, r3, #5
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b32:	461a      	mov	r2, r3
 8001b34:	2301      	movs	r3, #1
 8001b36:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	3326      	adds	r3, #38	@ 0x26
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3326      	adds	r3, #38	@ 0x26
 8001b5e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d110      	bne.n	8001b86 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fed8 	bl	8004922 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2310      	movs	r3, #16
 8001b82:	6093      	str	r3, [r2, #8]
 8001b84:	e03d      	b.n	8001c02 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	3326      	adds	r3, #38	@ 0x26
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d00a      	beq.n	8001bb2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3326      	adds	r3, #38	@ 0x26
 8001bac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d127      	bne.n	8001c02 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	0151      	lsls	r1, r2, #5
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	440a      	add	r2, r1
 8001bc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001bd0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	334c      	adds	r3, #76	@ 0x4c
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	334c      	adds	r3, #76	@ 0x4c
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f005 f9e9 	bl	8006fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	799b      	ldrb	r3, [r3, #6]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d13b      	bne.n	8001c82 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	3338      	adds	r3, #56	@ 0x38
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4403      	add	r3, r0
 8001c2a:	3328      	adds	r3, #40	@ 0x28
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	440b      	add	r3, r1
 8001c30:	1e59      	subs	r1, r3, #1
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4403      	add	r3, r0
 8001c40:	3328      	adds	r3, #40	@ 0x28
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 8470 	beq.w	8002532 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	333c      	adds	r3, #60	@ 0x3c
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	f083 0301 	eor.w	r3, r3, #1
 8001c6a:	b2d8      	uxtb	r0, r3
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	333c      	adds	r3, #60	@ 0x3c
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	f000 bc58 	b.w	8002532 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001c82:	78fa      	ldrb	r2, [r7, #3]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	333c      	adds	r3, #60	@ 0x3c
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	f083 0301 	eor.w	r3, r3, #1
 8001c9a:	b2d8      	uxtb	r0, r3
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	333c      	adds	r3, #60	@ 0x3c
 8001caa:	4602      	mov	r2, r0
 8001cac:	701a      	strb	r2, [r3, #0]
 8001cae:	f000 bc40 	b.w	8002532 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 f88d 	bl	8003dda <USB_ReadChInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d131      	bne.n	8001d2e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2320      	movs	r3, #32
 8001cda:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	331a      	adds	r3, #26
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	f040 841f 	bne.w	8002532 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	331b      	adds	r3, #27
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	334d      	adds	r3, #77	@ 0x4d
 8001d18:	2203      	movs	r2, #3
 8001d1a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 fdfc 	bl	8004922 <USB_HC_Halt>
 8001d2a:	f000 bc02 	b.w	8002532 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 f84f 	bl	8003dda <USB_ReadChInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	f040 8305 	bne.w	8002352 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d54:	461a      	mov	r2, r3
 8001d56:	2302      	movs	r3, #2
 8001d58:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	334d      	adds	r3, #77	@ 0x4d
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d114      	bne.n	8001d9a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	334d      	adds	r3, #77	@ 0x4d
 8001d80:	2202      	movs	r2, #2
 8001d82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	334c      	adds	r3, #76	@ 0x4c
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	e2cc      	b.n	8002334 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	334d      	adds	r3, #77	@ 0x4d
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b06      	cmp	r3, #6
 8001dae:	d114      	bne.n	8001dda <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	334d      	adds	r3, #77	@ 0x4d
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	334c      	adds	r3, #76	@ 0x4c
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e2ac      	b.n	8002334 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	334d      	adds	r3, #77	@ 0x4d
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b07      	cmp	r3, #7
 8001dee:	d00b      	beq.n	8001e08 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	334d      	adds	r3, #77	@ 0x4d
 8001e00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	f040 80a6 	bne.w	8001f54 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	334d      	adds	r3, #77	@ 0x4d
 8001e18:	2202      	movs	r2, #2
 8001e1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	3344      	adds	r3, #68	@ 0x44
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	1c59      	adds	r1, r3, #1
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4403      	add	r3, r0
 8001e3c:	3344      	adds	r3, #68	@ 0x44
 8001e3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3344      	adds	r3, #68	@ 0x44
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d943      	bls.n	8001ede <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	3344      	adds	r3, #68	@ 0x44
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	331a      	adds	r3, #26
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d123      	bne.n	8001ec8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	331b      	adds	r3, #27
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	331c      	adds	r3, #28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	0151      	lsls	r1, r2, #5
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	440a      	add	r2, r1
 8001ebe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	334c      	adds	r3, #76	@ 0x4c
 8001ed8:	2204      	movs	r2, #4
 8001eda:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001edc:	e229      	b.n	8002332 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	334c      	adds	r3, #76	@ 0x4c
 8001eee:	2202      	movs	r2, #2
 8001ef0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	3326      	adds	r3, #38	@ 0x26
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00b      	beq.n	8001f20 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	3326      	adds	r3, #38	@ 0x26
 8001f18:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	f040 8209 	bne.w	8002332 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001f36:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f3e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001f52:	e1ee      	b.n	8002332 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	334d      	adds	r3, #77	@ 0x4d
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b05      	cmp	r3, #5
 8001f68:	f040 80c8 	bne.w	80020fc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	334d      	adds	r3, #77	@ 0x4d
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	331b      	adds	r3, #27
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	f040 81ce 	bne.w	8002334 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3326      	adds	r3, #38	@ 0x26
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d16b      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3348      	adds	r3, #72	@ 0x48
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	1c59      	adds	r1, r3, #1
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4403      	add	r3, r0
 8001fce:	3348      	adds	r3, #72	@ 0x48
 8001fd0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3348      	adds	r3, #72	@ 0x48
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d943      	bls.n	8002070 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3348      	adds	r3, #72	@ 0x48
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	331b      	adds	r3, #27
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3344      	adds	r3, #68	@ 0x44
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d809      	bhi.n	800203a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	331c      	adds	r3, #28
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	0151      	lsls	r1, r2, #5
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	440a      	add	r2, r1
 8002050:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002058:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	334c      	adds	r3, #76	@ 0x4c
 800206a:	2204      	movs	r2, #4
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e014      	b.n	800209a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	334c      	adds	r3, #76	@ 0x4c
 8002080:	2202      	movs	r2, #2
 8002082:	701a      	strb	r2, [r3, #0]
 8002084:	e009      	b.n	800209a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	334c      	adds	r3, #76	@ 0x4c
 8002096:	2202      	movs	r2, #2
 8002098:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	3326      	adds	r3, #38	@ 0x26
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3326      	adds	r3, #38	@ 0x26
 80020c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	f040 8136 	bne.w	8002334 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80020de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80020e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f4:	461a      	mov	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e11b      	b.n	8002334 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	334d      	adds	r3, #77	@ 0x4d
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b03      	cmp	r3, #3
 8002110:	f040 8081 	bne.w	8002216 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	334d      	adds	r3, #77	@ 0x4d
 8002124:	2202      	movs	r2, #2
 8002126:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	331b      	adds	r3, #27
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	f040 80fa 	bne.w	8002334 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	334c      	adds	r3, #76	@ 0x4c
 8002150:	2202      	movs	r2, #2
 8002152:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	0151      	lsls	r1, r2, #5
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	440a      	add	r2, r1
 800216a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800216e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002172:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	0151      	lsls	r1, r2, #5
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	440a      	add	r2, r1
 800218a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800218e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002192:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	0151      	lsls	r1, r2, #5
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	440a      	add	r2, r1
 80021aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021ae:	f023 0320 	bic.w	r3, r3, #32
 80021b2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3326      	adds	r3, #38	@ 0x26
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3326      	adds	r3, #38	@ 0x26
 80021da:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021dc:	2b02      	cmp	r3, #2
 80021de:	f040 80a9 	bne.w	8002334 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80021f8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002200:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	e08e      	b.n	8002334 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	334d      	adds	r3, #77	@ 0x4d
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d143      	bne.n	80022b4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	334d      	adds	r3, #77	@ 0x4d
 800223c:	2202      	movs	r2, #2
 800223e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	334c      	adds	r3, #76	@ 0x4c
 8002250:	2202      	movs	r2, #2
 8002252:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3326      	adds	r3, #38	@ 0x26
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	3326      	adds	r3, #38	@ 0x26
 800227a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800227c:	2b02      	cmp	r3, #2
 800227e:	d159      	bne.n	8002334 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002296:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800229e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ac:	461a      	mov	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e03f      	b.n	8002334 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	334d      	adds	r3, #77	@ 0x4d
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d126      	bne.n	8002318 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	334d      	adds	r3, #77	@ 0x4d
 80022da:	2202      	movs	r2, #2
 80022dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3344      	adds	r3, #68	@ 0x44
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1c59      	adds	r1, r3, #1
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4403      	add	r3, r0
 80022fe:	3344      	adds	r3, #68	@ 0x44
 8002300:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	334c      	adds	r3, #76	@ 0x4c
 8002312:	2204      	movs	r2, #4
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	e00d      	b.n	8002334 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	334d      	adds	r3, #77	@ 0x4d
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b02      	cmp	r3, #2
 800232c:	f000 8100 	beq.w	8002530 <HCD_HC_IN_IRQHandler+0xcca>
 8002330:	e000      	b.n	8002334 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002332:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	334c      	adds	r3, #76	@ 0x4c
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	4619      	mov	r1, r3
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f004 fe42 	bl	8006fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002350:	e0ef      	b.n	8002532 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f001 fd3d 	bl	8003dda <USB_ReadChInterrupts>
 8002360:	4603      	mov	r3, r0
 8002362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002366:	2b40      	cmp	r3, #64	@ 0x40
 8002368:	d12f      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002376:	461a      	mov	r2, r3
 8002378:	2340      	movs	r3, #64	@ 0x40
 800237a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	334d      	adds	r3, #77	@ 0x4d
 800238c:	2205      	movs	r2, #5
 800238e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	331a      	adds	r3, #26
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	3344      	adds	r3, #68	@ 0x44
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f002 faad 	bl	8004922 <USB_HC_Halt>
 80023c8:	e0b3      	b.n	8002532 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fd01 	bl	8003dda <USB_ReadChInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b10      	cmp	r3, #16
 80023e0:	f040 80a7 	bne.w	8002532 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	3326      	adds	r3, #38	@ 0x26
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d11b      	bne.n	8002432 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3344      	adds	r3, #68	@ 0x44
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	334d      	adds	r3, #77	@ 0x4d
 800241e:	2204      	movs	r2, #4
 8002420:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f002 fa79 	bl	8004922 <USB_HC_Halt>
 8002430:	e03f      	b.n	80024b2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3326      	adds	r3, #38	@ 0x26
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3326      	adds	r3, #38	@ 0x26
 8002458:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800245a:	2b02      	cmp	r3, #2
 800245c:	d129      	bne.n	80024b2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	3344      	adds	r3, #68	@ 0x44
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	799b      	ldrb	r3, [r3, #6]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HCD_HC_IN_IRQHandler+0xc2a>
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	331b      	adds	r3, #27
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d110      	bne.n	80024b2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	334d      	adds	r3, #77	@ 0x4d
 80024a0:	2204      	movs	r2, #4
 80024a2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fa38 	bl	8004922 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	331b      	adds	r3, #27
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d129      	bne.n	800251c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	331b      	adds	r3, #27
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	0151      	lsls	r1, r2, #5
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	440a      	add	r2, r1
 80024f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fa:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	0151      	lsls	r1, r2, #5
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	440a      	add	r2, r1
 8002512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002516:	f043 0320 	orr.w	r3, r3, #32
 800251a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002528:	461a      	mov	r2, r3
 800252a:	2310      	movs	r3, #16
 800252c:	6093      	str	r3, [r2, #8]
 800252e:	e000      	b.n	8002532 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002530:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f001 fc3f 	bl	8003dda <USB_ReadChInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b04      	cmp	r3, #4
 8002564:	d11b      	bne.n	800259e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002572:	461a      	mov	r2, r3
 8002574:	2304      	movs	r3, #4
 8002576:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	334d      	adds	r3, #77	@ 0x4d
 8002588:	2207      	movs	r2, #7
 800258a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f002 f9c4 	bl	8004922 <USB_HC_Halt>
 800259a:	f000 bc89 	b.w	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 fc17 	bl	8003dda <USB_ReadChInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 8082 	bne.w	80026bc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	2320      	movs	r3, #32
 80025c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3319      	adds	r3, #25
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d124      	bne.n	800262a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3319      	adds	r3, #25
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	334c      	adds	r3, #76	@ 0x4c
 8002604:	2202      	movs	r2, #2
 8002606:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	334d      	adds	r3, #77	@ 0x4d
 8002618:	2203      	movs	r2, #3
 800261a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f002 f97c 	bl	8004922 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	331a      	adds	r3, #26
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b01      	cmp	r3, #1
 800263e:	f040 8437 	bne.w	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	331b      	adds	r3, #27
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f040 842b 	bne.w	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	3326      	adds	r3, #38	@ 0x26
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d009      	beq.n	8002684 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	331b      	adds	r3, #27
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	334d      	adds	r3, #77	@ 0x4d
 8002694:	2203      	movs	r2, #3
 8002696:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 f93e 	bl	8004922 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	3344      	adds	r3, #68	@ 0x44
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e3f9      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f001 fb88 	bl	8003dda <USB_ReadChInterrupts>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d4:	d111      	bne.n	80026fa <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e2:	461a      	mov	r2, r3
 80026e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 f915 	bl	8004922 <USB_HC_Halt>
 80026f8:	e3da      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f001 fb69 	bl	8003dda <USB_ReadChInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d168      	bne.n	80027e4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3344      	adds	r3, #68	@ 0x44
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f001 fb53 	bl	8003dda <USB_ReadChInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273a:	2b40      	cmp	r3, #64	@ 0x40
 800273c:	d112      	bne.n	8002764 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3319      	adds	r3, #25
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800275e:	461a      	mov	r2, r3
 8002760:	2340      	movs	r3, #64	@ 0x40
 8002762:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	331b      	adds	r3, #27
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d019      	beq.n	80027ae <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	331b      	adds	r3, #27
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	0151      	lsls	r1, r2, #5
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	440a      	add	r2, r1
 80027a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ac:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ba:	461a      	mov	r2, r3
 80027bc:	2301      	movs	r3, #1
 80027be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	334d      	adds	r3, #77	@ 0x4d
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 f8a0 	bl	8004922 <USB_HC_Halt>
 80027e2:	e365      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 faf4 	bl	8003dda <USB_ReadChInterrupts>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f8:	2b40      	cmp	r3, #64	@ 0x40
 80027fa:	d139      	bne.n	8002870 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	334d      	adds	r3, #77	@ 0x4d
 800280c:	2205      	movs	r2, #5
 800280e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	331a      	adds	r3, #26
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3319      	adds	r3, #25
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3344      	adds	r3, #68	@ 0x44
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f002 f863 	bl	8004922 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002868:	461a      	mov	r2, r3
 800286a:	2340      	movs	r3, #64	@ 0x40
 800286c:	6093      	str	r3, [r2, #8]
 800286e:	e31f      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f001 faae 	bl	8003dda <USB_ReadChInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b08      	cmp	r3, #8
 8002886:	d11a      	bne.n	80028be <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	2308      	movs	r3, #8
 8002898:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	334d      	adds	r3, #77	@ 0x4d
 80028aa:	2206      	movs	r2, #6
 80028ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 f833 	bl	8004922 <USB_HC_Halt>
 80028bc:	e2f8      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 fa87 	bl	8003dda <USB_ReadChInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d144      	bne.n	8002960 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	3344      	adds	r3, #68	@ 0x44
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	334d      	adds	r3, #77	@ 0x4d
 80028fa:	2204      	movs	r2, #4
 80028fc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3319      	adds	r3, #25
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d114      	bne.n	800293e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3318      	adds	r3, #24
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3319      	adds	r3, #25
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f001 ffeb 	bl	8004922 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002958:	461a      	mov	r2, r3
 800295a:	2310      	movs	r3, #16
 800295c:	6093      	str	r3, [r2, #8]
 800295e:	e2a7      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fa36 	bl	8003dda <USB_ReadChInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002974:	2b80      	cmp	r3, #128	@ 0x80
 8002976:	f040 8083 	bne.w	8002a80 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	799b      	ldrb	r3, [r3, #6]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d111      	bne.n	80029a6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	334d      	adds	r3, #77	@ 0x4d
 8002992:	2207      	movs	r2, #7
 8002994:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 ffbf 	bl	8004922 <USB_HC_Halt>
 80029a4:	e062      	b.n	8002a6c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	3344      	adds	r3, #68	@ 0x44
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	1c59      	adds	r1, r3, #1
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4403      	add	r3, r0
 80029c6:	3344      	adds	r3, #68	@ 0x44
 80029c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3344      	adds	r3, #68	@ 0x44
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d922      	bls.n	8002a26 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	3344      	adds	r3, #68	@ 0x44
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	334c      	adds	r3, #76	@ 0x4c
 8002a04:	2204      	movs	r2, #4
 8002a06:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	334c      	adds	r3, #76	@ 0x4c
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f004 fad8 	bl	8006fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a24:	e022      	b.n	8002a6c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	334c      	adds	r3, #76	@ 0x4c
 8002a36:	2202      	movs	r2, #2
 8002a38:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a50:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a58:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	6093      	str	r3, [r2, #8]
 8002a7e:	e217      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 f9a6 	bl	8003dda <USB_ReadChInterrupts>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a98:	d11b      	bne.n	8002ad2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	334d      	adds	r3, #77	@ 0x4d
 8002aaa:	2209      	movs	r2, #9
 8002aac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 ff33 	bl	8004922 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ace:	6093      	str	r3, [r2, #8]
 8002ad0:	e1ee      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 f97d 	bl	8003dda <USB_ReadChInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	f040 81df 	bne.w	8002eaa <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2302      	movs	r3, #2
 8002afc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	334d      	adds	r3, #77	@ 0x4d
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 8093 	bne.w	8002c3c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	334d      	adds	r3, #77	@ 0x4d
 8002b26:	2202      	movs	r2, #2
 8002b28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	334c      	adds	r3, #76	@ 0x4c
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3326      	adds	r3, #38	@ 0x26
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d00b      	beq.n	8002b6c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3326      	adds	r3, #38	@ 0x26
 8002b64:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	f040 8190 	bne.w	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	799b      	ldrb	r3, [r3, #6]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d115      	bne.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	333d      	adds	r3, #61	@ 0x3d
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	f083 0301 	eor.w	r3, r3, #1
 8002b8c:	b2d8      	uxtb	r0, r3
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	333d      	adds	r3, #61	@ 0x3d
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	799b      	ldrb	r3, [r3, #6]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	f040 8171 	bne.w	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3334      	adds	r3, #52	@ 0x34
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8165 	beq.w	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3334      	adds	r3, #52	@ 0x34
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4403      	add	r3, r0
 8002be2:	3328      	adds	r3, #40	@ 0x28
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	440b      	add	r3, r1
 8002be8:	1e59      	subs	r1, r3, #1
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4403      	add	r3, r0
 8002bf8:	3328      	adds	r3, #40	@ 0x28
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c00:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 813f 	beq.w	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	333d      	adds	r3, #61	@ 0x3d
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	f083 0301 	eor.w	r3, r3, #1
 8002c26:	b2d8      	uxtb	r0, r3
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	333d      	adds	r3, #61	@ 0x3d
 8002c36:	4602      	mov	r2, r0
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e127      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	334d      	adds	r3, #77	@ 0x4d
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d120      	bne.n	8002c94 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	334d      	adds	r3, #77	@ 0x4d
 8002c62:	2202      	movs	r2, #2
 8002c64:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	331b      	adds	r3, #27
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f040 8107 	bne.w	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	334c      	adds	r3, #76	@ 0x4c
 8002c8e:	2202      	movs	r2, #2
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e0fb      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	334d      	adds	r3, #77	@ 0x4d
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d13a      	bne.n	8002d20 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	334d      	adds	r3, #77	@ 0x4d
 8002cba:	2202      	movs	r2, #2
 8002cbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	334c      	adds	r3, #76	@ 0x4c
 8002cce:	2202      	movs	r2, #2
 8002cd0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	331b      	adds	r3, #27
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 80d1 	bne.w	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	331b      	adds	r3, #27
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	0151      	lsls	r1, r2, #5
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	440a      	add	r2, r1
 8002d14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d1c:	6053      	str	r3, [r2, #4]
 8002d1e:	e0b5      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	334d      	adds	r3, #77	@ 0x4d
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	d114      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	334d      	adds	r3, #77	@ 0x4d
 8002d46:	2202      	movs	r2, #2
 8002d48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	334c      	adds	r3, #76	@ 0x4c
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e095      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	334d      	adds	r3, #77	@ 0x4d
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d114      	bne.n	8002da0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	334d      	adds	r3, #77	@ 0x4d
 8002d86:	2202      	movs	r2, #2
 8002d88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	334c      	adds	r3, #76	@ 0x4c
 8002d9a:	2205      	movs	r2, #5
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e075      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	334d      	adds	r3, #77	@ 0x4d
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b07      	cmp	r3, #7
 8002db4:	d00a      	beq.n	8002dcc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	334d      	adds	r3, #77	@ 0x4d
 8002dc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002dc8:	2b09      	cmp	r3, #9
 8002dca:	d170      	bne.n	8002eae <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	334d      	adds	r3, #77	@ 0x4d
 8002ddc:	2202      	movs	r2, #2
 8002dde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3344      	adds	r3, #68	@ 0x44
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4403      	add	r3, r0
 8002e00:	3344      	adds	r3, #68	@ 0x44
 8002e02:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3344      	adds	r3, #68	@ 0x44
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d914      	bls.n	8002e44 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3344      	adds	r3, #68	@ 0x44
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	334c      	adds	r3, #76	@ 0x4c
 8002e3e:	2204      	movs	r2, #4
 8002e40:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e42:	e022      	b.n	8002e8a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	334c      	adds	r3, #76	@ 0x4c
 8002e54:	2202      	movs	r2, #2
 8002e56:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e6e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e76:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e84:	461a      	mov	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e8a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	334c      	adds	r3, #76	@ 0x4c
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f004 f896 	bl	8006fd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ea8:	e002      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8002eae:	bf00      	nop
  }
}
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b08a      	sub	sp, #40	@ 0x28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	0c5b      	lsrs	r3, r3, #17
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d004      	beq.n	8002efc <HCD_RXQLVL_IRQHandler+0x46>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	f000 80b6 	beq.w	8003066 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002efa:	e0b7      	b.n	800306c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80b3 	beq.w	800306a <HCD_RXQLVL_IRQHandler+0x1b4>
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	332c      	adds	r3, #44	@ 0x2c
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80a7 	beq.w	800306a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	3338      	adds	r3, #56	@ 0x38
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	18d1      	adds	r1, r2, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4403      	add	r3, r0
 8002f40:	3334      	adds	r3, #52	@ 0x34
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4299      	cmp	r1, r3
 8002f46:	f200 8083 	bhi.w	8003050 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	332c      	adds	r3, #44	@ 0x2c
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	b292      	uxth	r2, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	f000 fecd 	bl	8003d04 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	332c      	adds	r3, #44	@ 0x2c
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	18d1      	adds	r1, r2, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4403      	add	r3, r0
 8002f8e:	332c      	adds	r3, #44	@ 0x2c
 8002f90:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3338      	adds	r3, #56	@ 0x38
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	18d1      	adds	r1, r2, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4403      	add	r3, r0
 8002fb6:	3338      	adds	r3, #56	@ 0x38
 8002fb8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	0cdb      	lsrs	r3, r3, #19
 8002fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fce:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3328      	adds	r3, #40	@ 0x28
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d13f      	bne.n	800306a <HCD_RXQLVL_IRQHandler+0x1b4>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d03c      	beq.n	800306a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003006:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800300e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301c:	461a      	mov	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	333c      	adds	r3, #60	@ 0x3c
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2d8      	uxtb	r0, r3
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	333c      	adds	r3, #60	@ 0x3c
 800304a:	4602      	mov	r2, r0
 800304c:	701a      	strb	r2, [r3, #0]
      break;
 800304e:	e00c      	b.n	800306a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	334c      	adds	r3, #76	@ 0x4c
 8003060:	2204      	movs	r2, #4
 8003062:	701a      	strb	r2, [r3, #0]
      break;
 8003064:	e001      	b.n	800306a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800306a:	bf00      	nop
  }
}
 800306c:	bf00      	nop
 800306e:	3728      	adds	r7, #40	@ 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80030a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d10b      	bne.n	80030c4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d102      	bne.n	80030bc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f003 ff70 	bl	8006f9c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d132      	bne.n	8003134 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d126      	bne.n	800312e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7a5b      	ldrb	r3, [r3, #9]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d113      	bne.n	8003110 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80030ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030f2:	d106      	bne.n	8003102 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2102      	movs	r1, #2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 ff92 	bl	8004024 <USB_InitFSLSPClkSel>
 8003100:	e011      	b.n	8003126 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2101      	movs	r1, #1
 8003108:	4618      	mov	r0, r3
 800310a:	f000 ff8b 	bl	8004024 <USB_InitFSLSPClkSel>
 800310e:	e00a      	b.n	8003126 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	79db      	ldrb	r3, [r3, #7]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d106      	bne.n	8003126 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800311e:	461a      	mov	r2, r3
 8003120:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003124:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f003 ff62 	bl	8006ff0 <HAL_HCD_PortEnabled_Callback>
 800312c:	e002      	b.n	8003134 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f003 ff6c 	bl	800700c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b20      	cmp	r3, #32
 800313c:	d103      	bne.n	8003146 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f043 0320 	orr.w	r3, r3, #32
 8003144:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	6013      	str	r3, [r2, #0]
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e267      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d075      	beq.n	8003266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800317a:	4b88      	ldr	r3, [pc, #544]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b04      	cmp	r3, #4
 8003184:	d00c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003186:	4b85      	ldr	r3, [pc, #532]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800318e:	2b08      	cmp	r3, #8
 8003190:	d112      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003192:	4b82      	ldr	r3, [pc, #520]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800319e:	d10b      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	4b7e      	ldr	r3, [pc, #504]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05b      	beq.n	8003264 <HAL_RCC_OscConfig+0x108>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d157      	bne.n	8003264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e242      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x74>
 80031c2:	4b76      	ldr	r3, [pc, #472]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a75      	ldr	r2, [pc, #468]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e01d      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x98>
 80031da:	4b70      	ldr	r3, [pc, #448]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6f      	ldr	r2, [pc, #444]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b6d      	ldr	r3, [pc, #436]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a6c      	ldr	r2, [pc, #432]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031f4:	4b69      	ldr	r3, [pc, #420]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a68      	ldr	r2, [pc, #416]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b66      	ldr	r3, [pc, #408]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a65      	ldr	r2, [pc, #404]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fd fb76 	bl	8000904 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fd fb72 	bl	8000904 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e207      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b5b      	ldr	r3, [pc, #364]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0xc0>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fd fb62 	bl	8000904 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fd fb5e 	bl	8000904 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1f3      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	4b51      	ldr	r3, [pc, #324]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0xe8>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d063      	beq.n	800333a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003272:	4b4a      	ldr	r3, [pc, #296]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327e:	4b47      	ldr	r3, [pc, #284]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003286:	2b08      	cmp	r3, #8
 8003288:	d11c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328a:	4b44      	ldr	r3, [pc, #272]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d116      	bne.n	80032c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	4b41      	ldr	r3, [pc, #260]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_RCC_OscConfig+0x152>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e1c7      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ae:	4b3b      	ldr	r3, [pc, #236]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4937      	ldr	r1, [pc, #220]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	e03a      	b.n	800333a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032cc:	4b34      	ldr	r3, [pc, #208]	@ (80033a0 <HAL_RCC_OscConfig+0x244>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fd fb17 	bl	8000904 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032da:	f7fd fb13 	bl	8000904 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e1a8      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ec:	4b2b      	ldr	r3, [pc, #172]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f8:	4b28      	ldr	r3, [pc, #160]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4925      	ldr	r1, [pc, #148]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	e015      	b.n	800333a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330e:	4b24      	ldr	r3, [pc, #144]	@ (80033a0 <HAL_RCC_OscConfig+0x244>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fd faf6 	bl	8000904 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331c:	f7fd faf2 	bl	8000904 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e187      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332e:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d036      	beq.n	80033b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334e:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <HAL_RCC_OscConfig+0x248>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7fd fad6 	bl	8000904 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800335c:	f7fd fad2 	bl	8000904 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e167      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336e:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_RCC_OscConfig+0x240>)
 8003370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x200>
 800337a:	e01b      	b.n	80033b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337c:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <HAL_RCC_OscConfig+0x248>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7fd fabf 	bl	8000904 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	e00e      	b.n	80033a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338a:	f7fd fabb 	bl	8000904 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d907      	bls.n	80033a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e150      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
 800339c:	40023800 	.word	0x40023800
 80033a0:	42470000 	.word	0x42470000
 80033a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a8:	4b88      	ldr	r3, [pc, #544]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ea      	bne.n	800338a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8097 	beq.w	80034f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c6:	4b81      	ldr	r3, [pc, #516]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	4b7d      	ldr	r3, [pc, #500]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	4a7c      	ldr	r2, [pc, #496]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e2:	4b7a      	ldr	r3, [pc, #488]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f2:	4b77      	ldr	r3, [pc, #476]	@ (80035d0 <HAL_RCC_OscConfig+0x474>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d118      	bne.n	8003430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fe:	4b74      	ldr	r3, [pc, #464]	@ (80035d0 <HAL_RCC_OscConfig+0x474>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a73      	ldr	r2, [pc, #460]	@ (80035d0 <HAL_RCC_OscConfig+0x474>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7fd fa7b 	bl	8000904 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7fd fa77 	bl	8000904 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e10c      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b6a      	ldr	r3, [pc, #424]	@ (80035d0 <HAL_RCC_OscConfig+0x474>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x2ea>
 8003438:	4b64      	ldr	r3, [pc, #400]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343c:	4a63      	ldr	r2, [pc, #396]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6713      	str	r3, [r2, #112]	@ 0x70
 8003444:	e01c      	b.n	8003480 <HAL_RCC_OscConfig+0x324>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b05      	cmp	r3, #5
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x30c>
 800344e:	4b5f      	ldr	r3, [pc, #380]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003452:	4a5e      	ldr	r2, [pc, #376]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6713      	str	r3, [r2, #112]	@ 0x70
 800345a:	4b5c      	ldr	r3, [pc, #368]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345e:	4a5b      	ldr	r2, [pc, #364]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6713      	str	r3, [r2, #112]	@ 0x70
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0x324>
 8003468:	4b58      	ldr	r3, [pc, #352]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346c:	4a57      	ldr	r2, [pc, #348]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	@ 0x70
 8003474:	4b55      	ldr	r3, [pc, #340]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003478:	4a54      	ldr	r2, [pc, #336]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 800347a:	f023 0304 	bic.w	r3, r3, #4
 800347e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d015      	beq.n	80034b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003488:	f7fd fa3c 	bl	8000904 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003490:	f7fd fa38 	bl	8000904 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e0cb      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a6:	4b49      	ldr	r3, [pc, #292]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ee      	beq.n	8003490 <HAL_RCC_OscConfig+0x334>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b4:	f7fd fa26 	bl	8000904 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fd fa22 	bl	8000904 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0b5      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d2:	4b3e      	ldr	r3, [pc, #248]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ee      	bne.n	80034bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b39      	ldr	r3, [pc, #228]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	4a38      	ldr	r2, [pc, #224]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a1 	beq.w	800363c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fa:	4b34      	ldr	r3, [pc, #208]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b08      	cmp	r3, #8
 8003504:	d05c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d141      	bne.n	8003592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b31      	ldr	r3, [pc, #196]	@ (80035d4 <HAL_RCC_OscConfig+0x478>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd f9f6 	bl	8000904 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fd f9f2 	bl	8000904 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e087      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b27      	ldr	r3, [pc, #156]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	019b      	lsls	r3, r3, #6
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	3b01      	subs	r3, #1
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	491b      	ldr	r1, [pc, #108]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003564:	4b1b      	ldr	r3, [pc, #108]	@ (80035d4 <HAL_RCC_OscConfig+0x478>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fd f9cb 	bl	8000904 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fd f9c7 	bl	8000904 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e05c      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003584:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x416>
 8003590:	e054      	b.n	800363c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b10      	ldr	r3, [pc, #64]	@ (80035d4 <HAL_RCC_OscConfig+0x478>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fd f9b4 	bl	8000904 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fd f9b0 	bl	8000904 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e045      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_RCC_OscConfig+0x470>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x444>
 80035be:	e03d      	b.n	800363c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e038      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40007000 	.word	0x40007000
 80035d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_RCC_OscConfig+0x4ec>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d028      	beq.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d121      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d11a      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800360e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003610:	4293      	cmp	r3, r2
 8003612:	d111      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	3b01      	subs	r3, #1
 8003622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800

0800364c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0cc      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003660:	4b68      	ldr	r3, [pc, #416]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d90c      	bls.n	8003688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b65      	ldr	r3, [pc, #404]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b63      	ldr	r3, [pc, #396]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0b8      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d020      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a0:	4b59      	ldr	r3, [pc, #356]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a58      	ldr	r2, [pc, #352]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b8:	4b53      	ldr	r3, [pc, #332]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a52      	ldr	r2, [pc, #328]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c4:	4b50      	ldr	r3, [pc, #320]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	494d      	ldr	r1, [pc, #308]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d044      	beq.n	800376c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	4b47      	ldr	r3, [pc, #284]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d119      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e07f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d003      	beq.n	800370a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003706:	2b03      	cmp	r3, #3
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370a:	4b3f      	ldr	r3, [pc, #252]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e06f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371a:	4b3b      	ldr	r3, [pc, #236]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e067      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372a:	4b37      	ldr	r3, [pc, #220]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4934      	ldr	r1, [pc, #208]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	4313      	orrs	r3, r2
 800373a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800373c:	f7fd f8e2 	bl	8000904 <HAL_GetTick>
 8003740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	e00a      	b.n	800375a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003744:	f7fd f8de 	bl	8000904 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e04f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	4b2b      	ldr	r3, [pc, #172]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 020c 	and.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	429a      	cmp	r2, r3
 800376a:	d1eb      	bne.n	8003744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800376c:	4b25      	ldr	r3, [pc, #148]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d20c      	bcs.n	8003794 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b22      	ldr	r3, [pc, #136]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b20      	ldr	r3, [pc, #128]	@ (8003804 <HAL_RCC_ClockConfig+0x1b8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e032      	b.n	80037fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a0:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4916      	ldr	r1, [pc, #88]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037be:	4b12      	ldr	r3, [pc, #72]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	490e      	ldr	r1, [pc, #56]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037d2:	f000 f821 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 80037d6:	4602      	mov	r2, r0
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	490a      	ldr	r1, [pc, #40]	@ (800380c <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	5ccb      	ldrb	r3, [r1, r3]
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	4a09      	ldr	r2, [pc, #36]	@ (8003810 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037ee:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <HAL_RCC_ClockConfig+0x1c8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fd f842 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023c00 	.word	0x40023c00
 8003808:	40023800 	.word	0x40023800
 800380c:	080076c8 	.word	0x080076c8
 8003810:	20000000 	.word	0x20000000
 8003814:	20000004 	.word	0x20000004

08003818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800381c:	b094      	sub	sp, #80	@ 0x50
 800381e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003830:	4b79      	ldr	r3, [pc, #484]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b08      	cmp	r3, #8
 800383a:	d00d      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x40>
 800383c:	2b08      	cmp	r3, #8
 800383e:	f200 80e1 	bhi.w	8003a04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x34>
 8003846:	2b04      	cmp	r3, #4
 8003848:	d003      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x3a>
 800384a:	e0db      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800384c:	4b73      	ldr	r3, [pc, #460]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x204>)
 800384e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003850:	e0db      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003852:	4b73      	ldr	r3, [pc, #460]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x208>)
 8003854:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003856:	e0d8      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003858:	4b6f      	ldr	r3, [pc, #444]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x200>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003860:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003862:	4b6d      	ldr	r3, [pc, #436]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d063      	beq.n	8003936 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	099b      	lsrs	r3, r3, #6
 8003874:	2200      	movs	r2, #0
 8003876:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003878:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003880:	633b      	str	r3, [r7, #48]	@ 0x30
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	@ 0x34
 8003886:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800388a:	4622      	mov	r2, r4
 800388c:	462b      	mov	r3, r5
 800388e:	f04f 0000 	mov.w	r0, #0
 8003892:	f04f 0100 	mov.w	r1, #0
 8003896:	0159      	lsls	r1, r3, #5
 8003898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800389c:	0150      	lsls	r0, r2, #5
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4621      	mov	r1, r4
 80038a4:	1a51      	subs	r1, r2, r1
 80038a6:	6139      	str	r1, [r7, #16]
 80038a8:	4629      	mov	r1, r5
 80038aa:	eb63 0301 	sbc.w	r3, r3, r1
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038bc:	4659      	mov	r1, fp
 80038be:	018b      	lsls	r3, r1, #6
 80038c0:	4651      	mov	r1, sl
 80038c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038c6:	4651      	mov	r1, sl
 80038c8:	018a      	lsls	r2, r1, #6
 80038ca:	4651      	mov	r1, sl
 80038cc:	ebb2 0801 	subs.w	r8, r2, r1
 80038d0:	4659      	mov	r1, fp
 80038d2:	eb63 0901 	sbc.w	r9, r3, r1
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ea:	4690      	mov	r8, r2
 80038ec:	4699      	mov	r9, r3
 80038ee:	4623      	mov	r3, r4
 80038f0:	eb18 0303 	adds.w	r3, r8, r3
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	462b      	mov	r3, r5
 80038f8:	eb49 0303 	adc.w	r3, r9, r3
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800390a:	4629      	mov	r1, r5
 800390c:	024b      	lsls	r3, r1, #9
 800390e:	4621      	mov	r1, r4
 8003910:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003914:	4621      	mov	r1, r4
 8003916:	024a      	lsls	r2, r1, #9
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800391e:	2200      	movs	r2, #0
 8003920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003922:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003924:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003928:	f7fc fc4e 	bl	80001c8 <__aeabi_uldivmod>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4613      	mov	r3, r2
 8003932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003934:	e058      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003936:	4b38      	ldr	r3, [pc, #224]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	099b      	lsrs	r3, r3, #6
 800393c:	2200      	movs	r2, #0
 800393e:	4618      	mov	r0, r3
 8003940:	4611      	mov	r1, r2
 8003942:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003946:	623b      	str	r3, [r7, #32]
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
 800394c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003950:	4642      	mov	r2, r8
 8003952:	464b      	mov	r3, r9
 8003954:	f04f 0000 	mov.w	r0, #0
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	0159      	lsls	r1, r3, #5
 800395e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003962:	0150      	lsls	r0, r2, #5
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4641      	mov	r1, r8
 800396a:	ebb2 0a01 	subs.w	sl, r2, r1
 800396e:	4649      	mov	r1, r9
 8003970:	eb63 0b01 	sbc.w	fp, r3, r1
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003980:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003984:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003988:	ebb2 040a 	subs.w	r4, r2, sl
 800398c:	eb63 050b 	sbc.w	r5, r3, fp
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	00eb      	lsls	r3, r5, #3
 800399a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800399e:	00e2      	lsls	r2, r4, #3
 80039a0:	4614      	mov	r4, r2
 80039a2:	461d      	mov	r5, r3
 80039a4:	4643      	mov	r3, r8
 80039a6:	18e3      	adds	r3, r4, r3
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	464b      	mov	r3, r9
 80039ac:	eb45 0303 	adc.w	r3, r5, r3
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039be:	4629      	mov	r1, r5
 80039c0:	028b      	lsls	r3, r1, #10
 80039c2:	4621      	mov	r1, r4
 80039c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039c8:	4621      	mov	r1, r4
 80039ca:	028a      	lsls	r2, r1, #10
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d2:	2200      	movs	r2, #0
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	61fa      	str	r2, [r7, #28]
 80039d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039dc:	f7fc fbf4 	bl	80001c8 <__aeabi_uldivmod>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4613      	mov	r3, r2
 80039e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	3301      	adds	r3, #1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a02:	e002      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a04:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3750      	adds	r7, #80	@ 0x50
 8003a10:	46bd      	mov	sp, r7
 8003a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	00f42400 	.word	0x00f42400
 8003a20:	007a1200 	.word	0x007a1200

08003a24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a24:	b084      	sub	sp, #16
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	f107 001c 	add.w	r0, r7, #28
 8003a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d123      	bne.n	8003a86 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003a52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d105      	bne.n	8003a7a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9dc 	bl	8003e38 <USB_CoreReset>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e01b      	b.n	8003abe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9d0 	bl	8003e38 <USB_CoreReset>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ab0:	e005      	b.n	8003abe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003abe:	7fbb      	ldrb	r3, [r7, #30]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10b      	bne.n	8003adc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f043 0206 	orr.w	r2, r3, #6
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f043 0220 	orr.w	r2, r3, #32
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ae8:	b004      	add	sp, #16
 8003aea:	4770      	bx	lr

08003aec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 0201 	bic.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d115      	bne.n	8003b7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b5e:	200a      	movs	r0, #10
 8003b60:	f7fc fedc 	bl	800091c <HAL_Delay>
      ms += 10U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	330a      	adds	r3, #10
 8003b68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f956 	bl	8003e1c <USB_GetMode>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d01e      	beq.n	8003bb4 <USB_SetCurrentMode+0x84>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2bc7      	cmp	r3, #199	@ 0xc7
 8003b7a:	d9f0      	bls.n	8003b5e <USB_SetCurrentMode+0x2e>
 8003b7c:	e01a      	b.n	8003bb4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d115      	bne.n	8003bb0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b90:	200a      	movs	r0, #10
 8003b92:	f7fc fec3 	bl	800091c <HAL_Delay>
      ms += 10U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	330a      	adds	r3, #10
 8003b9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f93d 	bl	8003e1c <USB_GetMode>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <USB_SetCurrentMode+0x84>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2bc7      	cmp	r3, #199	@ 0xc7
 8003bac:	d9f0      	bls.n	8003b90 <USB_SetCurrentMode+0x60>
 8003bae:	e001      	b.n	8003bb4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e005      	b.n	8003bc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2bc8      	cmp	r3, #200	@ 0xc8
 8003bb8:	d101      	bne.n	8003bbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003be2:	d901      	bls.n	8003be8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e01b      	b.n	8003c20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	daf2      	bge.n	8003bd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	019b      	lsls	r3, r3, #6
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c0c:	d901      	bls.n	8003c12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e006      	b.n	8003c20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d0f0      	beq.n	8003c00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c44:	d901      	bls.n	8003c4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e018      	b.n	8003c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	daf2      	bge.n	8003c38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c68:	d901      	bls.n	8003c6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e006      	b.n	8003c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d0f0      	beq.n	8003c5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	@ 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4611      	mov	r1, r2
 8003c94:	461a      	mov	r2, r3
 8003c96:	460b      	mov	r3, r1
 8003c98:	71fb      	strb	r3, [r7, #7]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d123      	bne.n	8003cf6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003cae:	88bb      	ldrh	r3, [r7, #4]
 8003cb0:	3303      	adds	r3, #3
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	e018      	b.n	8003cee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	031a      	lsls	r2, r3, #12
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc8:	461a      	mov	r2, r3
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d3e2      	bcc.n	8003cbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3724      	adds	r7, #36	@ 0x24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b08b      	sub	sp, #44	@ 0x2c
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	623b      	str	r3, [r7, #32]
 8003d2e:	e014      	b.n	8003d5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	3301      	adds	r3, #1
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	3301      	adds	r3, #1
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	3301      	adds	r3, #1
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	3301      	adds	r3, #1
 8003d58:	623b      	str	r3, [r7, #32]
 8003d5a:	6a3a      	ldr	r2, [r7, #32]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d3e6      	bcc.n	8003d30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d62:	8bfb      	ldrh	r3, [r7, #30]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01e      	beq.n	8003da6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d72:	461a      	mov	r2, r3
 8003d74:	f107 0310 	add.w	r3, r7, #16
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	701a      	strb	r2, [r3, #0]
      i++;
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	3301      	adds	r3, #1
 8003d92:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	3301      	adds	r3, #1
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003d9a:	8bfb      	ldrh	r3, [r7, #30]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003da0:	8bfb      	ldrh	r3, [r7, #30]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ea      	bne.n	8003d7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	372c      	adds	r7, #44	@ 0x2c
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	460b      	mov	r3, r1
 8003de4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	f003 0301 	and.w	r3, r3, #1
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3301      	adds	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e50:	d901      	bls.n	8003e56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e01b      	b.n	8003e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	daf2      	bge.n	8003e44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e7a:	d901      	bls.n	8003e80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e006      	b.n	8003e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d0f0      	beq.n	8003e6e <USB_CoreReset+0x36>

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ede:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d119      	bne.n	8003f26 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10a      	bne.n	8003f10 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e014      	b.n	8003f3a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f1e:	f023 0304 	bic.w	r3, r3, #4
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	e009      	b.n	8003f3a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f34:	f023 0304 	bic.w	r3, r3, #4
 8003f38:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f3a:	2110      	movs	r1, #16
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fe43 	bl	8003bc8 <USB_FlushTxFifo>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff fe6d 	bl	8003c2c <USB_FlushRxFifo>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	e015      	b.n	8003f8e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f74:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f82:	461a      	mov	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f92:	461a      	mov	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d3e3      	bcc.n	8003f62 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fa6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a18      	ldr	r2, [pc, #96]	@ (800400c <USB_HostInit+0x170>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d10b      	bne.n	8003fc8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a15      	ldr	r2, [pc, #84]	@ (8004010 <USB_HostInit+0x174>)
 8003fbc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <USB_HostInit+0x178>)
 8003fc2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003fc6:	e009      	b.n	8003fdc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2280      	movs	r2, #128	@ 0x80
 8003fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a11      	ldr	r2, [pc, #68]	@ (8004018 <USB_HostInit+0x17c>)
 8003fd2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a11      	ldr	r2, [pc, #68]	@ (800401c <USB_HostInit+0x180>)
 8003fd8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f043 0210 	orr.w	r2, r3, #16
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <USB_HostInit+0x184>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004008:	b004      	add	sp, #16
 800400a:	4770      	bx	lr
 800400c:	40040000 	.word	0x40040000
 8004010:	01000200 	.word	0x01000200
 8004014:	00e00300 	.word	0x00e00300
 8004018:	00600080 	.word	0x00600080
 800401c:	004000e0 	.word	0x004000e0
 8004020:	a3200008 	.word	0xa3200008

08004024 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800406c:	461a      	mov	r2, r3
 800406e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004072:	6053      	str	r3, [r2, #4]
 8004074:	e00c      	b.n	8004090 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d107      	bne.n	800408c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004082:	461a      	mov	r2, r3
 8004084:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004088:	6053      	str	r3, [r2, #4]
 800408a:	e001      	b.n	8004090 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80040be:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80040c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80040ce:	2064      	movs	r0, #100	@ 0x64
 80040d0:	f7fc fc24 	bl	800091c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80040dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040e0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80040e2:	200a      	movs	r0, #10
 80040e4:	f7fc fc1a 	bl	800091c <HAL_Delay>

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004116:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <USB_DriveVbus+0x44>
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d106      	bne.n	8004136 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004130:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004134:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800413c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004140:	d109      	bne.n	8004156 <USB_DriveVbus+0x64>
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004150:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004154:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	0c5b      	lsrs	r3, r3, #17
 8004182:	f003 0303 	and.w	r3, r3, #3
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	b29b      	uxth	r3, r3
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	4608      	mov	r0, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	461a      	mov	r2, r3
 80041c2:	4603      	mov	r3, r0
 80041c4:	70fb      	strb	r3, [r7, #3]
 80041c6:	460b      	mov	r3, r1
 80041c8:	70bb      	strb	r3, [r7, #2]
 80041ca:	4613      	mov	r3, r2
 80041cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e2:	461a      	mov	r2, r3
 80041e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041e8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80041ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d87c      	bhi.n	80042ec <USB_HC_Init+0x138>
 80041f2:	a201      	add	r2, pc, #4	@ (adr r2, 80041f8 <USB_HC_Init+0x44>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	08004209 	.word	0x08004209
 80041fc:	080042af 	.word	0x080042af
 8004200:	08004209 	.word	0x08004209
 8004204:	08004271 	.word	0x08004271
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	f240 439d 	movw	r3, #1181	@ 0x49d
 800421a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800421c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004220:	2b00      	cmp	r3, #0
 8004222:	da10      	bge.n	8004246 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	440a      	add	r2, r1
 800423a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800423e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004242:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8004244:	e055      	b.n	80042f2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a6f      	ldr	r2, [pc, #444]	@ (8004408 <USB_HC_Init+0x254>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d151      	bne.n	80042f2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	0151      	lsls	r1, r2, #5
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	440a      	add	r2, r1
 8004264:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004268:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800426c:	60d3      	str	r3, [r2, #12]
      break;
 800426e:	e040      	b.n	80042f2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800427c:	461a      	mov	r2, r3
 800427e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8004282:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004284:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004288:	2b00      	cmp	r3, #0
 800428a:	da34      	bge.n	80042f6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80042ac:	e023      	b.n	80042f6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ba:	461a      	mov	r2, r3
 80042bc:	f240 2325 	movw	r3, #549	@ 0x225
 80042c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80042c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	da17      	bge.n	80042fa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	0151      	lsls	r1, r2, #5
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	440a      	add	r2, r1
 80042e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042e4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80042e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80042ea:	e006      	b.n	80042fa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	77fb      	strb	r3, [r7, #31]
      break;
 80042f0:	e004      	b.n	80042fc <USB_HC_Init+0x148>
      break;
 80042f2:	bf00      	nop
 80042f4:	e002      	b.n	80042fc <USB_HC_Init+0x148>
      break;
 80042f6:	bf00      	nop
 80042f8:	e000      	b.n	80042fc <USB_HC_Init+0x148>
      break;
 80042fa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004308:	461a      	mov	r2, r3
 800430a:	2300      	movs	r3, #0
 800430c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	440a      	add	r2, r1
 8004324:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	2101      	movs	r1, #1
 800433e:	fa01 f303 	lsl.w	r3, r1, r3
 8004342:	6939      	ldr	r1, [r7, #16]
 8004344:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004348:	4313      	orrs	r3, r2
 800434a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004358:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800435c:	2b00      	cmp	r3, #0
 800435e:	da03      	bge.n	8004368 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004360:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e001      	b.n	800436c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fef9 	bl	8004164 <USB_GetHostSpeed>
 8004372:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004374:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004378:	2b02      	cmp	r3, #2
 800437a:	d106      	bne.n	800438a <USB_HC_Init+0x1d6>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d003      	beq.n	800438a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004382:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	e001      	b.n	800438e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800438e:	787b      	ldrb	r3, [r7, #1]
 8004390:	059b      	lsls	r3, r3, #22
 8004392:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004396:	78bb      	ldrb	r3, [r7, #2]
 8004398:	02db      	lsls	r3, r3, #11
 800439a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800439e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80043a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043a4:	049b      	lsls	r3, r3, #18
 80043a6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80043aa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80043ac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80043ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80043b2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	0151      	lsls	r1, r2, #5
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	440a      	add	r2, r1
 80043c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80043c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80043cc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80043ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d003      	beq.n	80043de <USB_HC_Init+0x22a>
 80043d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d10f      	bne.n	80043fe <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043fc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80043fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40040000 	.word	0x40040000

0800440c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	@ 0x30
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8004424:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004428:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a5d      	ldr	r2, [pc, #372]	@ (80045a4 <USB_HC_StartXfer+0x198>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d12f      	bne.n	8004492 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d11c      	bne.n	8004472 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	7c9b      	ldrb	r3, [r3, #18]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <USB_HC_StartXfer+0x3c>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	7c9b      	ldrb	r3, [r3, #18]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d124      	bne.n	8004492 <USB_HC_StartXfer+0x86>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	799b      	ldrb	r3, [r3, #6]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d120      	bne.n	8004492 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	0151      	lsls	r1, r2, #5
 8004462:	6a3a      	ldr	r2, [r7, #32]
 8004464:	440a      	add	r2, r1
 8004466:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800446a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446e:	60d3      	str	r3, [r2, #12]
 8004470:	e00f      	b.n	8004492 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	791b      	ldrb	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10b      	bne.n	8004492 <USB_HC_StartXfer+0x86>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	795b      	ldrb	r3, [r3, #5]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d107      	bne.n	8004492 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	4619      	mov	r1, r3
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fb6b 	bl	8004b64 <USB_DoPing>
        return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e232      	b.n	80048f8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	799b      	ldrb	r3, [r3, #6]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d158      	bne.n	800454c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800449a:	2301      	movs	r3, #1
 800449c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	78db      	ldrb	r3, [r3, #3]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80044a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	8a92      	ldrh	r2, [r2, #20]
 80044ac:	fb03 f202 	mul.w	r2, r3, r2
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	61da      	str	r2, [r3, #28]
 80044b4:	e07c      	b.n	80045b0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	7c9b      	ldrb	r3, [r3, #18]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d130      	bne.n	8004520 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	2bbc      	cmp	r3, #188	@ 0xbc
 80044c4:	d918      	bls.n	80044f8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	8a9b      	ldrh	r3, [r3, #20]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d003      	beq.n	80044e8 <USB_HC_StartXfer+0xdc>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d103      	bne.n	80044f0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2202      	movs	r2, #2
 80044ec:	60da      	str	r2, [r3, #12]
 80044ee:	e05f      	b.n	80045b0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2201      	movs	r2, #1
 80044f4:	60da      	str	r2, [r3, #12]
 80044f6:	e05b      	b.n	80045b0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d007      	beq.n	8004518 <USB_HC_StartXfer+0x10c>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d003      	beq.n	8004518 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2204      	movs	r2, #4
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	e04b      	b.n	80045b0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2203      	movs	r2, #3
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	e047      	b.n	80045b0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10d      	bne.n	8004542 <USB_HC_StartXfer+0x136>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	8a92      	ldrh	r2, [r2, #20]
 800452e:	4293      	cmp	r3, r2
 8004530:	d907      	bls.n	8004542 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004532:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	8a92      	ldrh	r2, [r2, #20]
 8004538:	fb03 f202 	mul.w	r2, r3, r2
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	61da      	str	r2, [r3, #28]
 8004540:	e036      	b.n	80045b0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6a1a      	ldr	r2, [r3, #32]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61da      	str	r2, [r3, #28]
 800454a:	e031      	b.n	80045b0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d018      	beq.n	8004586 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	8a92      	ldrh	r2, [r2, #20]
 800455c:	4413      	add	r3, r2
 800455e:	3b01      	subs	r3, #1
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	8a92      	ldrh	r2, [r2, #20]
 8004564:	fbb3 f3f2 	udiv	r3, r3, r2
 8004568:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800456a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800456c:	8b7b      	ldrh	r3, [r7, #26]
 800456e:	429a      	cmp	r2, r3
 8004570:	d90b      	bls.n	800458a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8004572:	8b7b      	ldrh	r3, [r7, #26]
 8004574:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004576:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	8a92      	ldrh	r2, [r2, #20]
 800457c:	fb03 f202 	mul.w	r2, r3, r2
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	61da      	str	r2, [r3, #28]
 8004584:	e001      	b.n	800458a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8004586:	2301      	movs	r3, #1
 8004588:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	78db      	ldrb	r3, [r3, #3]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004592:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	8a92      	ldrh	r2, [r2, #20]
 8004598:	fb03 f202 	mul.w	r2, r3, r2
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	61da      	str	r2, [r3, #28]
 80045a0:	e006      	b.n	80045b0 <USB_HC_StartXfer+0x1a4>
 80045a2:	bf00      	nop
 80045a4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	6a1a      	ldr	r2, [r3, #32]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80045b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80045ba:	04d9      	lsls	r1, r3, #19
 80045bc:	4ba3      	ldr	r3, [pc, #652]	@ (800484c <USB_HC_StartXfer+0x440>)
 80045be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80045c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	7d9b      	ldrb	r3, [r3, #22]
 80045c6:	075b      	lsls	r3, r3, #29
 80045c8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80045cc:	69f9      	ldr	r1, [r7, #28]
 80045ce:	0148      	lsls	r0, r1, #5
 80045d0:	6a39      	ldr	r1, [r7, #32]
 80045d2:	4401      	add	r1, r0
 80045d4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80045d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80045da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045f2:	460a      	mov	r2, r1
 80045f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	bf0c      	ite	eq
 8004606:	2301      	moveq	r3, #1
 8004608:	2300      	movne	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	6a3a      	ldr	r2, [r7, #32]
 8004622:	440a      	add	r2, r1
 8004624:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004628:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800462c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	7e7b      	ldrb	r3, [r7, #25]
 800463e:	075b      	lsls	r3, r3, #29
 8004640:	69f9      	ldr	r1, [r7, #28]
 8004642:	0148      	lsls	r0, r1, #5
 8004644:	6a39      	ldr	r1, [r7, #32]
 8004646:	4401      	add	r1, r0
 8004648:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	799b      	ldrb	r3, [r3, #6]
 8004654:	2b01      	cmp	r3, #1
 8004656:	f040 80c3 	bne.w	80047e0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	7c5b      	ldrb	r3, [r3, #17]
 800465e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8004664:	4313      	orrs	r3, r2
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	6a3a      	ldr	r2, [r7, #32]
 800466c:	440a      	add	r2, r1
 800466e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8004672:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8004676:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	4413      	add	r3, r2
 8004680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	6a3a      	ldr	r2, [r7, #32]
 800468c:	440a      	add	r2, r1
 800468e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004692:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004696:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	79db      	ldrb	r3, [r3, #7]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d123      	bne.n	80046e8 <USB_HC_StartXfer+0x2dc>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	78db      	ldrb	r3, [r3, #3]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d11f      	bne.n	80046e8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	6a3a      	ldr	r2, [r7, #32]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	6a3a      	ldr	r2, [r7, #32]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046e6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	7c9b      	ldrb	r3, [r3, #18]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d003      	beq.n	80046f8 <USB_HC_StartXfer+0x2ec>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	7c9b      	ldrb	r3, [r3, #18]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d117      	bne.n	8004728 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d113      	bne.n	8004728 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	78db      	ldrb	r3, [r3, #3]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d10f      	bne.n	8004728 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	4413      	add	r3, r2
 8004710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	6a3a      	ldr	r2, [r7, #32]
 800471c:	440a      	add	r2, r1
 800471e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004726:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	7c9b      	ldrb	r3, [r3, #18]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d162      	bne.n	80047f6 <USB_HC_StartXfer+0x3ea>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	78db      	ldrb	r3, [r3, #3]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d15e      	bne.n	80047f6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	3b01      	subs	r3, #1
 800473e:	2b03      	cmp	r3, #3
 8004740:	d858      	bhi.n	80047f4 <USB_HC_StartXfer+0x3e8>
 8004742:	a201      	add	r2, pc, #4	@ (adr r2, 8004748 <USB_HC_StartXfer+0x33c>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	08004759 	.word	0x08004759
 800474c:	0800477b 	.word	0x0800477b
 8004750:	0800479d 	.word	0x0800479d
 8004754:	080047bf 	.word	0x080047bf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	4413      	add	r3, r2
 8004760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	6a3a      	ldr	r2, [r7, #32]
 800476c:	440a      	add	r2, r1
 800476e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004776:	6053      	str	r3, [r2, #4]
          break;
 8004778:	e03d      	b.n	80047f6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	4413      	add	r3, r2
 8004782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	0151      	lsls	r1, r2, #5
 800478c:	6a3a      	ldr	r2, [r7, #32]
 800478e:	440a      	add	r2, r1
 8004790:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004794:	f043 030e 	orr.w	r3, r3, #14
 8004798:	6053      	str	r3, [r2, #4]
          break;
 800479a:	e02c      	b.n	80047f6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ba:	6053      	str	r3, [r2, #4]
          break;
 80047bc:	e01b      	b.n	80047f6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	6a3a      	ldr	r2, [r7, #32]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047dc:	6053      	str	r3, [r2, #4]
          break;
 80047de:	e00a      	b.n	80047f6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ec:	461a      	mov	r2, r3
 80047ee:	2300      	movs	r3, #0
 80047f0:	6053      	str	r3, [r2, #4]
 80047f2:	e000      	b.n	80047f6 <USB_HC_StartXfer+0x3ea>
          break;
 80047f4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800480c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	78db      	ldrb	r3, [r3, #3]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	e003      	b.n	8004828 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004826:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800482e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800483c:	461a      	mov	r2, r3
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e055      	b.n	80048f8 <USB_HC_StartXfer+0x4ec>
 800484c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	78db      	ldrb	r3, [r3, #3]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d14e      	bne.n	80048f6 <USB_HC_StartXfer+0x4ea>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d04a      	beq.n	80048f6 <USB_HC_StartXfer+0x4ea>
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	79db      	ldrb	r3, [r3, #7]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d146      	bne.n	80048f6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	7c9b      	ldrb	r3, [r3, #18]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d831      	bhi.n	80048d4 <USB_HC_StartXfer+0x4c8>
 8004870:	a201      	add	r2, pc, #4	@ (adr r2, 8004878 <USB_HC_StartXfer+0x46c>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	08004889 	.word	0x08004889
 800487c:	080048ad 	.word	0x080048ad
 8004880:	08004889 	.word	0x08004889
 8004884:	080048ad 	.word	0x080048ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	3303      	adds	r3, #3
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004892:	8afa      	ldrh	r2, [r7, #22]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	b29b      	uxth	r3, r3
 800489a:	429a      	cmp	r2, r3
 800489c:	d91c      	bls.n	80048d8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f043 0220 	orr.w	r2, r3, #32
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80048aa:	e015      	b.n	80048d8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	3303      	adds	r3, #3
 80048b2:	089b      	lsrs	r3, r3, #2
 80048b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80048b6:	8afa      	ldrh	r2, [r7, #22]
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d90a      	bls.n	80048dc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80048d2:	e003      	b.n	80048dc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80048d4:	bf00      	nop
 80048d6:	e002      	b.n	80048de <USB_HC_StartXfer+0x4d2>
        break;
 80048d8:	bf00      	nop
 80048da:	e000      	b.n	80048de <USB_HC_StartXfer+0x4d2>
        break;
 80048dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6999      	ldr	r1, [r3, #24]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	785a      	ldrb	r2, [r3, #1]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2000      	movs	r0, #0
 80048ee:	9000      	str	r0, [sp, #0]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7ff f9c9 	bl	8003c88 <USB_WritePacket>
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3728      	adds	r7, #40	@ 0x28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	b29b      	uxth	r3, r3
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004922:	b480      	push	{r7}
 8004924:	b089      	sub	sp, #36	@ 0x24
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	460b      	mov	r3, r1
 800492c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004932:	78fb      	ldrb	r3, [r7, #3]
 8004934:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	0c9b      	lsrs	r3, r3, #18
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	4413      	add	r3, r2
 8004958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	0fdb      	lsrs	r3, r3, #31
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	0fdb      	lsrs	r3, r3, #31
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b20      	cmp	r3, #32
 8004986:	d10d      	bne.n	80049a4 <USB_HC_Halt+0x82>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <USB_HC_Halt+0x82>
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d002      	beq.n	80049a0 <USB_HC_Halt+0x7e>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d101      	bne.n	80049a4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e0d8      	b.n	8004b56 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <USB_HC_Halt+0x8e>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d173      	bne.n	8004a98 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049ce:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d14a      	bne.n	8004a72 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d133      	bne.n	8004a50 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a06:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a26:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a34:	d82e      	bhi.n	8004a94 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a4c:	d0ec      	beq.n	8004a28 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a4e:	e081      	b.n	8004b54 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a6e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a70:	e070      	b.n	8004b54 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a90:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a92:	e05f      	b.n	8004b54 <USB_HC_Halt+0x232>
            break;
 8004a94:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a96:	e05d      	b.n	8004b54 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ab2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ab6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d133      	bne.n	8004b30 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ae2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ae6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b06:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b14:	d81d      	bhi.n	8004b52 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b2c:	d0ec      	beq.n	8004b08 <USB_HC_Halt+0x1e6>
 8004b2e:	e011      	b.n	8004b54 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	e000      	b.n	8004b54 <USB_HC_Halt+0x232>
          break;
 8004b52:	bf00      	nop
    }
  }

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3724      	adds	r7, #36	@ 0x24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	04da      	lsls	r2, r3, #19
 8004b80:	4b15      	ldr	r3, [pc, #84]	@ (8004bd8 <USB_DoPing+0x74>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b94:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bb4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	1ff80000 	.word	0x1ff80000

08004bdc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fe ff8c 	bl	8003b0e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bf6:	2110      	movs	r1, #16
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7fe ffe5 	bl	8003bc8 <USB_FlushTxFifo>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff f80f 	bl	8003c2c <USB_FlushRxFifo>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	e01f      	b.n	8004c5e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c52:	461a      	mov	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b0f      	cmp	r3, #15
 8004c62:	d9dc      	bls.n	8004c1e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	e034      	b.n	8004cd4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c80:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004cb0:	d80c      	bhi.n	8004ccc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cc8:	d0ec      	beq.n	8004ca4 <USB_StopHost+0xc8>
 8004cca:	e000      	b.n	8004cce <USB_StopHost+0xf2>
        break;
 8004ccc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	d9c7      	bls.n	8004c6a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ce6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fe fefb 	bl	8003aec <USB_EnableGlobalInt>

  return ret;
 8004cf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004d00:	b590      	push	{r4, r7, lr}
 8004d02:	b089      	sub	sp, #36	@ 0x24
 8004d04:	af04      	add	r7, sp, #16
 8004d06:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004d08:	2301      	movs	r3, #1
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	2102      	movs	r1, #2
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fc85 	bl	800561e <USBH_FindInterface>
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2bff      	cmp	r3, #255	@ 0xff
 8004d1c:	d002      	beq.n	8004d24 <USBH_CDC_InterfaceInit+0x24>
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d901      	bls.n	8004d28 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004d24:	2302      	movs	r3, #2
 8004d26:	e13d      	b.n	8004fa4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fc5a 	bl	80055e6 <USBH_SelectInterface>
 8004d32:	4603      	mov	r3, r0
 8004d34:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004d36:	7bbb      	ldrb	r3, [r7, #14]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e131      	b.n	8004fa4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8004d46:	2050      	movs	r0, #80	@ 0x50
 8004d48:	f002 fb64 	bl	8007414 <malloc>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8004d60:	2302      	movs	r3, #2
 8004d62:	e11f      	b.n	8004fa4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004d64:	2250      	movs	r2, #80	@ 0x50
 8004d66:	2100      	movs	r1, #0
 8004d68:	68b8      	ldr	r0, [r7, #8]
 8004d6a:	f002 fc11 	bl	8007590 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	211a      	movs	r1, #26
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	b25b      	sxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	da15      	bge.n	8004db2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	211a      	movs	r1, #26
 8004d8c:	fb01 f303 	mul.w	r3, r1, r3
 8004d90:	4413      	add	r3, r2
 8004d92:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	211a      	movs	r1, #26
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004dac:	881a      	ldrh	r2, [r3, #0]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f001 ffbe 	bl	8006d3a <USBH_AllocPipe>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	7819      	ldrb	r1, [r3, #0]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	7858      	ldrb	r0, [r3, #1]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	8952      	ldrh	r2, [r2, #10]
 8004dde:	9202      	str	r2, [sp, #8]
 8004de0:	2203      	movs	r2, #3
 8004de2:	9201      	str	r2, [sp, #4]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4623      	mov	r3, r4
 8004de8:	4602      	mov	r2, r0
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 ff76 	bl	8006cdc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2200      	movs	r2, #0
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f002 fa85 	bl	8007308 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2200      	movs	r2, #0
 8004e02:	210a      	movs	r1, #10
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fc0a 	bl	800561e <USBH_FindInterface>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2bff      	cmp	r3, #255	@ 0xff
 8004e12:	d002      	beq.n	8004e1a <USBH_CDC_InterfaceInit+0x11a>
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d901      	bls.n	8004e1e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e0c2      	b.n	8004fa4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	211a      	movs	r1, #26
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	b25b      	sxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	da16      	bge.n	8004e64 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	211a      	movs	r1, #26
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8004e46:	781a      	ldrb	r2, [r3, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	211a      	movs	r1, #26
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004e5c:	881a      	ldrh	r2, [r3, #0]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	835a      	strh	r2, [r3, #26]
 8004e62:	e015      	b.n	8004e90 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	211a      	movs	r1, #26
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	211a      	movs	r1, #26
 8004e80:	fb01 f303 	mul.w	r3, r1, r3
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004e8a:	881a      	ldrh	r2, [r3, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	211a      	movs	r1, #26
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	b25b      	sxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	da16      	bge.n	8004ed6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	211a      	movs	r1, #26
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8004eb8:	781a      	ldrb	r2, [r3, #0]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	211a      	movs	r1, #26
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004ece:	881a      	ldrh	r2, [r3, #0]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	835a      	strh	r2, [r3, #26]
 8004ed4:	e015      	b.n	8004f02 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	211a      	movs	r1, #26
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	211a      	movs	r1, #26
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004efc:	881a      	ldrh	r2, [r3, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	7b9b      	ldrb	r3, [r3, #14]
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 ff16 	bl	8006d3a <USBH_AllocPipe>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	461a      	mov	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	7bdb      	ldrb	r3, [r3, #15]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f001 ff0c 	bl	8006d3a <USBH_AllocPipe>
 8004f22:	4603      	mov	r3, r0
 8004f24:	461a      	mov	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	7b59      	ldrb	r1, [r3, #13]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	7b98      	ldrb	r0, [r3, #14]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	8b12      	ldrh	r2, [r2, #24]
 8004f42:	9202      	str	r2, [sp, #8]
 8004f44:	2202      	movs	r2, #2
 8004f46:	9201      	str	r2, [sp, #4]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f001 fec4 	bl	8006cdc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	7b19      	ldrb	r1, [r3, #12]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	7bd8      	ldrb	r0, [r3, #15]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	8b52      	ldrh	r2, [r2, #26]
 8004f6c:	9202      	str	r2, [sp, #8]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	9201      	str	r2, [sp, #4]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	4623      	mov	r3, r4
 8004f76:	4602      	mov	r2, r0
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f001 feaf 	bl	8006cdc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	7b5b      	ldrb	r3, [r3, #13]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f002 f9ba 	bl	8007308 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	7b1b      	ldrb	r3, [r3, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f002 f9b3 	bl	8007308 <USBH_LL_SetToggle>

  return USBH_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}

08004fac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00e      	beq.n	8004fe4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f001 fea4 	bl	8006d1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fecf 	bl	8006d7c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	7b1b      	ldrb	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00e      	beq.n	800500a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	7b1b      	ldrb	r3, [r3, #12]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f001 fe91 	bl	8006d1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	7b1b      	ldrb	r3, [r3, #12]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f001 febc 	bl	8006d7c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	7b5b      	ldrb	r3, [r3, #13]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00e      	beq.n	8005030 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	7b5b      	ldrb	r3, [r3, #13]
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 fe7e 	bl	8006d1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	7b5b      	ldrb	r3, [r3, #13]
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f001 fea9 	bl	8006d7c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	4618      	mov	r0, r3
 8005046:	f002 f9ed 	bl	8007424 <free>
    phost->pActiveClass->pData = 0U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005050:	2200      	movs	r2, #0
 8005052:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3340      	adds	r3, #64	@ 0x40
 8005074:	4619      	mov	r1, r3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8b1 	bl	80051de <GetLineCoding>
 800507c:	4603      	mov	r3, r0
 800507e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005080:	7afb      	ldrb	r3, [r7, #11]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d105      	bne.n	8005092 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800508c:	2102      	movs	r1, #2
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005092:	7afb      	ldrb	r3, [r7, #11]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d877      	bhi.n	80051b0 <USBH_CDC_Process+0x114>
 80050c0:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <USBH_CDC_Process+0x2c>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050dd 	.word	0x080050dd
 80050cc:	080050e3 	.word	0x080050e3
 80050d0:	08005113 	.word	0x08005113
 80050d4:	08005187 	.word	0x08005187
 80050d8:	08005195 	.word	0x08005195
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	73fb      	strb	r3, [r7, #15]
      break;
 80050e0:	e06d      	b.n	80051be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f897 	bl	800521c <SetLineCoding>
 80050ee:	4603      	mov	r3, r0
 80050f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80050f2:	7bbb      	ldrb	r3, [r7, #14]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005100:	e058      	b.n	80051b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005102:	7bbb      	ldrb	r3, [r7, #14]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d055      	beq.n	80051b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2204      	movs	r2, #4
 800510c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8005110:	e050      	b.n	80051b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	3340      	adds	r3, #64	@ 0x40
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f860 	bl	80051de <GetLineCoding>
 800511e:	4603      	mov	r3, r0
 8005120:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005122:	7bbb      	ldrb	r3, [r7, #14]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d126      	bne.n	8005176 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513a:	791b      	ldrb	r3, [r3, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d13b      	bne.n	80051b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800514a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800514c:	429a      	cmp	r2, r3
 800514e:	d133      	bne.n	80051b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800515a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800515c:	429a      	cmp	r2, r3
 800515e:	d12b      	bne.n	80051b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005168:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800516a:	429a      	cmp	r2, r3
 800516c:	d124      	bne.n	80051b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f958 	bl	8005424 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005174:	e020      	b.n	80051b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005176:	7bbb      	ldrb	r3, [r7, #14]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d01d      	beq.n	80051b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2204      	movs	r2, #4
 8005180:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8005184:	e018      	b.n	80051b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f867 	bl	800525a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f8da 	bl	8005346 <CDC_ProcessReception>
      break;
 8005192:	e014      	b.n	80051be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005194:	2100      	movs	r1, #0
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f001 f81a 	bl	80061d0 <USBH_ClrFeature>
 800519c:	4603      	mov	r3, r0
 800519e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80051a0:	7bbb      	ldrb	r3, [r7, #14]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80051ae:	e005      	b.n	80051bc <USBH_CDC_Process+0x120>

    default:
      break;
 80051b0:	bf00      	nop
 80051b2:	e004      	b.n	80051be <USBH_CDC_Process+0x122>
      break;
 80051b4:	bf00      	nop
 80051b6:	e002      	b.n	80051be <USBH_CDC_Process+0x122>
      break;
 80051b8:	bf00      	nop
 80051ba:	e000      	b.n	80051be <USBH_CDC_Process+0x122>
      break;
 80051bc:	bf00      	nop

  }

  return status;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	22a1      	movs	r2, #161	@ 0xa1
 80051ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2221      	movs	r2, #33	@ 0x21
 80051f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2207      	movs	r2, #7
 8005204:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2207      	movs	r2, #7
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 fb14 	bl	800683a <USBH_CtlReq>
 8005212:	4603      	mov	r3, r0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2221      	movs	r2, #33	@ 0x21
 800522a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2207      	movs	r2, #7
 8005242:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2207      	movs	r2, #7
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f001 faf5 	bl	800683a <USBH_CtlReq>
 8005250:	4603      	mov	r3, r0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af02      	add	r7, sp, #8
 8005260:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800526c:	2300      	movs	r3, #0
 800526e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005276:	2b01      	cmp	r3, #1
 8005278:	d002      	beq.n	8005280 <CDC_ProcessTransmission+0x26>
 800527a:	2b02      	cmp	r3, #2
 800527c:	d023      	beq.n	80052c6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800527e:	e05e      	b.n	800533e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	8b12      	ldrh	r2, [r2, #24]
 8005288:	4293      	cmp	r3, r2
 800528a:	d90b      	bls.n	80052a4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	69d9      	ldr	r1, [r3, #28]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8b1a      	ldrh	r2, [r3, #24]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	7b5b      	ldrb	r3, [r3, #13]
 8005298:	2001      	movs	r0, #1
 800529a:	9000      	str	r0, [sp, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fcda 	bl	8006c56 <USBH_BulkSendData>
 80052a2:	e00b      	b.n	80052bc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	7b5b      	ldrb	r3, [r3, #13]
 80052b2:	2001      	movs	r0, #1
 80052b4:	9000      	str	r0, [sp, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 fccd 	bl	8006c56 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80052c4:	e03b      	b.n	800533e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	7b5b      	ldrb	r3, [r3, #13]
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 fff1 	bl	80072b4 <USBH_LL_GetURBState>
 80052d2:	4603      	mov	r3, r0
 80052d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80052d6:	7afb      	ldrb	r3, [r7, #11]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d128      	bne.n	800532e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	8b12      	ldrh	r2, [r2, #24]
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d90e      	bls.n	8005306 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	8b12      	ldrh	r2, [r2, #24]
 80052f0:	1a9a      	subs	r2, r3, r2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	8b12      	ldrh	r2, [r2, #24]
 80052fe:	441a      	add	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	61da      	str	r2, [r3, #28]
 8005304:	e002      	b.n	800530c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	2b00      	cmp	r3, #0
 8005312:	d004      	beq.n	800531e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800531c:	e00e      	b.n	800533c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f868 	bl	80053fc <USBH_CDC_TransmitCallback>
      break;
 800532c:	e006      	b.n	800533c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800532e:	7afb      	ldrb	r3, [r7, #11]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d103      	bne.n	800533c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800533c:	bf00      	nop
  }
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b086      	sub	sp, #24
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005358:	2300      	movs	r3, #0
 800535a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8005362:	2b03      	cmp	r3, #3
 8005364:	d002      	beq.n	800536c <CDC_ProcessReception+0x26>
 8005366:	2b04      	cmp	r3, #4
 8005368:	d00e      	beq.n	8005388 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800536a:	e043      	b.n	80053f4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	6a19      	ldr	r1, [r3, #32]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	8b5a      	ldrh	r2, [r3, #26]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	7b1b      	ldrb	r3, [r3, #12]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 fc91 	bl	8006ca0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2204      	movs	r2, #4
 8005382:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8005386:	e035      	b.n	80053f4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	7b1b      	ldrb	r3, [r3, #12]
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f001 ff90 	bl	80072b4 <USBH_LL_GetURBState>
 8005394:	4603      	mov	r3, r0
 8005396:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005398:	7cfb      	ldrb	r3, [r7, #19]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d129      	bne.n	80053f2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	7b1b      	ldrb	r3, [r3, #12]
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 fef3 	bl	8007190 <USBH_LL_GetLastXferSize>
 80053aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d016      	beq.n	80053e4 <CDC_ProcessReception+0x9e>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	8b5b      	ldrh	r3, [r3, #26]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4293      	cmp	r3, r2
 80053c0:	d110      	bne.n	80053e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad2      	subs	r2, r2, r3
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	441a      	add	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2203      	movs	r2, #3
 80053de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80053e2:	e006      	b.n	80053f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f80f 	bl	8005410 <USBH_CDC_ReceiveCallback>
      break;
 80053f2:	bf00      	nop
  }
}
 80053f4:	bf00      	nop
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	4613      	mov	r3, r2
 8005444:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800544c:	2302      	movs	r3, #2
 800544e:	e029      	b.n	80054a4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	79fa      	ldrb	r2, [r7, #7]
 8005454:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f81f 	bl	80054ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f001 fdc3 	bl	8007028 <USBH_LL_Init>

  return USBH_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e009      	b.n	80054d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	33e0      	adds	r3, #224	@ 0xe0
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	2200      	movs	r2, #0
 80054ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b0f      	cmp	r3, #15
 80054d6:	d9f2      	bls.n	80054be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e009      	b.n	80054f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f8:	d3f1      	bcc.n	80054de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2240      	movs	r2, #64	@ 0x40
 800551e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	331c      	adds	r3, #28
 800554a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f002 f81d 	bl	8007590 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800555c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f002 f814 	bl	8007590 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800556e:	2212      	movs	r2, #18
 8005570:	2100      	movs	r1, #0
 8005572:	4618      	mov	r0, r3
 8005574:	f002 f80c 	bl	8007590 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800557e:	223e      	movs	r2, #62	@ 0x3e
 8005580:	2100      	movs	r1, #0
 8005582:	4618      	mov	r0, r3
 8005584:	f002 f804 	bl	8007590 <memset>

  return USBH_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10e      	bne.n	80055ce <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80055b6:	1c59      	adds	r1, r3, #1
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	33de      	adds	r3, #222	@ 0xde
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73fb      	strb	r3, [r7, #15]
 80055cc:	e004      	b.n	80055d8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80055ce:	2302      	movs	r3, #2
 80055d0:	73fb      	strb	r3, [r7, #15]
 80055d2:	e001      	b.n	80055d8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80055d4:	2302      	movs	r3, #2
 80055d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d204      	bcs.n	800560c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800560a:	e001      	b.n	8005610 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800560c:	2302      	movs	r3, #2
 800560e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800561e:	b480      	push	{r7}
 8005620:	b087      	sub	sp, #28
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	4608      	mov	r0, r1
 8005628:	4611      	mov	r1, r2
 800562a:	461a      	mov	r2, r3
 800562c:	4603      	mov	r3, r0
 800562e:	70fb      	strb	r3, [r7, #3]
 8005630:	460b      	mov	r3, r1
 8005632:	70bb      	strb	r3, [r7, #2]
 8005634:	4613      	mov	r3, r2
 8005636:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8005646:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005648:	e025      	b.n	8005696 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800564a:	7dfb      	ldrb	r3, [r7, #23]
 800564c:	221a      	movs	r2, #26
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	3308      	adds	r3, #8
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	3302      	adds	r3, #2
 800565a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	795b      	ldrb	r3, [r3, #5]
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	429a      	cmp	r2, r3
 8005664:	d002      	beq.n	800566c <USBH_FindInterface+0x4e>
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	2bff      	cmp	r3, #255	@ 0xff
 800566a:	d111      	bne.n	8005690 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005670:	78ba      	ldrb	r2, [r7, #2]
 8005672:	429a      	cmp	r2, r3
 8005674:	d002      	beq.n	800567c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005676:	78bb      	ldrb	r3, [r7, #2]
 8005678:	2bff      	cmp	r3, #255	@ 0xff
 800567a:	d109      	bne.n	8005690 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005680:	787a      	ldrb	r2, [r7, #1]
 8005682:	429a      	cmp	r2, r3
 8005684:	d002      	beq.n	800568c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005686:	787b      	ldrb	r3, [r7, #1]
 8005688:	2bff      	cmp	r3, #255	@ 0xff
 800568a:	d101      	bne.n	8005690 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800568c:	7dfb      	ldrb	r3, [r7, #23]
 800568e:	e006      	b.n	800569e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	3301      	adds	r3, #1
 8005694:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005696:	7dfb      	ldrb	r3, [r7, #23]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d9d6      	bls.n	800564a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800569c:	23ff      	movs	r3, #255	@ 0xff
}
 800569e:	4618      	mov	r0, r3
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 fcf4 	bl	80070a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80056b8:	2101      	movs	r1, #1
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f001 fe0d 	bl	80072da <USBH_LL_DriverVBUS>

  return USBH_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af04      	add	r7, sp, #16
 80056d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80056d4:	2302      	movs	r3, #2
 80056d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d102      	bne.n	80056ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2203      	movs	r2, #3
 80056ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b0b      	cmp	r3, #11
 80056f6:	f200 81bb 	bhi.w	8005a70 <USBH_Process+0x3a4>
 80056fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <USBH_Process+0x34>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005731 	.word	0x08005731
 8005704:	08005763 	.word	0x08005763
 8005708:	080057cb 	.word	0x080057cb
 800570c:	08005a0b 	.word	0x08005a0b
 8005710:	08005a71 	.word	0x08005a71
 8005714:	0800586b 	.word	0x0800586b
 8005718:	080059b1 	.word	0x080059b1
 800571c:	080058a1 	.word	0x080058a1
 8005720:	080058c1 	.word	0x080058c1
 8005724:	080058df 	.word	0x080058df
 8005728:	08005923 	.word	0x08005923
 800572c:	080059f3 	.word	0x080059f3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 819b 	beq.w	8005a74 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005744:	20c8      	movs	r0, #200	@ 0xc8
 8005746:	f001 fe12 	bl	800736e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 fd05 	bl	800715a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005760:	e188      	b.n	8005a74 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8005768:	2b01      	cmp	r3, #1
 800576a:	d107      	bne.n	800577c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800577a:	e18a      	b.n	8005a92 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8005782:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005786:	d914      	bls.n	80057b2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800578e:	3301      	adds	r3, #1
 8005790:	b2da      	uxtb	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d903      	bls.n	80057aa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	220d      	movs	r2, #13
 80057a6:	701a      	strb	r2, [r3, #0]
      break;
 80057a8:	e173      	b.n	8005a92 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
      break;
 80057b0:	e16f      	b.n	8005a92 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80057b8:	f103 020a 	add.w	r2, r3, #10
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80057c2:	200a      	movs	r0, #10
 80057c4:	f001 fdd3 	bl	800736e <USBH_Delay>
      break;
 80057c8:	e163      	b.n	8005a92 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80057da:	2104      	movs	r1, #4
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80057e0:	2064      	movs	r0, #100	@ 0x64
 80057e2:	f001 fdc4 	bl	800736e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 fc90 	bl	800710c <USBH_LL_GetSpeed>
 80057ec:	4603      	mov	r3, r0
 80057ee:	461a      	mov	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2205      	movs	r2, #5
 80057fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80057fc:	2100      	movs	r1, #0
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fa9b 	bl	8006d3a <USBH_AllocPipe>
 8005804:	4603      	mov	r3, r0
 8005806:	461a      	mov	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800580c:	2180      	movs	r1, #128	@ 0x80
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 fa93 	bl	8006d3a <USBH_AllocPipe>
 8005814:	4603      	mov	r3, r0
 8005816:	461a      	mov	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7919      	ldrb	r1, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005830:	9202      	str	r2, [sp, #8]
 8005832:	2200      	movs	r2, #0
 8005834:	9201      	str	r2, [sp, #4]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	4603      	mov	r3, r0
 800583a:	2280      	movs	r2, #128	@ 0x80
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f001 fa4d 	bl	8006cdc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7959      	ldrb	r1, [r3, #5]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005856:	9202      	str	r2, [sp, #8]
 8005858:	2200      	movs	r2, #0
 800585a:	9201      	str	r2, [sp, #4]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	4603      	mov	r3, r0
 8005860:	2200      	movs	r2, #0
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f001 fa3a 	bl	8006cdc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005868:	e113      	b.n	8005a92 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f916 	bl	8005a9c <USBH_HandleEnum>
 8005870:	4603      	mov	r3, r0
 8005872:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005874:	7bbb      	ldrb	r3, [r7, #14]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	f040 80fd 	bne.w	8005a78 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800588c:	2b01      	cmp	r3, #1
 800588e:	d103      	bne.n	8005898 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2208      	movs	r2, #8
 8005894:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005896:	e0ef      	b.n	8005a78 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2207      	movs	r2, #7
 800589c:	701a      	strb	r2, [r3, #0]
      break;
 800589e:	e0eb      	b.n	8005a78 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80e8 	beq.w	8005a7c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80058b2:	2101      	movs	r1, #1
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2208      	movs	r2, #8
 80058bc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80058be:	e0dd      	b.n	8005a7c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fc3a 	bl	8006142 <USBH_SetCfg>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 80d5 	bne.w	8005a80 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2209      	movs	r2, #9
 80058da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80058dc:	e0d0      	b.n	8005a80 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d016      	beq.n	800591a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80058ec:	2101      	movs	r1, #1
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fc4a 	bl	8006188 <USBH_SetFeature>
 80058f4:	4603      	mov	r3, r0
 80058f6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d103      	bne.n	8005908 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	220a      	movs	r2, #10
 8005904:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005906:	e0bd      	b.n	8005a84 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b03      	cmp	r3, #3
 800590e:	f040 80b9 	bne.w	8005a84 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	220a      	movs	r2, #10
 8005916:	701a      	strb	r2, [r3, #0]
      break;
 8005918:	e0b4      	b.n	8005a84 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	220a      	movs	r2, #10
 800591e:	701a      	strb	r2, [r3, #0]
      break;
 8005920:	e0b0      	b.n	8005a84 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80ad 	beq.w	8005a88 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005936:	2300      	movs	r3, #0
 8005938:	73fb      	strb	r3, [r7, #15]
 800593a:	e016      	b.n	800596a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800593c:	7bfa      	ldrb	r2, [r7, #15]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	32de      	adds	r2, #222	@ 0xde
 8005942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005946:	791a      	ldrb	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800594e:	429a      	cmp	r2, r3
 8005950:	d108      	bne.n	8005964 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005952:	7bfa      	ldrb	r2, [r7, #15]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	32de      	adds	r2, #222	@ 0xde
 8005958:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8005962:	e005      	b.n	8005970 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	3301      	adds	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0e5      	beq.n	800593c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d016      	beq.n	80059a8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2206      	movs	r2, #6
 8005990:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005998:	2103      	movs	r1, #3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800599e:	e073      	b.n	8005a88 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	220d      	movs	r2, #13
 80059a4:	701a      	strb	r2, [r3, #0]
      break;
 80059a6:	e06f      	b.n	8005a88 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	220d      	movs	r2, #13
 80059ac:	701a      	strb	r2, [r3, #0]
      break;
 80059ae:	e06b      	b.n	8005a88 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d017      	beq.n	80059ea <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	4798      	blx	r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80059ca:	7bbb      	ldrb	r3, [r7, #14]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	220b      	movs	r2, #11
 80059d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80059d8:	e058      	b.n	8005a8c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80059da:	7bbb      	ldrb	r3, [r7, #14]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d154      	bne.n	8005a8c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	220d      	movs	r2, #13
 80059e6:	701a      	strb	r2, [r3, #0]
      break;
 80059e8:	e050      	b.n	8005a8c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	220d      	movs	r2, #13
 80059ee:	701a      	strb	r2, [r3, #0]
      break;
 80059f0:	e04c      	b.n	8005a8c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d049      	beq.n	8005a90 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
      }
      break;
 8005a08:	e042      	b.n	8005a90 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fd4a 	bl	80054ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005a46:	2105      	movs	r1, #5
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d107      	bne.n	8005a68 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fe22 	bl	80056aa <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005a66:	e014      	b.n	8005a92 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 fb19 	bl	80070a0 <USBH_LL_Start>
      break;
 8005a6e:	e010      	b.n	8005a92 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005a70:	bf00      	nop
 8005a72:	e00e      	b.n	8005a92 <USBH_Process+0x3c6>
      break;
 8005a74:	bf00      	nop
 8005a76:	e00c      	b.n	8005a92 <USBH_Process+0x3c6>
      break;
 8005a78:	bf00      	nop
 8005a7a:	e00a      	b.n	8005a92 <USBH_Process+0x3c6>
    break;
 8005a7c:	bf00      	nop
 8005a7e:	e008      	b.n	8005a92 <USBH_Process+0x3c6>
      break;
 8005a80:	bf00      	nop
 8005a82:	e006      	b.n	8005a92 <USBH_Process+0x3c6>
      break;
 8005a84:	bf00      	nop
 8005a86:	e004      	b.n	8005a92 <USBH_Process+0x3c6>
      break;
 8005a88:	bf00      	nop
 8005a8a:	e002      	b.n	8005a92 <USBH_Process+0x3c6>
      break;
 8005a8c:	bf00      	nop
 8005a8e:	e000      	b.n	8005a92 <USBH_Process+0x3c6>
      break;
 8005a90:	bf00      	nop
  }
  return USBH_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af04      	add	r7, sp, #16
 8005aa2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	2b07      	cmp	r3, #7
 8005ab2:	f200 81bd 	bhi.w	8005e30 <USBH_HandleEnum+0x394>
 8005ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8005abc <USBH_HandleEnum+0x20>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005add 	.word	0x08005add
 8005ac0:	08005b97 	.word	0x08005b97
 8005ac4:	08005c01 	.word	0x08005c01
 8005ac8:	08005c8b 	.word	0x08005c8b
 8005acc:	08005cf5 	.word	0x08005cf5
 8005ad0:	08005d65 	.word	0x08005d65
 8005ad4:	08005dab 	.word	0x08005dab
 8005ad8:	08005df1 	.word	0x08005df1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005adc:	2108      	movs	r1, #8
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fa4c 	bl	8005f7c <USBH_Get_DevDesc>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d12e      	bne.n	8005b4c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	7919      	ldrb	r1, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005b12:	9202      	str	r2, [sp, #8]
 8005b14:	2200      	movs	r2, #0
 8005b16:	9201      	str	r2, [sp, #4]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2280      	movs	r2, #128	@ 0x80
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 f8dc 	bl	8006cdc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	7959      	ldrb	r1, [r3, #5]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005b38:	9202      	str	r2, [sp, #8]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	9201      	str	r2, [sp, #4]
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	4603      	mov	r3, r0
 8005b42:	2200      	movs	r2, #0
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 f8c9 	bl	8006cdc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005b4a:	e173      	b.n	8005e34 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005b4c:	7bbb      	ldrb	r3, [r7, #14]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	f040 8170 	bne.w	8005e34 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d903      	bls.n	8005b76 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	220d      	movs	r2, #13
 8005b72:	701a      	strb	r2, [r3, #0]
      break;
 8005b74:	e15e      	b.n	8005e34 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	795b      	ldrb	r3, [r3, #5]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f001 f8fd 	bl	8006d7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	791b      	ldrb	r3, [r3, #4]
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f001 f8f7 	bl	8006d7c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
      break;
 8005b94:	e14e      	b.n	8005e34 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005b96:	2112      	movs	r1, #18
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f9ef 	bl	8005f7c <USBH_Get_DevDesc>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005ba2:	7bbb      	ldrb	r3, [r7, #14]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d103      	bne.n	8005bb0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005bae:	e143      	b.n	8005e38 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	f040 8140 	bne.w	8005e38 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d903      	bls.n	8005bda <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	220d      	movs	r2, #13
 8005bd6:	701a      	strb	r2, [r3, #0]
      break;
 8005bd8:	e12e      	b.n	8005e38 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	795b      	ldrb	r3, [r3, #5]
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 f8cb 	bl	8006d7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	791b      	ldrb	r3, [r3, #4]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 f8c5 	bl	8006d7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
      break;
 8005bfe:	e11b      	b.n	8005e38 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005c00:	2101      	movs	r1, #1
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa79 	bl	80060fa <USBH_SetAddress>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005c0c:	7bbb      	ldrb	r3, [r7, #14]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d130      	bne.n	8005c74 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8005c12:	2002      	movs	r0, #2
 8005c14:	f001 fbab 	bl	800736e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2203      	movs	r2, #3
 8005c24:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	7919      	ldrb	r1, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005c3a:	9202      	str	r2, [sp, #8]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	9201      	str	r2, [sp, #4]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	4603      	mov	r3, r0
 8005c44:	2280      	movs	r2, #128	@ 0x80
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 f848 	bl	8006cdc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	7959      	ldrb	r1, [r3, #5]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005c60:	9202      	str	r2, [sp, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	9201      	str	r2, [sp, #4]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f835 	bl	8006cdc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005c72:	e0e3      	b.n	8005e3c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005c74:	7bbb      	ldrb	r3, [r7, #14]
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	f040 80e0 	bne.w	8005e3c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	220d      	movs	r2, #13
 8005c80:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	705a      	strb	r2, [r3, #1]
      break;
 8005c88:	e0d8      	b.n	8005e3c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005c8a:	2109      	movs	r1, #9
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f9a1 	bl	8005fd4 <USBH_Get_CfgDesc>
 8005c92:	4603      	mov	r3, r0
 8005c94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d103      	bne.n	8005ca4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005ca2:	e0cd      	b.n	8005e40 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	f040 80ca 	bne.w	8005e40 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d903      	bls.n	8005cce <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	220d      	movs	r2, #13
 8005cca:	701a      	strb	r2, [r3, #0]
      break;
 8005ccc:	e0b8      	b.n	8005e40 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	795b      	ldrb	r3, [r3, #5]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 f851 	bl	8006d7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	791b      	ldrb	r3, [r3, #4]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 f84b 	bl	8006d7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
      break;
 8005cf2:	e0a5      	b.n	8005e40 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f969 	bl	8005fd4 <USBH_Get_CfgDesc>
 8005d02:	4603      	mov	r3, r0
 8005d04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2205      	movs	r2, #5
 8005d10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005d12:	e097      	b.n	8005e44 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	f040 8094 	bne.w	8005e44 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005d22:	3301      	adds	r3, #1
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d903      	bls.n	8005d3e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	220d      	movs	r2, #13
 8005d3a:	701a      	strb	r2, [r3, #0]
      break;
 8005d3c:	e082      	b.n	8005e44 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	795b      	ldrb	r3, [r3, #5]
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f001 f819 	bl	8006d7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	791b      	ldrb	r3, [r3, #4]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 f813 	bl	8006d7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
      break;
 8005d62:	e06f      	b.n	8005e44 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d019      	beq.n	8005da2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005d7a:	23ff      	movs	r3, #255	@ 0xff
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f953 	bl	8006028 <USBH_Get_StringDesc>
 8005d82:	4603      	mov	r3, r0
 8005d84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2206      	movs	r2, #6
 8005d90:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005d92:	e059      	b.n	8005e48 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005d94:	7bbb      	ldrb	r3, [r7, #14]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d156      	bne.n	8005e48 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2206      	movs	r2, #6
 8005d9e:	705a      	strb	r2, [r3, #1]
      break;
 8005da0:	e052      	b.n	8005e48 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2206      	movs	r2, #6
 8005da6:	705a      	strb	r2, [r3, #1]
      break;
 8005da8:	e04e      	b.n	8005e48 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d019      	beq.n	8005de8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005dc0:	23ff      	movs	r3, #255	@ 0xff
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f930 	bl	8006028 <USBH_Get_StringDesc>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d103      	bne.n	8005dda <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2207      	movs	r2, #7
 8005dd6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005dd8:	e038      	b.n	8005e4c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d135      	bne.n	8005e4c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2207      	movs	r2, #7
 8005de4:	705a      	strb	r2, [r3, #1]
      break;
 8005de6:	e031      	b.n	8005e4c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2207      	movs	r2, #7
 8005dec:	705a      	strb	r2, [r3, #1]
      break;
 8005dee:	e02d      	b.n	8005e4c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d017      	beq.n	8005e2a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005e06:	23ff      	movs	r3, #255	@ 0xff
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f90d 	bl	8006028 <USBH_Get_StringDesc>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005e12:	7bbb      	ldrb	r3, [r7, #14]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d102      	bne.n	8005e1e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005e1c:	e018      	b.n	8005e50 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d115      	bne.n	8005e50 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]
      break;
 8005e28:	e012      	b.n	8005e50 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2e:	e00f      	b.n	8005e50 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8005e30:	bf00      	nop
 8005e32:	e00e      	b.n	8005e52 <USBH_HandleEnum+0x3b6>
      break;
 8005e34:	bf00      	nop
 8005e36:	e00c      	b.n	8005e52 <USBH_HandleEnum+0x3b6>
      break;
 8005e38:	bf00      	nop
 8005e3a:	e00a      	b.n	8005e52 <USBH_HandleEnum+0x3b6>
      break;
 8005e3c:	bf00      	nop
 8005e3e:	e008      	b.n	8005e52 <USBH_HandleEnum+0x3b6>
      break;
 8005e40:	bf00      	nop
 8005e42:	e006      	b.n	8005e52 <USBH_HandleEnum+0x3b6>
      break;
 8005e44:	bf00      	nop
 8005e46:	e004      	b.n	8005e52 <USBH_HandleEnum+0x3b6>
      break;
 8005e48:	bf00      	nop
 8005e4a:	e002      	b.n	8005e52 <USBH_HandleEnum+0x3b6>
      break;
 8005e4c:	bf00      	nop
 8005e4e:	e000      	b.n	8005e52 <USBH_HandleEnum+0x3b6>
      break;
 8005e50:	bf00      	nop
  }
  return Status;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f804 	bl	8005e9e <USBH_HandleSof>
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b0b      	cmp	r3, #11
 8005eae:	d10a      	bne.n	8005ec6 <USBH_HandleSof+0x28>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
  }
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8005ede:	bf00      	nop
}
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8005efa:	bf00      	nop
}
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 f8be 	bl	80070d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	791b      	ldrb	r3, [r3, #4]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 ff0b 	bl	8006d7c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	795b      	ldrb	r3, [r3, #5]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 ff05 	bl	8006d7c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8005f88:	887b      	ldrh	r3, [r7, #2]
 8005f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f8e:	d901      	bls.n	8005f94 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e01b      	b.n	8005fcc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8005f9a:	887b      	ldrh	r3, [r7, #2]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f872 	bl	8006090 <USBH_GetDescriptor>
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005fbc:	887a      	ldrh	r2, [r7, #2]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f929 	bl	8006218 <USBH_ParseDevDesc>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	331c      	adds	r3, #28
 8005fe4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8005fe6:	887b      	ldrh	r3, [r7, #2]
 8005fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fec:	d901      	bls.n	8005ff2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e016      	b.n	8006020 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005ff2:	887b      	ldrh	r3, [r7, #2]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f846 	bl	8006090 <USBH_GetDescriptor>
 8006004:	4603      	mov	r3, r0
 8006006:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d107      	bne.n	800601e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800600e:	887b      	ldrh	r3, [r7, #2]
 8006010:	461a      	mov	r2, r3
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9af 	bl	8006378 <USBH_ParseCfgDesc>
 800601a:	4603      	mov	r3, r0
 800601c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	607a      	str	r2, [r7, #4]
 8006032:	461a      	mov	r2, r3
 8006034:	460b      	mov	r3, r1
 8006036:	72fb      	strb	r3, [r7, #11]
 8006038:	4613      	mov	r3, r2
 800603a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800603c:	893b      	ldrh	r3, [r7, #8]
 800603e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006042:	d802      	bhi.n	800604a <USBH_Get_StringDesc+0x22>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800604a:	2303      	movs	r3, #3
 800604c:	e01c      	b.n	8006088 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800604e:	7afb      	ldrb	r3, [r7, #11]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006056:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800605e:	893b      	ldrh	r3, [r7, #8]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	460b      	mov	r3, r1
 8006064:	2100      	movs	r1, #0
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f812 	bl	8006090 <USBH_GetDescriptor>
 800606c:	4603      	mov	r3, r0
 800606e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d107      	bne.n	8006086 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800607c:	893a      	ldrh	r2, [r7, #8]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fb8d 	bl	80067a0 <USBH_ParseStringDesc>
  }

  return status;
 8006086:	7dfb      	ldrb	r3, [r7, #23]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	607b      	str	r3, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	72fb      	strb	r3, [r7, #11]
 800609e:	4613      	mov	r3, r2
 80060a0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	789b      	ldrb	r3, [r3, #2]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d11c      	bne.n	80060e4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80060aa:	7afb      	ldrb	r3, [r7, #11]
 80060ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2206      	movs	r2, #6
 80060ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	893a      	ldrh	r2, [r7, #8]
 80060c0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80060c2:	893b      	ldrh	r3, [r7, #8]
 80060c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80060c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060cc:	d104      	bne.n	80060d8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f240 4209 	movw	r2, #1033	@ 0x409
 80060d4:	829a      	strh	r2, [r3, #20]
 80060d6:	e002      	b.n	80060de <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8b3a      	ldrh	r2, [r7, #24]
 80060e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80060e4:	8b3b      	ldrh	r3, [r7, #24]
 80060e6:	461a      	mov	r2, r3
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fba5 	bl	800683a <USBH_CtlReq>
 80060f0:	4603      	mov	r3, r0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	789b      	ldrb	r3, [r3, #2]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d10f      	bne.n	800612e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2205      	movs	r2, #5
 8006118:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	b29a      	uxth	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800612e:	2200      	movs	r2, #0
 8006130:	2100      	movs	r1, #0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fb81 	bl	800683a <USBH_CtlReq>
 8006138:	4603      	mov	r3, r0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	789b      	ldrb	r3, [r3, #2]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10e      	bne.n	8006174 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2209      	movs	r2, #9
 8006160:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	887a      	ldrh	r2, [r7, #2]
 8006166:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006174:	2200      	movs	r2, #0
 8006176:	2100      	movs	r1, #0
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fb5e 	bl	800683a <USBH_CtlReq>
 800617e:	4603      	mov	r3, r0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	789b      	ldrb	r3, [r3, #2]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d10f      	bne.n	80061bc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2203      	movs	r2, #3
 80061a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80061bc:	2200      	movs	r2, #0
 80061be:	2100      	movs	r1, #0
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fb3a 	bl	800683a <USBH_CtlReq>
 80061c6:	4603      	mov	r3, r0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	789b      	ldrb	r3, [r3, #2]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d10f      	bne.n	8006204 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006204:	2200      	movs	r2, #0
 8006206:	2100      	movs	r1, #0
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fb16 	bl	800683a <USBH_CtlReq>
 800620e:	4603      	mov	r3, r0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800622c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8006238:	2302      	movs	r3, #2
 800623a:	e094      	b.n	8006366 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	781a      	ldrb	r2, [r3, #0]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	785a      	ldrb	r2, [r3, #1]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	3302      	adds	r3, #2
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3303      	adds	r3, #3
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	b29b      	uxth	r3, r3
 800625e:	4313      	orrs	r3, r2
 8006260:	b29a      	uxth	r2, r3
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	791a      	ldrb	r2, [r3, #4]
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	795a      	ldrb	r2, [r3, #5]
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	799a      	ldrb	r2, [r3, #6]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	79da      	ldrb	r2, [r3, #7]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006296:	2b01      	cmp	r3, #1
 8006298:	d11b      	bne.n	80062d2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	79db      	ldrb	r3, [r3, #7]
 800629e:	2b20      	cmp	r3, #32
 80062a0:	dc0f      	bgt.n	80062c2 <USBH_ParseDevDesc+0xaa>
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	db0f      	blt.n	80062c6 <USBH_ParseDevDesc+0xae>
 80062a6:	3b08      	subs	r3, #8
 80062a8:	4a32      	ldr	r2, [pc, #200]	@ (8006374 <USBH_ParseDevDesc+0x15c>)
 80062aa:	fa22 f303 	lsr.w	r3, r2, r3
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <USBH_ParseDevDesc+0xb6>
 80062c0:	e001      	b.n	80062c6 <USBH_ParseDevDesc+0xae>
 80062c2:	2b40      	cmp	r3, #64	@ 0x40
 80062c4:	d003      	beq.n	80062ce <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2208      	movs	r2, #8
 80062ca:	71da      	strb	r2, [r3, #7]
        break;
 80062cc:	e000      	b.n	80062d0 <USBH_ParseDevDesc+0xb8>
        break;
 80062ce:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80062d0:	e00e      	b.n	80062f0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d107      	bne.n	80062ec <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	79db      	ldrb	r3, [r3, #7]
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d005      	beq.n	80062f0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2208      	movs	r2, #8
 80062e8:	71da      	strb	r2, [r3, #7]
 80062ea:	e001      	b.n	80062f0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80062ec:	2303      	movs	r3, #3
 80062ee:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d936      	bls.n	8006364 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	3308      	adds	r3, #8
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	3309      	adds	r3, #9
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	b29b      	uxth	r3, r3
 8006308:	4313      	orrs	r3, r2
 800630a:	b29a      	uxth	r2, r3
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	330a      	adds	r3, #10
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	330b      	adds	r3, #11
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	b29b      	uxth	r3, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	b29a      	uxth	r2, r3
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	330c      	adds	r3, #12
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	330d      	adds	r3, #13
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	b29b      	uxth	r3, r3
 800633c:	4313      	orrs	r3, r2
 800633e:	b29a      	uxth	r2, r3
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	7b9a      	ldrb	r2, [r3, #14]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	7bda      	ldrb	r2, [r3, #15]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	7c1a      	ldrb	r2, [r3, #16]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	7c5a      	ldrb	r2, [r3, #17]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8006364:	7dfb      	ldrb	r3, [r7, #23]
}
 8006366:	4618      	mov	r0, r3
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	01000101 	.word	0x01000101

08006378 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08c      	sub	sp, #48	@ 0x30
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800638c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80063a6:	2302      	movs	r3, #2
 80063a8:	e0da      	b.n	8006560 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b09      	cmp	r3, #9
 80063b4:	d002      	beq.n	80063bc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	2209      	movs	r2, #9
 80063ba:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	781a      	ldrb	r2, [r3, #0]
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	785a      	ldrb	r2, [r3, #1]
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	3302      	adds	r3, #2
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	3303      	adds	r3, #3
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	b29b      	uxth	r3, r3
 80063de:	4313      	orrs	r3, r2
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e6:	bf28      	it	cs
 80063e8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	791a      	ldrb	r2, [r3, #4]
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	795a      	ldrb	r2, [r3, #5]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	799a      	ldrb	r2, [r3, #6]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	79da      	ldrb	r2, [r3, #7]
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	7a1a      	ldrb	r2, [r3, #8]
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	2b09      	cmp	r3, #9
 800641e:	f240 809d 	bls.w	800655c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8006422:	2309      	movs	r3, #9
 8006424:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800642a:	e081      	b.n	8006530 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800642c:	f107 0316 	add.w	r3, r7, #22
 8006430:	4619      	mov	r1, r3
 8006432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006434:	f000 f9e7 	bl	8006806 <USBH_GetNextDesc>
 8006438:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d176      	bne.n	8006530 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b09      	cmp	r3, #9
 8006448:	d002      	beq.n	8006450 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	2209      	movs	r2, #9
 800644e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006454:	221a      	movs	r2, #26
 8006456:	fb02 f303 	mul.w	r3, r2, r3
 800645a:	3308      	adds	r3, #8
 800645c:	6a3a      	ldr	r2, [r7, #32]
 800645e:	4413      	add	r3, r2
 8006460:	3302      	adds	r3, #2
 8006462:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006464:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006466:	69f8      	ldr	r0, [r7, #28]
 8006468:	f000 f87e 	bl	8006568 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006476:	e043      	b.n	8006500 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006478:	f107 0316 	add.w	r3, r7, #22
 800647c:	4619      	mov	r1, r3
 800647e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006480:	f000 f9c1 	bl	8006806 <USBH_GetNextDesc>
 8006484:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	785b      	ldrb	r3, [r3, #1]
 800648a:	2b05      	cmp	r3, #5
 800648c:	d138      	bne.n	8006500 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	795b      	ldrb	r3, [r3, #5]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d113      	bne.n	80064be <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800649a:	2b02      	cmp	r3, #2
 800649c:	d003      	beq.n	80064a6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	799b      	ldrb	r3, [r3, #6]
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d10b      	bne.n	80064be <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	79db      	ldrb	r3, [r3, #7]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10b      	bne.n	80064c6 <USBH_ParseCfgDesc+0x14e>
 80064ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b09      	cmp	r3, #9
 80064b4:	d007      	beq.n	80064c6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80064b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b8:	2209      	movs	r2, #9
 80064ba:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80064bc:	e003      	b.n	80064c6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	2207      	movs	r2, #7
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	e000      	b.n	80064c8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80064c6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80064c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064cc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80064d0:	3201      	adds	r2, #1
 80064d2:	00d2      	lsls	r2, r2, #3
 80064d4:	211a      	movs	r1, #26
 80064d6:	fb01 f303 	mul.w	r3, r1, r3
 80064da:	4413      	add	r3, r2
 80064dc:	3308      	adds	r3, #8
 80064de:	6a3a      	ldr	r2, [r7, #32]
 80064e0:	4413      	add	r3, r2
 80064e2:	3304      	adds	r3, #4
 80064e4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80064e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064e8:	69b9      	ldr	r1, [r7, #24]
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f870 	bl	80065d0 <USBH_ParseEPDesc>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80064f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064fa:	3301      	adds	r3, #1
 80064fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	791b      	ldrb	r3, [r3, #4]
 8006504:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006508:	429a      	cmp	r2, r3
 800650a:	d204      	bcs.n	8006516 <USBH_ParseCfgDesc+0x19e>
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	885a      	ldrh	r2, [r3, #2]
 8006510:	8afb      	ldrh	r3, [r7, #22]
 8006512:	429a      	cmp	r2, r3
 8006514:	d8b0      	bhi.n	8006478 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	791b      	ldrb	r3, [r3, #4]
 800651a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800651e:	429a      	cmp	r2, r3
 8006520:	d201      	bcs.n	8006526 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8006522:	2303      	movs	r3, #3
 8006524:	e01c      	b.n	8006560 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8006526:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800652a:	3301      	adds	r3, #1
 800652c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006534:	2b01      	cmp	r3, #1
 8006536:	d805      	bhi.n	8006544 <USBH_ParseCfgDesc+0x1cc>
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	885a      	ldrh	r2, [r3, #2]
 800653c:	8afb      	ldrh	r3, [r7, #22]
 800653e:	429a      	cmp	r2, r3
 8006540:	f63f af74 	bhi.w	800642c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	791b      	ldrb	r3, [r3, #4]
 8006548:	2b02      	cmp	r3, #2
 800654a:	bf28      	it	cs
 800654c:	2302      	movcs	r3, #2
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006554:	429a      	cmp	r2, r3
 8006556:	d201      	bcs.n	800655c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8006558:	2303      	movs	r3, #3
 800655a:	e001      	b.n	8006560 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800655c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006560:	4618      	mov	r0, r3
 8006562:	3730      	adds	r7, #48	@ 0x30
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	785a      	ldrb	r2, [r3, #1]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	789a      	ldrb	r2, [r3, #2]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	78da      	ldrb	r2, [r3, #3]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	3304      	adds	r3, #4
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b02      	cmp	r3, #2
 800659a:	bf28      	it	cs
 800659c:	2302      	movcs	r3, #2
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	795a      	ldrb	r2, [r3, #5]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	799a      	ldrb	r2, [r3, #6]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	79da      	ldrb	r2, [r3, #7]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	7a1a      	ldrb	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	721a      	strb	r2, [r3, #8]
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	781a      	ldrb	r2, [r3, #0]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	785a      	ldrb	r2, [r3, #1]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	789a      	ldrb	r2, [r3, #2]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	78da      	ldrb	r2, [r3, #3]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3305      	adds	r3, #5
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	b29b      	uxth	r3, r3
 8006612:	4313      	orrs	r3, r2
 8006614:	b29a      	uxth	r2, r3
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	799a      	ldrb	r2, [r3, #6]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	889b      	ldrh	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d009      	beq.n	800663e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800662e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006632:	d804      	bhi.n	800663e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8006638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800663c:	d901      	bls.n	8006642 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800663e:	2303      	movs	r3, #3
 8006640:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006648:	2b00      	cmp	r3, #0
 800664a:	d136      	bne.n	80066ba <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	78db      	ldrb	r3, [r3, #3]
 8006650:	f003 0303 	and.w	r3, r3, #3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d108      	bne.n	800666a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	889b      	ldrh	r3, [r3, #4]
 800665c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006660:	f240 8097 	bls.w	8006792 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006664:	2303      	movs	r3, #3
 8006666:	75fb      	strb	r3, [r7, #23]
 8006668:	e093      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	78db      	ldrb	r3, [r3, #3]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d107      	bne.n	8006686 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	889b      	ldrh	r3, [r3, #4]
 800667a:	2b40      	cmp	r3, #64	@ 0x40
 800667c:	f240 8089 	bls.w	8006792 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006680:	2303      	movs	r3, #3
 8006682:	75fb      	strb	r3, [r7, #23]
 8006684:	e085      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	78db      	ldrb	r3, [r3, #3]
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	2b01      	cmp	r3, #1
 8006690:	d005      	beq.n	800669e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	78db      	ldrb	r3, [r3, #3]
 8006696:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800669a:	2b03      	cmp	r3, #3
 800669c:	d10a      	bne.n	80066b4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	799b      	ldrb	r3, [r3, #6]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <USBH_ParseEPDesc+0xde>
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	799b      	ldrb	r3, [r3, #6]
 80066aa:	2b10      	cmp	r3, #16
 80066ac:	d970      	bls.n	8006790 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80066ae:	2303      	movs	r3, #3
 80066b0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80066b2:	e06d      	b.n	8006790 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80066b4:	2303      	movs	r3, #3
 80066b6:	75fb      	strb	r3, [r7, #23]
 80066b8:	e06b      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d13c      	bne.n	800673e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	78db      	ldrb	r3, [r3, #3]
 80066c8:	f003 0303 	and.w	r3, r3, #3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d005      	beq.n	80066dc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	78db      	ldrb	r3, [r3, #3]
 80066d4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d106      	bne.n	80066ea <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	889b      	ldrh	r3, [r3, #4]
 80066e0:	2b40      	cmp	r3, #64	@ 0x40
 80066e2:	d956      	bls.n	8006792 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80066e4:	2303      	movs	r3, #3
 80066e6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80066e8:	e053      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	78db      	ldrb	r3, [r3, #3]
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d10e      	bne.n	8006714 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	799b      	ldrb	r3, [r3, #6]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8006702:	2b10      	cmp	r3, #16
 8006704:	d803      	bhi.n	800670e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800670a:	2b40      	cmp	r3, #64	@ 0x40
 800670c:	d941      	bls.n	8006792 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800670e:	2303      	movs	r3, #3
 8006710:	75fb      	strb	r3, [r7, #23]
 8006712:	e03e      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	78db      	ldrb	r3, [r3, #3]
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	2b03      	cmp	r3, #3
 800671e:	d10b      	bne.n	8006738 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	799b      	ldrb	r3, [r3, #6]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d004      	beq.n	8006732 <USBH_ParseEPDesc+0x162>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	889b      	ldrh	r3, [r3, #4]
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006730:	d32f      	bcc.n	8006792 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006732:	2303      	movs	r3, #3
 8006734:	75fb      	strb	r3, [r7, #23]
 8006736:	e02c      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8006738:	2303      	movs	r3, #3
 800673a:	75fb      	strb	r3, [r7, #23]
 800673c:	e029      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006744:	2b02      	cmp	r3, #2
 8006746:	d120      	bne.n	800678a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	78db      	ldrb	r3, [r3, #3]
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	889b      	ldrh	r3, [r3, #4]
 8006758:	2b08      	cmp	r3, #8
 800675a:	d01a      	beq.n	8006792 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800675c:	2303      	movs	r3, #3
 800675e:	75fb      	strb	r3, [r7, #23]
 8006760:	e017      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	78db      	ldrb	r3, [r3, #3]
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b03      	cmp	r3, #3
 800676c:	d10a      	bne.n	8006784 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	799b      	ldrb	r3, [r3, #6]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <USBH_ParseEPDesc+0x1ae>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	889b      	ldrh	r3, [r3, #4]
 800677a:	2b08      	cmp	r3, #8
 800677c:	d909      	bls.n	8006792 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800677e:	2303      	movs	r3, #3
 8006780:	75fb      	strb	r3, [r7, #23]
 8006782:	e006      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8006784:	2303      	movs	r3, #3
 8006786:	75fb      	strb	r3, [r7, #23]
 8006788:	e003      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800678a:	2303      	movs	r3, #3
 800678c:	75fb      	strb	r3, [r7, #23]
 800678e:	e000      	b.n	8006792 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006790:	bf00      	nop
  }

  return status;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
}
 8006794:	4618      	mov	r0, r3
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3301      	adds	r3, #1
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d120      	bne.n	80067fa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	1e9a      	subs	r2, r3, #2
 80067be:	88fb      	ldrh	r3, [r7, #6]
 80067c0:	4293      	cmp	r3, r2
 80067c2:	bf28      	it	cs
 80067c4:	4613      	movcs	r3, r2
 80067c6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3302      	adds	r3, #2
 80067cc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80067ce:	2300      	movs	r3, #0
 80067d0:	82fb      	strh	r3, [r7, #22]
 80067d2:	e00b      	b.n	80067ec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80067d4:	8afb      	ldrh	r3, [r7, #22]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	781a      	ldrb	r2, [r3, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	701a      	strb	r2, [r3, #0]
      pdest++;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	3301      	adds	r3, #1
 80067e4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80067e6:	8afb      	ldrh	r3, [r7, #22]
 80067e8:	3302      	adds	r3, #2
 80067ea:	82fb      	strh	r3, [r7, #22]
 80067ec:	8afa      	ldrh	r2, [r7, #22]
 80067ee:	8abb      	ldrh	r3, [r7, #20]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d3ef      	bcc.n	80067d4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]
  }
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	7812      	ldrb	r2, [r2, #0]
 8006818:	4413      	add	r3, r2
 800681a:	b29a      	uxth	r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4413      	add	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800682c:	68fb      	ldr	r3, [r7, #12]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b086      	sub	sp, #24
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	4613      	mov	r3, r2
 8006846:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006848:	2301      	movs	r3, #1
 800684a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	789b      	ldrb	r3, [r3, #2]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d002      	beq.n	800685a <USBH_CtlReq+0x20>
 8006854:	2b02      	cmp	r3, #2
 8006856:	d00f      	beq.n	8006878 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006858:	e027      	b.n	80068aa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	88fa      	ldrh	r2, [r7, #6]
 8006864:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2202      	movs	r2, #2
 8006870:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
      break;
 8006876:	e018      	b.n	80068aa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f81b 	bl	80068b4 <USBH_HandleControl>
 800687e:	4603      	mov	r3, r0
 8006880:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <USBH_CtlReq+0x54>
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	2b03      	cmp	r3, #3
 800688c:	d106      	bne.n	800689c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	761a      	strb	r2, [r3, #24]
      break;
 800689a:	e005      	b.n	80068a8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800689c:	7dfb      	ldrb	r3, [r7, #23]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d102      	bne.n	80068a8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	709a      	strb	r2, [r3, #2]
      break;
 80068a8:	bf00      	nop
  }
  return status;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	7e1b      	ldrb	r3, [r3, #24]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	2b0a      	cmp	r3, #10
 80068cc:	f200 8156 	bhi.w	8006b7c <USBH_HandleControl+0x2c8>
 80068d0:	a201      	add	r2, pc, #4	@ (adr r2, 80068d8 <USBH_HandleControl+0x24>)
 80068d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d6:	bf00      	nop
 80068d8:	08006905 	.word	0x08006905
 80068dc:	0800691f 	.word	0x0800691f
 80068e0:	08006989 	.word	0x08006989
 80068e4:	080069af 	.word	0x080069af
 80068e8:	080069e7 	.word	0x080069e7
 80068ec:	08006a11 	.word	0x08006a11
 80068f0:	08006a63 	.word	0x08006a63
 80068f4:	08006a85 	.word	0x08006a85
 80068f8:	08006ac1 	.word	0x08006ac1
 80068fc:	08006ae7 	.word	0x08006ae7
 8006900:	08006b25 	.word	0x08006b25
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f103 0110 	add.w	r1, r3, #16
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	795b      	ldrb	r3, [r3, #5]
 800690e:	461a      	mov	r2, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f943 	bl	8006b9c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	761a      	strb	r2, [r3, #24]
      break;
 800691c:	e139      	b.n	8006b92 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	795b      	ldrb	r3, [r3, #5]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fcc5 	bl	80072b4 <USBH_LL_GetURBState>
 800692a:	4603      	mov	r3, r0
 800692c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800692e:	7bbb      	ldrb	r3, [r7, #14]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d11e      	bne.n	8006972 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	7c1b      	ldrb	r3, [r3, #16]
 8006938:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800693c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8adb      	ldrh	r3, [r3, #22]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006946:	7b7b      	ldrb	r3, [r7, #13]
 8006948:	2b80      	cmp	r3, #128	@ 0x80
 800694a:	d103      	bne.n	8006954 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2203      	movs	r2, #3
 8006950:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006952:	e115      	b.n	8006b80 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2205      	movs	r2, #5
 8006958:	761a      	strb	r2, [r3, #24]
      break;
 800695a:	e111      	b.n	8006b80 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800695c:	7b7b      	ldrb	r3, [r7, #13]
 800695e:	2b80      	cmp	r3, #128	@ 0x80
 8006960:	d103      	bne.n	800696a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2209      	movs	r2, #9
 8006966:	761a      	strb	r2, [r3, #24]
      break;
 8006968:	e10a      	b.n	8006b80 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2207      	movs	r2, #7
 800696e:	761a      	strb	r2, [r3, #24]
      break;
 8006970:	e106      	b.n	8006b80 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b04      	cmp	r3, #4
 8006976:	d003      	beq.n	8006980 <USBH_HandleControl+0xcc>
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	2b02      	cmp	r3, #2
 800697c:	f040 8100 	bne.w	8006b80 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	220b      	movs	r2, #11
 8006984:	761a      	strb	r2, [r3, #24]
      break;
 8006986:	e0fb      	b.n	8006b80 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800698e:	b29a      	uxth	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6899      	ldr	r1, [r3, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	899a      	ldrh	r2, [r3, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	791b      	ldrb	r3, [r3, #4]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f93a 	bl	8006c1a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2204      	movs	r2, #4
 80069aa:	761a      	strb	r2, [r3, #24]
      break;
 80069ac:	e0f1      	b.n	8006b92 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	791b      	ldrb	r3, [r3, #4]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fc7d 	bl	80072b4 <USBH_LL_GetURBState>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d102      	bne.n	80069ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2209      	movs	r2, #9
 80069c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	2b05      	cmp	r3, #5
 80069ce:	d102      	bne.n	80069d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80069d0:	2303      	movs	r3, #3
 80069d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80069d4:	e0d6      	b.n	8006b84 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b04      	cmp	r3, #4
 80069da:	f040 80d3 	bne.w	8006b84 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	220b      	movs	r2, #11
 80069e2:	761a      	strb	r2, [r3, #24]
      break;
 80069e4:	e0ce      	b.n	8006b84 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6899      	ldr	r1, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	899a      	ldrh	r2, [r3, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	795b      	ldrb	r3, [r3, #5]
 80069f2:	2001      	movs	r0, #1
 80069f4:	9000      	str	r0, [sp, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f8ea 	bl	8006bd0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2206      	movs	r2, #6
 8006a0c:	761a      	strb	r2, [r3, #24]
      break;
 8006a0e:	e0c0      	b.n	8006b92 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	795b      	ldrb	r3, [r3, #5]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fc4c 	bl	80072b4 <USBH_LL_GetURBState>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d103      	bne.n	8006a2e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2207      	movs	r2, #7
 8006a2a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006a2c:	e0ac      	b.n	8006b88 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b05      	cmp	r3, #5
 8006a32:	d105      	bne.n	8006a40 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	220c      	movs	r2, #12
 8006a38:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3e:	e0a3      	b.n	8006b88 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d103      	bne.n	8006a4e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2205      	movs	r2, #5
 8006a4a:	761a      	strb	r2, [r3, #24]
      break;
 8006a4c:	e09c      	b.n	8006b88 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	f040 8099 	bne.w	8006b88 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	220b      	movs	r2, #11
 8006a5a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a60:	e092      	b.n	8006b88 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	791b      	ldrb	r3, [r3, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	2100      	movs	r1, #0
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8d5 	bl	8006c1a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2208      	movs	r2, #8
 8006a80:	761a      	strb	r2, [r3, #24]

      break;
 8006a82:	e086      	b.n	8006b92 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	791b      	ldrb	r3, [r3, #4]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fc12 	bl	80072b4 <USBH_LL_GetURBState>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d105      	bne.n	8006aa6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	220d      	movs	r2, #13
 8006a9e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006aa4:	e072      	b.n	8006b8c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d103      	bne.n	8006ab4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	220b      	movs	r2, #11
 8006ab0:	761a      	strb	r2, [r3, #24]
      break;
 8006ab2:	e06b      	b.n	8006b8c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b05      	cmp	r3, #5
 8006ab8:	d168      	bne.n	8006b8c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006aba:	2303      	movs	r3, #3
 8006abc:	73fb      	strb	r3, [r7, #15]
      break;
 8006abe:	e065      	b.n	8006b8c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	795b      	ldrb	r3, [r3, #5]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	9200      	str	r2, [sp, #0]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2100      	movs	r1, #0
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f87f 	bl	8006bd0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	220a      	movs	r2, #10
 8006ae2:	761a      	strb	r2, [r3, #24]
      break;
 8006ae4:	e055      	b.n	8006b92 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	795b      	ldrb	r3, [r3, #5]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fbe1 	bl	80072b4 <USBH_LL_GetURBState>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d105      	bne.n	8006b08 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	220d      	movs	r2, #13
 8006b04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b06:	e043      	b.n	8006b90 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d103      	bne.n	8006b16 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2209      	movs	r2, #9
 8006b12:	761a      	strb	r2, [r3, #24]
      break;
 8006b14:	e03c      	b.n	8006b90 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d139      	bne.n	8006b90 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	220b      	movs	r2, #11
 8006b20:	761a      	strb	r2, [r3, #24]
      break;
 8006b22:	e035      	b.n	8006b90 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	7e5b      	ldrb	r3, [r3, #25]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	765a      	strb	r2, [r3, #25]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	7e5b      	ldrb	r3, [r3, #25]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d806      	bhi.n	8006b46 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006b44:	e025      	b.n	8006b92 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006b4c:	2106      	movs	r1, #6
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	795b      	ldrb	r3, [r3, #5]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f90c 	bl	8006d7c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	791b      	ldrb	r3, [r3, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f906 	bl	8006d7c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006b76:	2302      	movs	r3, #2
 8006b78:	73fb      	strb	r3, [r7, #15]
      break;
 8006b7a:	e00a      	b.n	8006b92 <USBH_HandleControl+0x2de>

    default:
      break;
 8006b7c:	bf00      	nop
 8006b7e:	e008      	b.n	8006b92 <USBH_HandleControl+0x2de>
      break;
 8006b80:	bf00      	nop
 8006b82:	e006      	b.n	8006b92 <USBH_HandleControl+0x2de>
      break;
 8006b84:	bf00      	nop
 8006b86:	e004      	b.n	8006b92 <USBH_HandleControl+0x2de>
      break;
 8006b88:	bf00      	nop
 8006b8a:	e002      	b.n	8006b92 <USBH_HandleControl+0x2de>
      break;
 8006b8c:	bf00      	nop
 8006b8e:	e000      	b.n	8006b92 <USBH_HandleControl+0x2de>
      break;
 8006b90:	bf00      	nop
  }

  return status;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af04      	add	r7, sp, #16
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006baa:	79f9      	ldrb	r1, [r7, #7]
 8006bac:	2300      	movs	r3, #0
 8006bae:	9303      	str	r3, [sp, #12]
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	9302      	str	r3, [sp, #8]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fb46 	bl	8007252 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af04      	add	r7, sp, #16
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	4611      	mov	r1, r2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	460b      	mov	r3, r1
 8006be0:	80fb      	strh	r3, [r7, #6]
 8006be2:	4613      	mov	r3, r2
 8006be4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006bf4:	7979      	ldrb	r1, [r7, #5]
 8006bf6:	7e3b      	ldrb	r3, [r7, #24]
 8006bf8:	9303      	str	r3, [sp, #12]
 8006bfa:	88fb      	ldrh	r3, [r7, #6]
 8006bfc:	9302      	str	r3, [sp, #8]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2301      	movs	r3, #1
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2300      	movs	r3, #0
 8006c08:	2200      	movs	r2, #0
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fb21 	bl	8007252 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b088      	sub	sp, #32
 8006c1e:	af04      	add	r7, sp, #16
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	4611      	mov	r1, r2
 8006c26:	461a      	mov	r2, r3
 8006c28:	460b      	mov	r3, r1
 8006c2a:	80fb      	strh	r3, [r7, #6]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006c30:	7979      	ldrb	r1, [r7, #5]
 8006c32:	2300      	movs	r3, #0
 8006c34:	9303      	str	r3, [sp, #12]
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	9302      	str	r3, [sp, #8]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	9301      	str	r3, [sp, #4]
 8006c3e:	2301      	movs	r3, #1
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	2300      	movs	r3, #0
 8006c44:	2201      	movs	r2, #1
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fb03 	bl	8007252 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006c4c:	2300      	movs	r3, #0

}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b088      	sub	sp, #32
 8006c5a:	af04      	add	r7, sp, #16
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	4611      	mov	r1, r2
 8006c62:	461a      	mov	r2, r3
 8006c64:	460b      	mov	r3, r1
 8006c66:	80fb      	strh	r3, [r7, #6]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006c7a:	7979      	ldrb	r1, [r7, #5]
 8006c7c:	7e3b      	ldrb	r3, [r7, #24]
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	88fb      	ldrh	r3, [r7, #6]
 8006c82:	9302      	str	r3, [sp, #8]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	2301      	movs	r3, #1
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	2200      	movs	r2, #0
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fade 	bl	8007252 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af04      	add	r7, sp, #16
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4611      	mov	r1, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	460b      	mov	r3, r1
 8006cb0:	80fb      	strh	r3, [r7, #6]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006cb6:	7979      	ldrb	r1, [r7, #5]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9303      	str	r3, [sp, #12]
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	9302      	str	r3, [sp, #8]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2302      	movs	r3, #2
 8006cca:	2201      	movs	r2, #1
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fac0 	bl	8007252 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af04      	add	r7, sp, #16
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4603      	mov	r3, r0
 8006cec:	70fb      	strb	r3, [r7, #3]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70bb      	strb	r3, [r7, #2]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006cf6:	7878      	ldrb	r0, [r7, #1]
 8006cf8:	78ba      	ldrb	r2, [r7, #2]
 8006cfa:	78f9      	ldrb	r1, [r7, #3]
 8006cfc:	8b3b      	ldrh	r3, [r7, #24]
 8006cfe:	9302      	str	r3, [sp, #8]
 8006d00:	7d3b      	ldrb	r3, [r7, #20]
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	7c3b      	ldrb	r3, [r7, #16]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	4603      	mov	r3, r0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fa53 	bl	80071b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa72 	bl	8007214 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f836 	bl	8006db8 <USBH_GetFreePipe>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006d50:	89fb      	ldrh	r3, [r7, #14]
 8006d52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00a      	beq.n	8006d70 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006d5a:	78fa      	ldrb	r2, [r7, #3]
 8006d5c:	89fb      	ldrh	r3, [r7, #14]
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	33e0      	adds	r3, #224	@ 0xe0
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006d70:	89fb      	ldrh	r3, [r7, #14]
 8006d72:	b2db      	uxtb	r3, r3
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	2b0f      	cmp	r3, #15
 8006d8c:	d80d      	bhi.n	8006daa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006d8e:	78fb      	ldrb	r3, [r7, #3]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	33e0      	adds	r3, #224	@ 0xe0
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	33e0      	adds	r3, #224	@ 0xe0
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	e00f      	b.n	8006dea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	33e0      	adds	r3, #224	@ 0xe0
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d102      	bne.n	8006de4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	e007      	b.n	8006df4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	3301      	adds	r3, #1
 8006de8:	73fb      	strb	r3, [r7, #15]
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b0f      	cmp	r3, #15
 8006dee:	d9ec      	bls.n	8006dca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006df0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006e04:	2201      	movs	r2, #1
 8006e06:	490e      	ldr	r1, [pc, #56]	@ (8006e40 <MX_USB_HOST_Init+0x40>)
 8006e08:	480e      	ldr	r0, [pc, #56]	@ (8006e44 <MX_USB_HOST_Init+0x44>)
 8006e0a:	f7fe fb15 	bl	8005438 <USBH_Init>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006e14:	f7f9 fc36 	bl	8000684 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006e18:	490b      	ldr	r1, [pc, #44]	@ (8006e48 <MX_USB_HOST_Init+0x48>)
 8006e1a:	480a      	ldr	r0, [pc, #40]	@ (8006e44 <MX_USB_HOST_Init+0x44>)
 8006e1c:	f7fe fbb9 	bl	8005592 <USBH_RegisterClass>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006e26:	f7f9 fc2d 	bl	8000684 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006e2a:	4806      	ldr	r0, [pc, #24]	@ (8006e44 <MX_USB_HOST_Init+0x44>)
 8006e2c:	f7fe fc3d 	bl	80056aa <USBH_Start>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006e36:	f7f9 fc25 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006e3a:	bf00      	nop
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	08006e61 	.word	0x08006e61
 8006e44:	200000a0 	.word	0x200000a0
 8006e48:	2000000c 	.word	0x2000000c

08006e4c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006e50:	4802      	ldr	r0, [pc, #8]	@ (8006e5c <MX_USB_HOST_Process+0x10>)
 8006e52:	f7fe fc3b 	bl	80056cc <USBH_Process>
}
 8006e56:	bf00      	nop
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200000a0 	.word	0x200000a0

08006e60 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d819      	bhi.n	8006ea8 <USBH_UserProcess+0x48>
 8006e74:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <USBH_UserProcess+0x1c>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006ea9 	.word	0x08006ea9
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006ea1 	.word	0x08006ea1
 8006e8c:	08006e91 	.word	0x08006e91
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006e90:	4b09      	ldr	r3, [pc, #36]	@ (8006eb8 <USBH_UserProcess+0x58>)
 8006e92:	2203      	movs	r2, #3
 8006e94:	701a      	strb	r2, [r3, #0]
  break;
 8006e96:	e008      	b.n	8006eaa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006e98:	4b07      	ldr	r3, [pc, #28]	@ (8006eb8 <USBH_UserProcess+0x58>)
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	701a      	strb	r2, [r3, #0]
  break;
 8006e9e:	e004      	b.n	8006eaa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006ea0:	4b05      	ldr	r3, [pc, #20]	@ (8006eb8 <USBH_UserProcess+0x58>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	701a      	strb	r2, [r3, #0]
  break;
 8006ea6:	e000      	b.n	8006eaa <USBH_UserProcess+0x4a>

  default:
  break;
 8006ea8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20000478 	.word	0x20000478

08006ebc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	@ 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ec4:	f107 0314 	add.w	r3, r7, #20
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	605a      	str	r2, [r3, #4]
 8006ece:	609a      	str	r2, [r3, #8]
 8006ed0:	60da      	str	r2, [r3, #12]
 8006ed2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006edc:	d147      	bne.n	8006f6e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	4b25      	ldr	r3, [pc, #148]	@ (8006f78 <HAL_HCD_MspInit+0xbc>)
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee6:	4a24      	ldr	r2, [pc, #144]	@ (8006f78 <HAL_HCD_MspInit+0xbc>)
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8006eee:	4b22      	ldr	r3, [pc, #136]	@ (8006f78 <HAL_HCD_MspInit+0xbc>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	613b      	str	r3, [r7, #16]
 8006ef8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006efa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	481b      	ldr	r0, [pc, #108]	@ (8006f7c <HAL_HCD_MspInit+0xc0>)
 8006f10:	f7f9 fe3a 	bl	8000b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f22:	2303      	movs	r3, #3
 8006f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f26:	230a      	movs	r3, #10
 8006f28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f2a:	f107 0314 	add.w	r3, r7, #20
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4812      	ldr	r0, [pc, #72]	@ (8006f7c <HAL_HCD_MspInit+0xc0>)
 8006f32:	f7f9 fe29 	bl	8000b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f36:	4b10      	ldr	r3, [pc, #64]	@ (8006f78 <HAL_HCD_MspInit+0xbc>)
 8006f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8006f78 <HAL_HCD_MspInit+0xbc>)
 8006f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f40:	6353      	str	r3, [r2, #52]	@ 0x34
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	4b0c      	ldr	r3, [pc, #48]	@ (8006f78 <HAL_HCD_MspInit+0xbc>)
 8006f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8006f78 <HAL_HCD_MspInit+0xbc>)
 8006f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f52:	4b09      	ldr	r3, [pc, #36]	@ (8006f78 <HAL_HCD_MspInit+0xbc>)
 8006f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2100      	movs	r1, #0
 8006f62:	2043      	movs	r0, #67	@ 0x43
 8006f64:	f7f9 fdd9 	bl	8000b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f68:	2043      	movs	r0, #67	@ 0x43
 8006f6a:	f7f9 fdf2 	bl	8000b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f6e:	bf00      	nop
 8006f70:	3728      	adds	r7, #40	@ 0x28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	40020000 	.word	0x40020000

08006f80 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe ff73 	bl	8005e7a <USBH_LL_IncTimer>
}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe ffab 	bl	8005f06 <USBH_LL_Connect>
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe ffb4 	bl	8005f34 <USBH_LL_Disconnect>
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe ff65 	bl	8005ece <USBH_LL_PortEnabled>
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe ff65 	bl	8005eea <USBH_LL_PortDisabled>
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007036:	2b01      	cmp	r3, #1
 8007038:	d12a      	bne.n	8007090 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800703a:	4a18      	ldr	r2, [pc, #96]	@ (800709c <USBH_LL_Init+0x74>)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a15      	ldr	r2, [pc, #84]	@ (800709c <USBH_LL_Init+0x74>)
 8007046:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800704a:	4b14      	ldr	r3, [pc, #80]	@ (800709c <USBH_LL_Init+0x74>)
 800704c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007050:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007052:	4b12      	ldr	r3, [pc, #72]	@ (800709c <USBH_LL_Init+0x74>)
 8007054:	2208      	movs	r2, #8
 8007056:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007058:	4b10      	ldr	r3, [pc, #64]	@ (800709c <USBH_LL_Init+0x74>)
 800705a:	2201      	movs	r2, #1
 800705c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800705e:	4b0f      	ldr	r3, [pc, #60]	@ (800709c <USBH_LL_Init+0x74>)
 8007060:	2200      	movs	r2, #0
 8007062:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007064:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <USBH_LL_Init+0x74>)
 8007066:	2202      	movs	r2, #2
 8007068:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800706a:	4b0c      	ldr	r3, [pc, #48]	@ (800709c <USBH_LL_Init+0x74>)
 800706c:	2200      	movs	r2, #0
 800706e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007070:	480a      	ldr	r0, [pc, #40]	@ (800709c <USBH_LL_Init+0x74>)
 8007072:	f7f9 ff3e 	bl	8000ef2 <HAL_HCD_Init>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800707c:	f7f9 fb02 	bl	8000684 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007080:	4806      	ldr	r0, [pc, #24]	@ (800709c <USBH_LL_Init+0x74>)
 8007082:	f7fa fb9f 	bl	80017c4 <HAL_HCD_GetCurrentFrame>
 8007086:	4603      	mov	r3, r0
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7fe fee6 	bl	8005e5c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	2000047c 	.word	0x2000047c

080070a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fa fb0c 	bl	80016d4 <HAL_HCD_Start>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 f95e 	bl	8007384 <USBH_Get_USB_Status>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fa fb14 	bl	800171a <HAL_HCD_Stop>
 80070f2:	4603      	mov	r3, r0
 80070f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 f943 	bl	8007384 <USBH_Get_USB_Status>
 80070fe:	4603      	mov	r3, r0
 8007100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007102:	7bbb      	ldrb	r3, [r7, #14]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007114:	2301      	movs	r3, #1
 8007116:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800711e:	4618      	mov	r0, r3
 8007120:	f7fa fb5e 	bl	80017e0 <HAL_HCD_GetCurrentSpeed>
 8007124:	4603      	mov	r3, r0
 8007126:	2b02      	cmp	r3, #2
 8007128:	d00c      	beq.n	8007144 <USBH_LL_GetSpeed+0x38>
 800712a:	2b02      	cmp	r3, #2
 800712c:	d80d      	bhi.n	800714a <USBH_LL_GetSpeed+0x3e>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <USBH_LL_GetSpeed+0x2c>
 8007132:	2b01      	cmp	r3, #1
 8007134:	d003      	beq.n	800713e <USBH_LL_GetSpeed+0x32>
 8007136:	e008      	b.n	800714a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]
    break;
 800713c:	e008      	b.n	8007150 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800713e:	2301      	movs	r3, #1
 8007140:	73fb      	strb	r3, [r7, #15]
    break;
 8007142:	e005      	b.n	8007150 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007144:	2302      	movs	r3, #2
 8007146:	73fb      	strb	r3, [r7, #15]
    break;
 8007148:	e002      	b.n	8007150 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800714a:	2301      	movs	r3, #1
 800714c:	73fb      	strb	r3, [r7, #15]
    break;
 800714e:	bf00      	nop
  }
  return  speed;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007170:	4618      	mov	r0, r3
 8007172:	f7fa faef 	bl	8001754 <HAL_HCD_ResetPort>
 8007176:	4603      	mov	r3, r0
 8007178:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 f901 	bl	8007384 <USBH_Get_USB_Status>
 8007182:	4603      	mov	r3, r0
 8007184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007186:	7bbb      	ldrb	r3, [r7, #14]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80071a2:	78fa      	ldrb	r2, [r7, #3]
 80071a4:	4611      	mov	r1, r2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fa faf7 	bl	800179a <HAL_HCD_HC_GetXferCount>
 80071ac:	4603      	mov	r3, r0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80071b6:	b590      	push	{r4, r7, lr}
 80071b8:	b089      	sub	sp, #36	@ 0x24
 80071ba:	af04      	add	r7, sp, #16
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	4608      	mov	r0, r1
 80071c0:	4611      	mov	r1, r2
 80071c2:	461a      	mov	r2, r3
 80071c4:	4603      	mov	r3, r0
 80071c6:	70fb      	strb	r3, [r7, #3]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70bb      	strb	r3, [r7, #2]
 80071cc:	4613      	mov	r3, r2
 80071ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80071de:	787c      	ldrb	r4, [r7, #1]
 80071e0:	78ba      	ldrb	r2, [r7, #2]
 80071e2:	78f9      	ldrb	r1, [r7, #3]
 80071e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071e6:	9302      	str	r3, [sp, #8]
 80071e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	4623      	mov	r3, r4
 80071f6:	f7f9 fee3 	bl	8000fc0 <HAL_HCD_HC_Init>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f8bf 	bl	8007384 <USBH_Get_USB_Status>
 8007206:	4603      	mov	r3, r0
 8007208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800720a:	7bbb      	ldrb	r3, [r7, #14]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	bd90      	pop	{r4, r7, pc}

08007214 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800722e:	78fa      	ldrb	r2, [r7, #3]
 8007230:	4611      	mov	r1, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f7f9 ff7c 	bl	8001130 <HAL_HCD_HC_Halt>
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 f8a0 	bl	8007384 <USBH_Get_USB_Status>
 8007244:	4603      	mov	r3, r0
 8007246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007248:	7bbb      	ldrb	r3, [r7, #14]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007252:	b590      	push	{r4, r7, lr}
 8007254:	b089      	sub	sp, #36	@ 0x24
 8007256:	af04      	add	r7, sp, #16
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	4608      	mov	r0, r1
 800725c:	4611      	mov	r1, r2
 800725e:	461a      	mov	r2, r3
 8007260:	4603      	mov	r3, r0
 8007262:	70fb      	strb	r3, [r7, #3]
 8007264:	460b      	mov	r3, r1
 8007266:	70bb      	strb	r3, [r7, #2]
 8007268:	4613      	mov	r3, r2
 800726a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800727a:	787c      	ldrb	r4, [r7, #1]
 800727c:	78ba      	ldrb	r2, [r7, #2]
 800727e:	78f9      	ldrb	r1, [r7, #3]
 8007280:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007284:	9303      	str	r3, [sp, #12]
 8007286:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007288:	9302      	str	r3, [sp, #8]
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4623      	mov	r3, r4
 8007296:	f7f9 ff6f 	bl	8001178 <HAL_HCD_HC_SubmitRequest>
 800729a:	4603      	mov	r3, r0
 800729c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 f86f 	bl	8007384 <USBH_Get_USB_Status>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd90      	pop	{r4, r7, pc}

080072b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80072c6:	78fa      	ldrb	r2, [r7, #3]
 80072c8:	4611      	mov	r1, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fa fa50 	bl	8001770 <HAL_HCD_HC_GetURBState>
 80072d0:	4603      	mov	r3, r0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d103      	bne.n	80072f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 f872 	bl	80073dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80072f8:	20c8      	movs	r0, #200	@ 0xc8
 80072fa:	f7f9 fb0f 	bl	800091c <HAL_Delay>
  return USBH_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
 8007314:	4613      	mov	r3, r2
 8007316:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800731e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	4613      	mov	r3, r2
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	1a9b      	subs	r3, r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	3317      	adds	r3, #23
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	68f9      	ldr	r1, [r7, #12]
 800733a:	4613      	mov	r3, r2
 800733c:	011b      	lsls	r3, r3, #4
 800733e:	1a9b      	subs	r3, r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	440b      	add	r3, r1
 8007344:	333c      	adds	r3, #60	@ 0x3c
 8007346:	78ba      	ldrb	r2, [r7, #2]
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	e009      	b.n	8007360 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800734c:	78fa      	ldrb	r2, [r7, #3]
 800734e:	68f9      	ldr	r1, [r7, #12]
 8007350:	4613      	mov	r3, r2
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	440b      	add	r3, r1
 800735a:	333d      	adds	r3, #61	@ 0x3d
 800735c:	78ba      	ldrb	r2, [r7, #2]
 800735e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7f9 fad0 	bl	800091c <HAL_Delay>
}
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007392:	79fb      	ldrb	r3, [r7, #7]
 8007394:	2b03      	cmp	r3, #3
 8007396:	d817      	bhi.n	80073c8 <USBH_Get_USB_Status+0x44>
 8007398:	a201      	add	r2, pc, #4	@ (adr r2, 80073a0 <USBH_Get_USB_Status+0x1c>)
 800739a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739e:	bf00      	nop
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073b7 	.word	0x080073b7
 80073a8:	080073bd 	.word	0x080073bd
 80073ac:	080073c3 	.word	0x080073c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]
    break;
 80073b4:	e00b      	b.n	80073ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80073b6:	2302      	movs	r3, #2
 80073b8:	73fb      	strb	r3, [r7, #15]
    break;
 80073ba:	e008      	b.n	80073ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80073bc:	2301      	movs	r3, #1
 80073be:	73fb      	strb	r3, [r7, #15]
    break;
 80073c0:	e005      	b.n	80073ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80073c2:	2302      	movs	r3, #2
 80073c4:	73fb      	strb	r3, [r7, #15]
    break;
 80073c6:	e002      	b.n	80073ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80073c8:	2302      	movs	r3, #2
 80073ca:	73fb      	strb	r3, [r7, #15]
    break;
 80073cc:	bf00      	nop
  }
  return usb_status;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	e001      	b.n	80073fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80073f6:	2301      	movs	r3, #1
 80073f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	461a      	mov	r2, r3
 80073fe:	2101      	movs	r1, #1
 8007400:	4803      	ldr	r0, [pc, #12]	@ (8007410 <MX_DriverVbusFS+0x34>)
 8007402:	f7f9 fd5d 	bl	8000ec0 <HAL_GPIO_WritePin>
}
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	40020800 	.word	0x40020800

08007414 <malloc>:
 8007414:	4b02      	ldr	r3, [pc, #8]	@ (8007420 <malloc+0xc>)
 8007416:	4601      	mov	r1, r0
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	f000 b82d 	b.w	8007478 <_malloc_r>
 800741e:	bf00      	nop
 8007420:	2000002c 	.word	0x2000002c

08007424 <free>:
 8007424:	4b02      	ldr	r3, [pc, #8]	@ (8007430 <free+0xc>)
 8007426:	4601      	mov	r1, r0
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	f000 b8f5 	b.w	8007618 <_free_r>
 800742e:	bf00      	nop
 8007430:	2000002c 	.word	0x2000002c

08007434 <sbrk_aligned>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	4e0f      	ldr	r6, [pc, #60]	@ (8007474 <sbrk_aligned+0x40>)
 8007438:	460c      	mov	r4, r1
 800743a:	6831      	ldr	r1, [r6, #0]
 800743c:	4605      	mov	r5, r0
 800743e:	b911      	cbnz	r1, 8007446 <sbrk_aligned+0x12>
 8007440:	f000 f8ae 	bl	80075a0 <_sbrk_r>
 8007444:	6030      	str	r0, [r6, #0]
 8007446:	4621      	mov	r1, r4
 8007448:	4628      	mov	r0, r5
 800744a:	f000 f8a9 	bl	80075a0 <_sbrk_r>
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	d103      	bne.n	800745a <sbrk_aligned+0x26>
 8007452:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007456:	4620      	mov	r0, r4
 8007458:	bd70      	pop	{r4, r5, r6, pc}
 800745a:	1cc4      	adds	r4, r0, #3
 800745c:	f024 0403 	bic.w	r4, r4, #3
 8007460:	42a0      	cmp	r0, r4
 8007462:	d0f8      	beq.n	8007456 <sbrk_aligned+0x22>
 8007464:	1a21      	subs	r1, r4, r0
 8007466:	4628      	mov	r0, r5
 8007468:	f000 f89a 	bl	80075a0 <_sbrk_r>
 800746c:	3001      	adds	r0, #1
 800746e:	d1f2      	bne.n	8007456 <sbrk_aligned+0x22>
 8007470:	e7ef      	b.n	8007452 <sbrk_aligned+0x1e>
 8007472:	bf00      	nop
 8007474:	2000085c 	.word	0x2000085c

08007478 <_malloc_r>:
 8007478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800747c:	1ccd      	adds	r5, r1, #3
 800747e:	f025 0503 	bic.w	r5, r5, #3
 8007482:	3508      	adds	r5, #8
 8007484:	2d0c      	cmp	r5, #12
 8007486:	bf38      	it	cc
 8007488:	250c      	movcc	r5, #12
 800748a:	2d00      	cmp	r5, #0
 800748c:	4606      	mov	r6, r0
 800748e:	db01      	blt.n	8007494 <_malloc_r+0x1c>
 8007490:	42a9      	cmp	r1, r5
 8007492:	d904      	bls.n	800749e <_malloc_r+0x26>
 8007494:	230c      	movs	r3, #12
 8007496:	6033      	str	r3, [r6, #0]
 8007498:	2000      	movs	r0, #0
 800749a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800749e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007574 <_malloc_r+0xfc>
 80074a2:	f000 f869 	bl	8007578 <__malloc_lock>
 80074a6:	f8d8 3000 	ldr.w	r3, [r8]
 80074aa:	461c      	mov	r4, r3
 80074ac:	bb44      	cbnz	r4, 8007500 <_malloc_r+0x88>
 80074ae:	4629      	mov	r1, r5
 80074b0:	4630      	mov	r0, r6
 80074b2:	f7ff ffbf 	bl	8007434 <sbrk_aligned>
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	4604      	mov	r4, r0
 80074ba:	d158      	bne.n	800756e <_malloc_r+0xf6>
 80074bc:	f8d8 4000 	ldr.w	r4, [r8]
 80074c0:	4627      	mov	r7, r4
 80074c2:	2f00      	cmp	r7, #0
 80074c4:	d143      	bne.n	800754e <_malloc_r+0xd6>
 80074c6:	2c00      	cmp	r4, #0
 80074c8:	d04b      	beq.n	8007562 <_malloc_r+0xea>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	4639      	mov	r1, r7
 80074ce:	4630      	mov	r0, r6
 80074d0:	eb04 0903 	add.w	r9, r4, r3
 80074d4:	f000 f864 	bl	80075a0 <_sbrk_r>
 80074d8:	4581      	cmp	r9, r0
 80074da:	d142      	bne.n	8007562 <_malloc_r+0xea>
 80074dc:	6821      	ldr	r1, [r4, #0]
 80074de:	1a6d      	subs	r5, r5, r1
 80074e0:	4629      	mov	r1, r5
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7ff ffa6 	bl	8007434 <sbrk_aligned>
 80074e8:	3001      	adds	r0, #1
 80074ea:	d03a      	beq.n	8007562 <_malloc_r+0xea>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	442b      	add	r3, r5
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	f8d8 3000 	ldr.w	r3, [r8]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	bb62      	cbnz	r2, 8007554 <_malloc_r+0xdc>
 80074fa:	f8c8 7000 	str.w	r7, [r8]
 80074fe:	e00f      	b.n	8007520 <_malloc_r+0xa8>
 8007500:	6822      	ldr	r2, [r4, #0]
 8007502:	1b52      	subs	r2, r2, r5
 8007504:	d420      	bmi.n	8007548 <_malloc_r+0xd0>
 8007506:	2a0b      	cmp	r2, #11
 8007508:	d917      	bls.n	800753a <_malloc_r+0xc2>
 800750a:	1961      	adds	r1, r4, r5
 800750c:	42a3      	cmp	r3, r4
 800750e:	6025      	str	r5, [r4, #0]
 8007510:	bf18      	it	ne
 8007512:	6059      	strne	r1, [r3, #4]
 8007514:	6863      	ldr	r3, [r4, #4]
 8007516:	bf08      	it	eq
 8007518:	f8c8 1000 	streq.w	r1, [r8]
 800751c:	5162      	str	r2, [r4, r5]
 800751e:	604b      	str	r3, [r1, #4]
 8007520:	4630      	mov	r0, r6
 8007522:	f000 f82f 	bl	8007584 <__malloc_unlock>
 8007526:	f104 000b 	add.w	r0, r4, #11
 800752a:	1d23      	adds	r3, r4, #4
 800752c:	f020 0007 	bic.w	r0, r0, #7
 8007530:	1ac2      	subs	r2, r0, r3
 8007532:	bf1c      	itt	ne
 8007534:	1a1b      	subne	r3, r3, r0
 8007536:	50a3      	strne	r3, [r4, r2]
 8007538:	e7af      	b.n	800749a <_malloc_r+0x22>
 800753a:	6862      	ldr	r2, [r4, #4]
 800753c:	42a3      	cmp	r3, r4
 800753e:	bf0c      	ite	eq
 8007540:	f8c8 2000 	streq.w	r2, [r8]
 8007544:	605a      	strne	r2, [r3, #4]
 8007546:	e7eb      	b.n	8007520 <_malloc_r+0xa8>
 8007548:	4623      	mov	r3, r4
 800754a:	6864      	ldr	r4, [r4, #4]
 800754c:	e7ae      	b.n	80074ac <_malloc_r+0x34>
 800754e:	463c      	mov	r4, r7
 8007550:	687f      	ldr	r7, [r7, #4]
 8007552:	e7b6      	b.n	80074c2 <_malloc_r+0x4a>
 8007554:	461a      	mov	r2, r3
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	42a3      	cmp	r3, r4
 800755a:	d1fb      	bne.n	8007554 <_malloc_r+0xdc>
 800755c:	2300      	movs	r3, #0
 800755e:	6053      	str	r3, [r2, #4]
 8007560:	e7de      	b.n	8007520 <_malloc_r+0xa8>
 8007562:	230c      	movs	r3, #12
 8007564:	6033      	str	r3, [r6, #0]
 8007566:	4630      	mov	r0, r6
 8007568:	f000 f80c 	bl	8007584 <__malloc_unlock>
 800756c:	e794      	b.n	8007498 <_malloc_r+0x20>
 800756e:	6005      	str	r5, [r0, #0]
 8007570:	e7d6      	b.n	8007520 <_malloc_r+0xa8>
 8007572:	bf00      	nop
 8007574:	20000860 	.word	0x20000860

08007578 <__malloc_lock>:
 8007578:	4801      	ldr	r0, [pc, #4]	@ (8007580 <__malloc_lock+0x8>)
 800757a:	f000 b84b 	b.w	8007614 <__retarget_lock_acquire_recursive>
 800757e:	bf00      	nop
 8007580:	200009a0 	.word	0x200009a0

08007584 <__malloc_unlock>:
 8007584:	4801      	ldr	r0, [pc, #4]	@ (800758c <__malloc_unlock+0x8>)
 8007586:	f000 b846 	b.w	8007616 <__retarget_lock_release_recursive>
 800758a:	bf00      	nop
 800758c:	200009a0 	.word	0x200009a0

08007590 <memset>:
 8007590:	4402      	add	r2, r0
 8007592:	4603      	mov	r3, r0
 8007594:	4293      	cmp	r3, r2
 8007596:	d100      	bne.n	800759a <memset+0xa>
 8007598:	4770      	bx	lr
 800759a:	f803 1b01 	strb.w	r1, [r3], #1
 800759e:	e7f9      	b.n	8007594 <memset+0x4>

080075a0 <_sbrk_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d06      	ldr	r5, [pc, #24]	@ (80075bc <_sbrk_r+0x1c>)
 80075a4:	2300      	movs	r3, #0
 80075a6:	4604      	mov	r4, r0
 80075a8:	4608      	mov	r0, r1
 80075aa:	602b      	str	r3, [r5, #0]
 80075ac:	f7f9 f8d2 	bl	8000754 <_sbrk>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_sbrk_r+0x1a>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_sbrk_r+0x1a>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	2000099c 	.word	0x2000099c

080075c0 <__errno>:
 80075c0:	4b01      	ldr	r3, [pc, #4]	@ (80075c8 <__errno+0x8>)
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	2000002c 	.word	0x2000002c

080075cc <__libc_init_array>:
 80075cc:	b570      	push	{r4, r5, r6, lr}
 80075ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007604 <__libc_init_array+0x38>)
 80075d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007608 <__libc_init_array+0x3c>)
 80075d2:	1b64      	subs	r4, r4, r5
 80075d4:	10a4      	asrs	r4, r4, #2
 80075d6:	2600      	movs	r6, #0
 80075d8:	42a6      	cmp	r6, r4
 80075da:	d109      	bne.n	80075f0 <__libc_init_array+0x24>
 80075dc:	4d0b      	ldr	r5, [pc, #44]	@ (800760c <__libc_init_array+0x40>)
 80075de:	4c0c      	ldr	r4, [pc, #48]	@ (8007610 <__libc_init_array+0x44>)
 80075e0:	f000 f864 	bl	80076ac <_init>
 80075e4:	1b64      	subs	r4, r4, r5
 80075e6:	10a4      	asrs	r4, r4, #2
 80075e8:	2600      	movs	r6, #0
 80075ea:	42a6      	cmp	r6, r4
 80075ec:	d105      	bne.n	80075fa <__libc_init_array+0x2e>
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f4:	4798      	blx	r3
 80075f6:	3601      	adds	r6, #1
 80075f8:	e7ee      	b.n	80075d8 <__libc_init_array+0xc>
 80075fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fe:	4798      	blx	r3
 8007600:	3601      	adds	r6, #1
 8007602:	e7f2      	b.n	80075ea <__libc_init_array+0x1e>
 8007604:	080076e0 	.word	0x080076e0
 8007608:	080076e0 	.word	0x080076e0
 800760c:	080076e0 	.word	0x080076e0
 8007610:	080076e4 	.word	0x080076e4

08007614 <__retarget_lock_acquire_recursive>:
 8007614:	4770      	bx	lr

08007616 <__retarget_lock_release_recursive>:
 8007616:	4770      	bx	lr

08007618 <_free_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4605      	mov	r5, r0
 800761c:	2900      	cmp	r1, #0
 800761e:	d041      	beq.n	80076a4 <_free_r+0x8c>
 8007620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007624:	1f0c      	subs	r4, r1, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfb8      	it	lt
 800762a:	18e4      	addlt	r4, r4, r3
 800762c:	f7ff ffa4 	bl	8007578 <__malloc_lock>
 8007630:	4a1d      	ldr	r2, [pc, #116]	@ (80076a8 <_free_r+0x90>)
 8007632:	6813      	ldr	r3, [r2, #0]
 8007634:	b933      	cbnz	r3, 8007644 <_free_r+0x2c>
 8007636:	6063      	str	r3, [r4, #4]
 8007638:	6014      	str	r4, [r2, #0]
 800763a:	4628      	mov	r0, r5
 800763c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007640:	f7ff bfa0 	b.w	8007584 <__malloc_unlock>
 8007644:	42a3      	cmp	r3, r4
 8007646:	d908      	bls.n	800765a <_free_r+0x42>
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	1821      	adds	r1, r4, r0
 800764c:	428b      	cmp	r3, r1
 800764e:	bf01      	itttt	eq
 8007650:	6819      	ldreq	r1, [r3, #0]
 8007652:	685b      	ldreq	r3, [r3, #4]
 8007654:	1809      	addeq	r1, r1, r0
 8007656:	6021      	streq	r1, [r4, #0]
 8007658:	e7ed      	b.n	8007636 <_free_r+0x1e>
 800765a:	461a      	mov	r2, r3
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	b10b      	cbz	r3, 8007664 <_free_r+0x4c>
 8007660:	42a3      	cmp	r3, r4
 8007662:	d9fa      	bls.n	800765a <_free_r+0x42>
 8007664:	6811      	ldr	r1, [r2, #0]
 8007666:	1850      	adds	r0, r2, r1
 8007668:	42a0      	cmp	r0, r4
 800766a:	d10b      	bne.n	8007684 <_free_r+0x6c>
 800766c:	6820      	ldr	r0, [r4, #0]
 800766e:	4401      	add	r1, r0
 8007670:	1850      	adds	r0, r2, r1
 8007672:	4283      	cmp	r3, r0
 8007674:	6011      	str	r1, [r2, #0]
 8007676:	d1e0      	bne.n	800763a <_free_r+0x22>
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	6053      	str	r3, [r2, #4]
 800767e:	4408      	add	r0, r1
 8007680:	6010      	str	r0, [r2, #0]
 8007682:	e7da      	b.n	800763a <_free_r+0x22>
 8007684:	d902      	bls.n	800768c <_free_r+0x74>
 8007686:	230c      	movs	r3, #12
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	e7d6      	b.n	800763a <_free_r+0x22>
 800768c:	6820      	ldr	r0, [r4, #0]
 800768e:	1821      	adds	r1, r4, r0
 8007690:	428b      	cmp	r3, r1
 8007692:	bf04      	itt	eq
 8007694:	6819      	ldreq	r1, [r3, #0]
 8007696:	685b      	ldreq	r3, [r3, #4]
 8007698:	6063      	str	r3, [r4, #4]
 800769a:	bf04      	itt	eq
 800769c:	1809      	addeq	r1, r1, r0
 800769e:	6021      	streq	r1, [r4, #0]
 80076a0:	6054      	str	r4, [r2, #4]
 80076a2:	e7ca      	b.n	800763a <_free_r+0x22>
 80076a4:	bd38      	pop	{r3, r4, r5, pc}
 80076a6:	bf00      	nop
 80076a8:	20000860 	.word	0x20000860

080076ac <_init>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr

080076b8 <_fini>:
 80076b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ba:	bf00      	nop
 80076bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076be:	bc08      	pop	{r3}
 80076c0:	469e      	mov	lr, r3
 80076c2:	4770      	bx	lr
